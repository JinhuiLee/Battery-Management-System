
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000052a8  000052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000098  20000000  000052b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000640  20000098  00005348  00020098  2**3
                  ALLOC
  4 .stack        00002000  200006d8  00005988  00020098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   00035003  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004725  00000000  00000000  0005511c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007adc  00000000  00000000  00059841  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000868  00000000  00000000  0006131d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000968  00000000  00000000  00061b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00022bdd  00000000  00000000  000624ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012cab  00000000  00000000  000850ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a62d4  00000000  00000000  00097d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001bdc  00000000  00000000  0013e04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200026d8 	.word	0x200026d8
       4:	000026ad 	.word	0x000026ad
       8:	000026a9 	.word	0x000026a9
       c:	000026a9 	.word	0x000026a9
	...
      2c:	000026a9 	.word	0x000026a9
	...
      38:	000026a9 	.word	0x000026a9
      3c:	000026a9 	.word	0x000026a9
      40:	000026a9 	.word	0x000026a9
      44:	000026a9 	.word	0x000026a9
      48:	000009c5 	.word	0x000009c5
      4c:	000026a9 	.word	0x000026a9
      50:	000026a9 	.word	0x000026a9
      54:	00000bd5 	.word	0x00000bd5
      58:	000026a9 	.word	0x000026a9
      5c:	000026a9 	.word	0x000026a9
      60:	00000d95 	.word	0x00000d95
      64:	00001995 	.word	0x00001995
      68:	000019a5 	.word	0x000019a5
      6c:	000019b5 	.word	0x000019b5
      70:	000019c5 	.word	0x000019c5
      74:	000019d5 	.word	0x000019d5
      78:	000019e5 	.word	0x000019e5
      7c:	0000309d 	.word	0x0000309d
      80:	000026a9 	.word	0x000026a9
      84:	00000c89 	.word	0x00000c89
      88:	00000c99 	.word	0x00000c99
      8c:	00000ca9 	.word	0x00000ca9
      90:	000026a9 	.word	0x000026a9
      94:	000026a9 	.word	0x000026a9
      98:	000026a9 	.word	0x000026a9
      9c:	000026a9 	.word	0x000026a9
      a0:	000026a9 	.word	0x000026a9
      a4:	00000745 	.word	0x00000745
      a8:	00000755 	.word	0x00000755
      ac:	000026a9 	.word	0x000026a9
      b0:	000026a9 	.word	0x000026a9
      b4:	000026a9 	.word	0x000026a9
      b8:	000026a9 	.word	0x000026a9

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000098 	.word	0x20000098
      dc:	00000000 	.word	0x00000000
      e0:	000052b0 	.word	0x000052b0

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000009c 	.word	0x2000009c
     110:	000052b0 	.word	0x000052b0
     114:	000052b0 	.word	0x000052b0
     118:	00000000 	.word	0x00000000

0000011c <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     11c:	b510      	push	{r4, lr}
     11e:	b082      	sub	sp, #8
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     120:	466a      	mov	r2, sp
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <_adc_get_inst_index+0x28>)
     124:	cb12      	ldmia	r3!, {r1, r4}
     126:	c212      	stmia	r2!, {r1, r4}

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     128:	9b00      	ldr	r3, [sp, #0]
     12a:	4298      	cmp	r0, r3
     12c:	d005      	beq.n	13a <_adc_get_inst_index+0x1e>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     12e:	2300      	movs	r3, #0
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     130:	9a01      	ldr	r2, [sp, #4]
     132:	4282      	cmp	r2, r0
     134:	d103      	bne.n	13e <_adc_get_inst_index+0x22>
     136:	3301      	adds	r3, #1
     138:	e000      	b.n	13c <_adc_get_inst_index+0x20>
{
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     13a:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
			return i;
     13c:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     13e:	0018      	movs	r0, r3
     140:	b002      	add	sp, #8
     142:	bd10      	pop	{r4, pc}
     144:	00004e30 	.word	0x00004e30

00000148 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     148:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     14a:	2300      	movs	r3, #0
     14c:	2200      	movs	r2, #0
     14e:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     150:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     152:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     154:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     156:	2100      	movs	r1, #0
     158:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     15a:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     15c:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     15e:	2401      	movs	r4, #1
     160:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     162:	24c0      	movs	r4, #192	; 0xc0
     164:	0164      	lsls	r4, r4, #5
     166:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     168:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     16a:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     16c:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     16e:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     170:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     172:	242a      	movs	r4, #42	; 0x2a
     174:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     176:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     178:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     17a:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     17c:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     17e:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     180:	3c06      	subs	r4, #6
     182:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     184:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     186:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     188:	7541      	strb	r1, [r0, #21]
}
     18a:	bd10      	pop	{r4, pc}

0000018c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     18c:	b5f0      	push	{r4, r5, r6, r7, lr}
     18e:	465f      	mov	r7, fp
     190:	4656      	mov	r6, sl
     192:	464d      	mov	r5, r9
     194:	4644      	mov	r4, r8
     196:	b4f0      	push	{r4, r5, r6, r7}
     198:	b09d      	sub	sp, #116	; 0x74
     19a:	0005      	movs	r5, r0
     19c:	000e      	movs	r6, r1
     19e:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     1a0:	0008      	movs	r0, r1
     1a2:	4bd1      	ldr	r3, [pc, #836]	; (4e8 <adc_init+0x35c>)
     1a4:	4798      	blx	r3
     1a6:	0004      	movs	r4, r0
     1a8:	9000      	str	r0, [sp, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1aa:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1ac:	4acf      	ldr	r2, [pc, #828]	; (4ec <adc_init+0x360>)
     1ae:	69d1      	ldr	r1, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     1b0:	0080      	lsls	r0, r0, #2
     1b2:	4bcf      	ldr	r3, [pc, #828]	; (4f0 <adc_init+0x364>)
     1b4:	58c3      	ldr	r3, [r0, r3]
     1b6:	430b      	orrs	r3, r1
     1b8:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1ba:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1bc:	2005      	movs	r0, #5
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1be:	07db      	lsls	r3, r3, #31
     1c0:	d500      	bpl.n	1c4 <adc_init+0x38>
     1c2:	e24d      	b.n	660 <adc_init+0x4d4>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c4:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     1c6:	8c13      	ldrh	r3, [r2, #32]
     1c8:	b29b      	uxth	r3, r3
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	while (adc_is_syncing(module_inst)) {
     1ca:	2b00      	cmp	r3, #0
     1cc:	d1fb      	bne.n	1c6 <adc_init+0x3a>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1ce:	7833      	ldrb	r3, [r6, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     1d0:	201c      	movs	r0, #28

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	079b      	lsls	r3, r3, #30
     1d4:	d500      	bpl.n	1d8 <adc_init+0x4c>
     1d6:	e243      	b.n	660 <adc_init+0x4d4>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     1d8:	787b      	ldrb	r3, [r7, #1]
     1da:	712b      	strb	r3, [r5, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1dc:	2b00      	cmp	r3, #0
     1de:	d104      	bne.n	1ea <adc_init+0x5e>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1e0:	4ac4      	ldr	r2, [pc, #784]	; (4f4 <adc_init+0x368>)
     1e2:	69d1      	ldr	r1, [r2, #28]
     1e4:	3304      	adds	r3, #4
     1e6:	430b      	orrs	r3, r1
     1e8:	61d3      	str	r3, [r2, #28]
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     1ea:	2300      	movs	r3, #0
     1ec:	60ab      	str	r3, [r5, #8]
     1ee:	60eb      	str	r3, [r5, #12]
     1f0:	612b      	str	r3, [r5, #16]
	};

	module_inst->registered_callback_mask = 0;
     1f2:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1f4:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1f6:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1f8:	772b      	strb	r3, [r5, #28]

	_adc_instances[instance] = module_inst;
     1fa:	00a3      	lsls	r3, r4, #2
     1fc:	4abe      	ldr	r2, [pc, #760]	; (4f8 <adc_init+0x36c>)
     1fe:	509d      	str	r5, [r3, r2]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     200:	232a      	movs	r3, #42	; 0x2a
     202:	5cfb      	ldrb	r3, [r7, r3]
     204:	2b00      	cmp	r3, #0
     206:	d105      	bne.n	214 <adc_init+0x88>
     208:	7b3b      	ldrb	r3, [r7, #12]
     20a:	2b00      	cmp	r3, #0
     20c:	d102      	bne.n	214 <adc_init+0x88>
			!config->freerunning) {
		module_inst->software_trigger = true;
     20e:	3301      	adds	r3, #1
     210:	776b      	strb	r3, [r5, #29]
     212:	e001      	b.n	218 <adc_init+0x8c>
	} else {
		module_inst->software_trigger = false;
     214:	2300      	movs	r3, #0
     216:	776b      	strb	r3, [r5, #29]
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     218:	682b      	ldr	r3, [r5, #0]
     21a:	469a      	mov	sl, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     21c:	783b      	ldrb	r3, [r7, #0]
     21e:	aa02      	add	r2, sp, #8
     220:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     222:	4bb6      	ldr	r3, [pc, #728]	; (4fc <adc_init+0x370>)
     224:	5d1e      	ldrb	r6, [r3, r4]
     226:	0011      	movs	r1, r2
     228:	0030      	movs	r0, r6
     22a:	4bb5      	ldr	r3, [pc, #724]	; (500 <adc_init+0x374>)
     22c:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     22e:	0030      	movs	r0, r6
     230:	4bb4      	ldr	r3, [pc, #720]	; (504 <adc_init+0x378>)
     232:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     234:	793b      	ldrb	r3, [r7, #4]
     236:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
     238:	ae04      	add	r6, sp, #16
     23a:	4bb3      	ldr	r3, [pc, #716]	; (508 <adc_init+0x37c>)
     23c:	469c      	mov	ip, r3
     23e:	001a      	movs	r2, r3
     240:	3208      	adds	r2, #8
     242:	0031      	movs	r1, r6
     244:	ca49      	ldmia	r2!, {r0, r3, r6}
     246:	c149      	stmia	r1!, {r0, r3, r6}
     248:	ca49      	ldmia	r2!, {r0, r3, r6}
     24a:	c149      	stmia	r1!, {r0, r3, r6}
     24c:	ca49      	ldmia	r2!, {r0, r3, r6}
     24e:	c149      	stmia	r1!, {r0, r3, r6}
     250:	ca49      	ldmia	r2!, {r0, r3, r6}
     252:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
     254:	a910      	add	r1, sp, #64	; 0x40
     256:	4663      	mov	r3, ip
     258:	3338      	adds	r3, #56	; 0x38
     25a:	000a      	movs	r2, r1
     25c:	cb43      	ldmia	r3!, {r0, r1, r6}
     25e:	c243      	stmia	r2!, {r0, r1, r6}
     260:	cb43      	ldmia	r3!, {r0, r1, r6}
     262:	c243      	stmia	r2!, {r0, r1, r6}
     264:	cb43      	ldmia	r3!, {r0, r1, r6}
     266:	c243      	stmia	r2!, {r0, r1, r6}
     268:	cb43      	ldmia	r3!, {r0, r1, r6}
     26a:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     26c:	9b00      	ldr	r3, [sp, #0]
     26e:	2b00      	cmp	r3, #0
     270:	d003      	beq.n	27a <adc_init+0xee>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
     272:	a910      	add	r1, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     274:	2b01      	cmp	r3, #1
     276:	d003      	beq.n	280 <adc_init+0xf4>
     278:	e001      	b.n	27e <adc_init+0xf2>
	case 0:
		pinmapping = pinmapping0;
     27a:	a904      	add	r1, sp, #16
     27c:	e000      	b.n	280 <adc_init+0xf4>
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
     27e:	2100      	movs	r1, #0
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     280:	00a3      	lsls	r3, r4, #2
     282:	4aa2      	ldr	r2, [pc, #648]	; (50c <adc_init+0x380>)
     284:	589b      	ldr	r3, [r3, r2]
     286:	4699      	mov	r9, r3
     288:	4598      	cmp	r8, r3
     28a:	d80c      	bhi.n	2a6 <adc_init+0x11a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     28c:	4643      	mov	r3, r8
     28e:	0098      	lsls	r0, r3, #2
     290:	5840      	ldr	r0, [r0, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     292:	a903      	add	r1, sp, #12
     294:	2300      	movs	r3, #0
     296:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     298:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     29a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     29c:	3301      	adds	r3, #1
     29e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2a0:	b2c0      	uxtb	r0, r0
     2a2:	4b9b      	ldr	r3, [pc, #620]	; (510 <adc_init+0x384>)
     2a4:	4798      	blx	r3
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
	system_gclk_chan_enable(_adc_gclk_ids[index]);

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);
     2a6:	88fb      	ldrh	r3, [r7, #6]
     2a8:	4698      	mov	r8, r3
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
     2aa:	ae04      	add	r6, sp, #16
     2ac:	4b96      	ldr	r3, [pc, #600]	; (508 <adc_init+0x37c>)
     2ae:	469c      	mov	ip, r3
     2b0:	001a      	movs	r2, r3
     2b2:	3208      	adds	r2, #8
     2b4:	0031      	movs	r1, r6
     2b6:	ca49      	ldmia	r2!, {r0, r3, r6}
     2b8:	c149      	stmia	r1!, {r0, r3, r6}
     2ba:	ca49      	ldmia	r2!, {r0, r3, r6}
     2bc:	c149      	stmia	r1!, {r0, r3, r6}
     2be:	ca49      	ldmia	r2!, {r0, r3, r6}
     2c0:	c149      	stmia	r1!, {r0, r3, r6}
     2c2:	ca49      	ldmia	r2!, {r0, r3, r6}
     2c4:	c149      	stmia	r1!, {r0, r3, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
     2c6:	a910      	add	r1, sp, #64	; 0x40
     2c8:	4663      	mov	r3, ip
     2ca:	3338      	adds	r3, #56	; 0x38
     2cc:	000a      	movs	r2, r1
     2ce:	cb43      	ldmia	r3!, {r0, r1, r6}
     2d0:	c243      	stmia	r2!, {r0, r1, r6}
     2d2:	cb43      	ldmia	r3!, {r0, r1, r6}
     2d4:	c243      	stmia	r2!, {r0, r1, r6}
     2d6:	cb43      	ldmia	r3!, {r0, r1, r6}
     2d8:	c243      	stmia	r2!, {r0, r1, r6}
     2da:	cb43      	ldmia	r3!, {r0, r1, r6}
     2dc:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     2de:	9a00      	ldr	r2, [sp, #0]
     2e0:	2a00      	cmp	r2, #0
     2e2:	d003      	beq.n	2ec <adc_init+0x160>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
     2e4:	ab10      	add	r3, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     2e6:	2a01      	cmp	r2, #1
     2e8:	d003      	beq.n	2f2 <adc_init+0x166>
     2ea:	e001      	b.n	2f0 <adc_init+0x164>
	case 0:
		pinmapping = pinmapping0;
     2ec:	ab04      	add	r3, sp, #16
     2ee:	e000      	b.n	2f2 <adc_init+0x166>
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
     2f0:	2300      	movs	r3, #0
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     2f2:	45c8      	cmp	r8, r9
     2f4:	d900      	bls.n	2f8 <adc_init+0x16c>
     2f6:	e1ad      	b.n	654 <adc_init+0x4c8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f8:	4642      	mov	r2, r8
     2fa:	0090      	lsls	r0, r2, #2
     2fc:	58c0      	ldr	r0, [r0, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fe:	a903      	add	r1, sp, #12
     300:	2300      	movs	r3, #0
     302:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     304:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     306:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     308:	3301      	adds	r3, #1
     30a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     30c:	b2c0      	uxtb	r0, r0
     30e:	4b80      	ldr	r3, [pc, #512]	; (510 <adc_init+0x384>)
     310:	4798      	blx	r3
     312:	e19f      	b.n	654 <adc_init+0x4c8>
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     314:	465b      	mov	r3, fp
     316:	4642      	mov	r2, r8
     318:	4093      	lsls	r3, r2
     31a:	693a      	ldr	r2, [r7, #16]
     31c:	421a      	tst	r2, r3
     31e:	d030      	beq.n	382 <adc_init+0x1f6>
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
	const uint32_t pinmapping0[] = {
     320:	a804      	add	r0, sp, #16
     322:	4b79      	ldr	r3, [pc, #484]	; (508 <adc_init+0x37c>)
     324:	3308      	adds	r3, #8
     326:	0002      	movs	r2, r0
     328:	cb43      	ldmia	r3!, {r0, r1, r6}
     32a:	c243      	stmia	r2!, {r0, r1, r6}
     32c:	cb43      	ldmia	r3!, {r0, r1, r6}
     32e:	c243      	stmia	r2!, {r0, r1, r6}
     330:	cb43      	ldmia	r3!, {r0, r1, r6}
     332:	c243      	stmia	r2!, {r0, r1, r6}
     334:	cb43      	ldmia	r3!, {r0, r1, r6}
     336:	c243      	stmia	r2!, {r0, r1, r6}
			PIN_PA10B_ADC0_AIN10, PIN_PA11B_ADC0_AIN11,
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
		};
	const uint32_t pinmapping1[] = {
     338:	a810      	add	r0, sp, #64	; 0x40
     33a:	4b73      	ldr	r3, [pc, #460]	; (508 <adc_init+0x37c>)
     33c:	3338      	adds	r3, #56	; 0x38
     33e:	0002      	movs	r2, r0
     340:	cb43      	ldmia	r3!, {r0, r1, r6}
     342:	c243      	stmia	r2!, {r0, r1, r6}
     344:	cb43      	ldmia	r3!, {r0, r1, r6}
     346:	c243      	stmia	r2!, {r0, r1, r6}
     348:	cb43      	ldmia	r3!, {r0, r1, r6}
     34a:	c243      	stmia	r2!, {r0, r1, r6}
     34c:	cb43      	ldmia	r3!, {r0, r1, r6}
     34e:	c243      	stmia	r2!, {r0, r1, r6}
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     350:	9a00      	ldr	r2, [sp, #0]
     352:	2a00      	cmp	r2, #0
     354:	d003      	beq.n	35e <adc_init+0x1d2>
	case 0:
		pinmapping = pinmapping0;
		break;
	case 1:
		pinmapping = pinmapping1;
     356:	ab10      	add	r3, sp, #64	; 0x40
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};

	switch(index) {
     358:	2a01      	cmp	r2, #1
     35a:	d003      	beq.n	364 <adc_init+0x1d8>
     35c:	e001      	b.n	362 <adc_init+0x1d6>
	case 0:
		pinmapping = pinmapping0;
     35e:	ab04      	add	r3, sp, #16
     360:	e000      	b.n	364 <adc_init+0x1d8>
#   else
#       error ADC pin mappings are not defined for this device.
#   endif
	};
#elif (SAMC21)
	const uint32_t *pinmapping = NULL;;
     362:	2300      	movs	r3, #0
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= _adc_extchannel_msb[index]) {
     364:	9a01      	ldr	r2, [sp, #4]
     366:	454a      	cmp	r2, r9
     368:	d80b      	bhi.n	382 <adc_init+0x1f6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     36a:	0091      	lsls	r1, r2, #2
     36c:	58c8      	ldr	r0, [r1, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     36e:	a903      	add	r1, sp, #12
     370:	2300      	movs	r3, #0
     372:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     374:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     376:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     378:	465b      	mov	r3, fp
     37a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     37c:	b2c0      	uxtb	r0, r0
     37e:	4b64      	ldr	r3, [pc, #400]	; (510 <adc_init+0x384>)
     380:	4798      	blx	r3
	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     382:	4646      	mov	r6, r8
     384:	3601      	adds	r6, #1
     386:	b2f3      	uxtb	r3, r6
     388:	4698      	mov	r8, r3
     38a:	9301      	str	r3, [sp, #4]
     38c:	454b      	cmp	r3, r9
     38e:	d9c1      	bls.n	314 <adc_init+0x188>
			_adc_configure_ain_pin(index, i);
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     390:	7b7b      	ldrb	r3, [r7, #13]
     392:	019a      	lsls	r2, r3, #6
     394:	7bbb      	ldrb	r3, [r7, #14]
     396:	01db      	lsls	r3, r3, #7
     398:	4313      	orrs	r3, r2
     39a:	b2db      	uxtb	r3, r3
     39c:	4652      	mov	r2, sl
     39e:	7013      	strb	r3, [r2, #0]
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;

	/* Configure reference */
	adc_module->REFCTRL.reg =
     3a0:	7d3b      	ldrb	r3, [r7, #20]
     3a2:	01db      	lsls	r3, r3, #7
     3a4:	787a      	ldrb	r2, [r7, #1]
     3a6:	4313      	orrs	r3, r2
     3a8:	b2db      	uxtb	r3, r3
     3aa:	4652      	mov	r2, sl
     3ac:	7093      	strb	r3, [r2, #2]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
			| (config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     3ae:	78fb      	ldrb	r3, [r7, #3]
     3b0:	2b34      	cmp	r3, #52	; 0x34
     3b2:	d900      	bls.n	3b6 <adc_init+0x22a>
     3b4:	e14c      	b.n	650 <adc_init+0x4c4>
     3b6:	009b      	lsls	r3, r3, #2
     3b8:	4a56      	ldr	r2, [pc, #344]	; (514 <adc_init+0x388>)
     3ba:	58d3      	ldr	r3, [r2, r3]
     3bc:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3be:	2004      	movs	r0, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     3c0:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     3c2:	2202      	movs	r2, #2
     3c4:	e01a      	b.n	3fc <adc_init+0x270>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     3c6:	7a7a      	ldrb	r2, [r7, #9]
		accumulate = config->accumulate_samples;
     3c8:	7a38      	ldrb	r0, [r7, #8]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     3ca:	2110      	movs	r1, #16
     3cc:	e016      	b.n	3fc <adc_init+0x270>
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3ce:	2006      	movs	r0, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2110      	movs	r1, #16
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     3d2:	2201      	movs	r2, #1
     3d4:	e012      	b.n	3fc <adc_init+0x270>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3d6:	2008      	movs	r0, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     3d8:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3da:	2200      	movs	r2, #0
     3dc:	e00e      	b.n	3fc <adc_init+0x270>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3de:	2000      	movs	r0, #0
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     3e0:	2130      	movs	r1, #48	; 0x30
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     3e2:	2200      	movs	r2, #0
     3e4:	e00a      	b.n	3fc <adc_init+0x270>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e6:	2000      	movs	r0, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     3e8:	2120      	movs	r1, #32
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     3ea:	2200      	movs	r2, #0
     3ec:	e006      	b.n	3fc <adc_init+0x270>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ee:	2000      	movs	r0, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     3f0:	2100      	movs	r1, #0
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     3f2:	2200      	movs	r2, #0
     3f4:	e002      	b.n	3fc <adc_init+0x270>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3f6:	2002      	movs	r0, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     3f8:	2110      	movs	r1, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     3fa:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3fc:	0112      	lsls	r2, r2, #4
     3fe:	2370      	movs	r3, #112	; 0x70
     400:	4013      	ands	r3, r2
     402:	4303      	orrs	r3, r0
     404:	4652      	mov	r2, sl
     406:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     408:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     40a:	8c13      	ldrh	r3, [r2, #32]
     40c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     40e:	2b00      	cmp	r3, #0
     410:	d1fb      	bne.n	40a <adc_init+0x27e>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     412:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     414:	2017      	movs	r0, #23
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     416:	2b3f      	cmp	r3, #63	; 0x3f
     418:	d900      	bls.n	41c <adc_init+0x290>
     41a:	e121      	b.n	660 <adc_init+0x4d4>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     41c:	7bfa      	ldrb	r2, [r7, #15]
     41e:	01d2      	lsls	r2, r2, #7
     420:	4313      	orrs	r3, r2
     422:	b2db      	uxtb	r3, r3
     424:	4652      	mov	r2, sl
     426:	7353      	strb	r3, [r2, #13]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     428:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     42a:	8c13      	ldrh	r3, [r2, #32]
     42c:	b29b      	uxth	r3, r3
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     42e:	2b00      	cmp	r3, #0
     430:	d1fb      	bne.n	42a <adc_init+0x29e>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     432:	78bb      	ldrb	r3, [r7, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     434:	4652      	mov	r2, sl
     436:	7053      	strb	r3, [r2, #1]
			config->clock_prescaler;
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     438:	2324      	movs	r3, #36	; 0x24
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
	adc_module->CTRLC.reg =
     43a:	5cfa      	ldrb	r2, [r7, r3]
     43c:	00d2      	lsls	r2, r2, #3
     43e:	7b3b      	ldrb	r3, [r7, #12]
     440:	009b      	lsls	r3, r3, #2
     442:	4313      	orrs	r3, r2
     444:	7afa      	ldrb	r2, [r7, #11]
     446:	431a      	orrs	r2, r3
     448:	7abb      	ldrb	r3, [r7, #10]
     44a:	005b      	lsls	r3, r3, #1
     44c:	4313      	orrs	r3, r2
     44e:	430b      	orrs	r3, r1
     450:	4652      	mov	r2, sl
     452:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     454:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     456:	8c13      	ldrh	r3, [r2, #32]
     458:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);

	while (adc_is_syncing(module_inst)) {
     45a:	2b00      	cmp	r3, #0
     45c:	d1fb      	bne.n	456 <adc_init+0x2ca>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     45e:	8b3b      	ldrh	r3, [r7, #24]
     460:	2b00      	cmp	r3, #0
     462:	d100      	bne.n	466 <adc_init+0x2da>
     464:	e092      	b.n	58c <adc_init+0x400>
		switch (resolution) {
     466:	2910      	cmp	r1, #16
     468:	d076      	beq.n	558 <adc_init+0x3cc>
     46a:	d802      	bhi.n	472 <adc_init+0x2e6>
     46c:	2900      	cmp	r1, #0
     46e:	d055      	beq.n	51c <adc_init+0x390>
     470:	e08c      	b.n	58c <adc_init+0x400>
     472:	2920      	cmp	r1, #32
     474:	d01a      	beq.n	4ac <adc_init+0x320>
     476:	2930      	cmp	r1, #48	; 0x30
     478:	d000      	beq.n	47c <adc_init+0x2f0>
     47a:	e087      	b.n	58c <adc_init+0x400>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     47c:	7afa      	ldrb	r2, [r7, #11]
     47e:	2a00      	cmp	r2, #0
     480:	d00a      	beq.n	498 <adc_init+0x30c>
     482:	69fa      	ldr	r2, [r7, #28]
     484:	3280      	adds	r2, #128	; 0x80
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     486:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     488:	2aff      	cmp	r2, #255	; 0xff
     48a:	d900      	bls.n	48e <adc_init+0x302>
     48c:	e0e8      	b.n	660 <adc_init+0x4d4>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     48e:	6a3a      	ldr	r2, [r7, #32]
     490:	3280      	adds	r2, #128	; 0x80
     492:	2aff      	cmp	r2, #255	; 0xff
     494:	d900      	bls.n	498 <adc_init+0x30c>
     496:	e0e3      	b.n	660 <adc_init+0x4d4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     498:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     49a:	69fa      	ldr	r2, [r7, #28]
     49c:	2aff      	cmp	r2, #255	; 0xff
     49e:	dd00      	ble.n	4a2 <adc_init+0x316>
     4a0:	e0de      	b.n	660 <adc_init+0x4d4>
     4a2:	6a3a      	ldr	r2, [r7, #32]
     4a4:	2aff      	cmp	r2, #255	; 0xff
     4a6:	dd00      	ble.n	4aa <adc_init+0x31e>
     4a8:	e0da      	b.n	660 <adc_init+0x4d4>
     4aa:	e06f      	b.n	58c <adc_init+0x400>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     4ac:	7afa      	ldrb	r2, [r7, #11]
     4ae:	2a00      	cmp	r2, #0
     4b0:	d00f      	beq.n	4d2 <adc_init+0x346>
     4b2:	69fa      	ldr	r2, [r7, #28]
     4b4:	2180      	movs	r1, #128	; 0x80
     4b6:	0089      	lsls	r1, r1, #2
     4b8:	468c      	mov	ip, r1
     4ba:	4462      	add	r2, ip
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     4bc:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     4be:	4916      	ldr	r1, [pc, #88]	; (518 <adc_init+0x38c>)
     4c0:	428a      	cmp	r2, r1
     4c2:	d900      	bls.n	4c6 <adc_init+0x33a>
     4c4:	e0cc      	b.n	660 <adc_init+0x4d4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     4c6:	6a3a      	ldr	r2, [r7, #32]
     4c8:	4462      	add	r2, ip
     4ca:	4913      	ldr	r1, [pc, #76]	; (518 <adc_init+0x38c>)
     4cc:	428a      	cmp	r2, r1
     4ce:	d900      	bls.n	4d2 <adc_init+0x346>
     4d0:	e0c6      	b.n	660 <adc_init+0x4d4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     4d2:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     4d4:	4a10      	ldr	r2, [pc, #64]	; (518 <adc_init+0x38c>)
     4d6:	69f9      	ldr	r1, [r7, #28]
     4d8:	4291      	cmp	r1, r2
     4da:	dd00      	ble.n	4de <adc_init+0x352>
     4dc:	e0c0      	b.n	660 <adc_init+0x4d4>
     4de:	6a39      	ldr	r1, [r7, #32]
     4e0:	4291      	cmp	r1, r2
     4e2:	dd00      	ble.n	4e6 <adc_init+0x35a>
     4e4:	e0bc      	b.n	660 <adc_init+0x4d4>
     4e6:	e051      	b.n	58c <adc_init+0x400>
     4e8:	0000011d 	.word	0x0000011d
     4ec:	40000800 	.word	0x40000800
     4f0:	00004e9c 	.word	0x00004e9c
     4f4:	40001800 	.word	0x40001800
     4f8:	20000614 	.word	0x20000614
     4fc:	00004ea8 	.word	0x00004ea8
     500:	00002551 	.word	0x00002551
     504:	000024e1 	.word	0x000024e1
     508:	00004e30 	.word	0x00004e30
     50c:	00004eac 	.word	0x00004eac
     510:	0000264d 	.word	0x0000264d
     514:	00004d5c 	.word	0x00004d5c
     518:	000003ff 	.word	0x000003ff
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     51c:	7afa      	ldrb	r2, [r7, #11]
     51e:	2a00      	cmp	r2, #0
     520:	d00f      	beq.n	542 <adc_init+0x3b6>
     522:	69fa      	ldr	r2, [r7, #28]
     524:	2180      	movs	r1, #128	; 0x80
     526:	0109      	lsls	r1, r1, #4
     528:	468c      	mov	ip, r1
     52a:	4462      	add	r2, ip
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     52c:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     52e:	4950      	ldr	r1, [pc, #320]	; (670 <adc_init+0x4e4>)
     530:	428a      	cmp	r2, r1
     532:	d900      	bls.n	536 <adc_init+0x3aa>
     534:	e094      	b.n	660 <adc_init+0x4d4>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     536:	6a3a      	ldr	r2, [r7, #32]
     538:	4462      	add	r2, ip
     53a:	494d      	ldr	r1, [pc, #308]	; (670 <adc_init+0x4e4>)
     53c:	428a      	cmp	r2, r1
     53e:	d900      	bls.n	542 <adc_init+0x3b6>
     540:	e08e      	b.n	660 <adc_init+0x4d4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     542:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     544:	4a4a      	ldr	r2, [pc, #296]	; (670 <adc_init+0x4e4>)
     546:	69f9      	ldr	r1, [r7, #28]
     548:	4291      	cmp	r1, r2
     54a:	dd00      	ble.n	54e <adc_init+0x3c2>
     54c:	e088      	b.n	660 <adc_init+0x4d4>
     54e:	6a39      	ldr	r1, [r7, #32]
     550:	4291      	cmp	r1, r2
     552:	dd00      	ble.n	556 <adc_init+0x3ca>
     554:	e084      	b.n	660 <adc_init+0x4d4>
     556:	e019      	b.n	58c <adc_init+0x400>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     558:	7afa      	ldrb	r2, [r7, #11]
     55a:	2a00      	cmp	r2, #0
     55c:	d00e      	beq.n	57c <adc_init+0x3f0>
     55e:	69fa      	ldr	r2, [r7, #28]
     560:	2180      	movs	r1, #128	; 0x80
     562:	0209      	lsls	r1, r1, #8
     564:	468c      	mov	ip, r1
     566:	4462      	add	r2, ip
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     568:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     56a:	4942      	ldr	r1, [pc, #264]	; (674 <adc_init+0x4e8>)
     56c:	428a      	cmp	r2, r1
     56e:	d900      	bls.n	572 <adc_init+0x3e6>
     570:	e076      	b.n	660 <adc_init+0x4d4>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     572:	6a3a      	ldr	r2, [r7, #32]
     574:	4462      	add	r2, ip
     576:	493f      	ldr	r1, [pc, #252]	; (674 <adc_init+0x4e8>)
     578:	428a      	cmp	r2, r1
     57a:	d871      	bhi.n	660 <adc_init+0x4d4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     57c:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     57e:	4a3d      	ldr	r2, [pc, #244]	; (674 <adc_init+0x4e8>)
     580:	69f9      	ldr	r1, [r7, #28]
     582:	4291      	cmp	r1, r2
     584:	dc6c      	bgt.n	660 <adc_init+0x4d4>
     586:	6a39      	ldr	r1, [r7, #32]
     588:	4291      	cmp	r1, r2
     58a:	dc69      	bgt.n	660 <adc_init+0x4d4>
			break;
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     58c:	4652      	mov	r2, sl
     58e:	8952      	ldrh	r2, [r2, #10]
     590:	4313      	orrs	r3, r2
     592:	4652      	mov	r2, sl
     594:	8153      	strh	r3, [r2, #10]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     596:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     598:	8c13      	ldrh	r3, [r2, #32]
     59a:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     59c:	2b00      	cmp	r3, #0
     59e:	d1fb      	bne.n	598 <adc_init+0x40c>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     5a0:	8bbb      	ldrh	r3, [r7, #28]
     5a2:	4652      	mov	r2, sl
     5a4:	81d3      	strh	r3, [r2, #14]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5a6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     5a8:	8c13      	ldrh	r3, [r2, #32]
     5aa:	b29b      	uxth	r3, r3
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     5ac:	2b00      	cmp	r3, #0
     5ae:	d1fb      	bne.n	5a8 <adc_init+0x41c>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     5b0:	8c3b      	ldrh	r3, [r7, #32]
     5b2:	4652      	mov	r2, sl
     5b4:	8213      	strh	r3, [r2, #16]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5b6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     5b8:	8c13      	ldrh	r3, [r2, #32]
     5ba:	b29b      	uxth	r3, r3
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     5bc:	2b00      	cmp	r3, #0
     5be:	d1fb      	bne.n	5b8 <adc_init+0x42c>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     5c0:	793a      	ldrb	r2, [r7, #4]
     5c2:	88fb      	ldrh	r3, [r7, #6]
     5c4:	4313      	orrs	r3, r2
     5c6:	4652      	mov	r2, sl
     5c8:	8113      	strh	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5ca:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     5cc:	8c13      	ldrh	r3, [r2, #32]
     5ce:	b29b      	uxth	r3, r3
			config->negative_input |
			config->positive_input;

	while (adc_is_syncing(module_inst)) {
     5d0:	2b00      	cmp	r3, #0
     5d2:	d1fb      	bne.n	5cc <adc_init+0x440>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     5d4:	332a      	adds	r3, #42	; 0x2a
     5d6:	5cfb      	ldrb	r3, [r7, r3]
     5d8:	4652      	mov	r2, sl
     5da:	70d3      	strb	r3, [r2, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     5dc:	2307      	movs	r3, #7
     5de:	7113      	strb	r3, [r2, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     5e0:	331d      	adds	r3, #29
     5e2:	5cfb      	ldrb	r3, [r7, r3]
     5e4:	2b00      	cmp	r3, #0
     5e6:	d01b      	beq.n	620 <adc_init+0x494>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     5e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     5ea:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     5ec:	4a20      	ldr	r2, [pc, #128]	; (670 <adc_init+0x4e4>)
     5ee:	4293      	cmp	r3, r2
     5f0:	d836      	bhi.n	660 <adc_init+0x4d4>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     5f2:	4652      	mov	r2, sl
     5f4:	8253      	strh	r3, [r2, #18]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5f6:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     5f8:	8c13      	ldrh	r3, [r2, #32]
     5fa:	b29b      	uxth	r3, r3
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     5fc:	2b00      	cmp	r3, #0
     5fe:	d1fb      	bne.n	5f8 <adc_init+0x46c>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     600:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     602:	2380      	movs	r3, #128	; 0x80
     604:	011b      	lsls	r3, r3, #4
     606:	18d3      	adds	r3, r2, r3
     608:	b29b      	uxth	r3, r3
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     60a:	2017      	movs	r0, #23
		while (adc_is_syncing(module_inst)) {
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     60c:	4918      	ldr	r1, [pc, #96]	; (670 <adc_init+0x4e4>)
     60e:	428b      	cmp	r3, r1
     610:	d826      	bhi.n	660 <adc_init+0x4d4>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     612:	4653      	mov	r3, sl
     614:	829a      	strh	r2, [r3, #20]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     616:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     618:	8c13      	ldrh	r3, [r2, #32]
     61a:	b29b      	uxth	r3, r3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     61c:	2b00      	cmp	r3, #0
     61e:	d1fb      	bne.n	618 <adc_init+0x48c>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     620:	00a2      	lsls	r2, r4, #2
     622:	4b15      	ldr	r3, [pc, #84]	; (678 <adc_init+0x4ec>)
     624:	58d3      	ldr	r3, [r2, r3]
     626:	4915      	ldr	r1, [pc, #84]	; (67c <adc_init+0x4f0>)
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     628:	5d09      	ldrb	r1, [r1, r4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	40cb      	lsrs	r3, r1
     62e:	021b      	lsls	r3, r3, #8
     630:	21e0      	movs	r1, #224	; 0xe0
     632:	00c9      	lsls	r1, r1, #3
     634:	4019      	ands	r1, r3
			ADC_CALIB_BIASREFBUF(
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     636:	4b12      	ldr	r3, [pc, #72]	; (680 <adc_init+0x4f4>)
     638:	58d3      	ldr	r3, [r2, r3]
     63a:	4a12      	ldr	r2, [pc, #72]	; (684 <adc_init+0x4f8>)
			/* Wait for synchronization */
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     63c:	5d12      	ldrb	r2, [r2, r4]
     63e:	681b      	ldr	r3, [r3, #0]
     640:	40d3      	lsrs	r3, r2
     642:	2207      	movs	r2, #7
     644:	4013      	ands	r3, r2
     646:	430b      	orrs	r3, r1
     648:	4652      	mov	r2, sl
     64a:	8593      	strh	r3, [r2, #44]	; 0x2c
			) |
			ADC_CALIB_BIASCOMP(
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     64c:	2000      	movs	r0, #0
     64e:	e007      	b.n	660 <adc_init+0x4d4>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     650:	2017      	movs	r0, #23
     652:	e005      	b.n	660 <adc_init+0x4d4>
     654:	2300      	movs	r3, #0
     656:	9301      	str	r3, [sp, #4]
     658:	4698      	mov	r8, r3
	_adc_configure_ain_pin(index, config->positive_input);
	_adc_configure_ain_pin(index, config->negative_input);

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     65a:	3301      	adds	r3, #1
     65c:	469b      	mov	fp, r3
     65e:	e659      	b.n	314 <adc_init+0x188>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     660:	b01d      	add	sp, #116	; 0x74
     662:	bc3c      	pop	{r2, r3, r4, r5}
     664:	4690      	mov	r8, r2
     666:	4699      	mov	r9, r3
     668:	46a2      	mov	sl, r4
     66a:	46ab      	mov	fp, r5
     66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	00000fff 	.word	0x00000fff
     674:	0000ffff 	.word	0x0000ffff
     678:	00004ebc 	.word	0x00004ebc
     67c:	00004e98 	.word	0x00004e98
     680:	00004eb4 	.word	0x00004eb4
     684:	00004ea4 	.word	0x00004ea4

00000688 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     688:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     68a:	0080      	lsls	r0, r0, #2
     68c:	4b2c      	ldr	r3, [pc, #176]	; (740 <_adc_interrupt_handler+0xb8>)
     68e:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     690:	6823      	ldr	r3, [r4, #0]
     692:	799d      	ldrb	r5, [r3, #6]
     694:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     696:	07ea      	lsls	r2, r5, #31
     698:	d535      	bpl.n	706 <_adc_interrupt_handler+0x7e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     69a:	7ee2      	ldrb	r2, [r4, #27]
     69c:	07d2      	lsls	r2, r2, #31
     69e:	d532      	bpl.n	706 <_adc_interrupt_handler+0x7e>
     6a0:	7ea2      	ldrb	r2, [r4, #26]
     6a2:	07d2      	lsls	r2, r2, #31
     6a4:	d52f      	bpl.n	706 <_adc_interrupt_handler+0x7e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6a6:	2201      	movs	r2, #1
     6a8:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     6aa:	6962      	ldr	r2, [r4, #20]
     6ac:	1c93      	adds	r3, r2, #2
     6ae:	6163      	str	r3, [r4, #20]
     6b0:	6823      	ldr	r3, [r4, #0]
     6b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6b4:	b29b      	uxth	r3, r3
     6b6:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     6b8:	8b23      	ldrh	r3, [r4, #24]
     6ba:	3b01      	subs	r3, #1
     6bc:	b29b      	uxth	r3, r3
     6be:	8323      	strh	r3, [r4, #24]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d015      	beq.n	6f0 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     6c4:	7f63      	ldrb	r3, [r4, #29]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d01d      	beq.n	706 <_adc_interrupt_handler+0x7e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6ca:	6822      	ldr	r2, [r4, #0]
     6cc:	79d3      	ldrb	r3, [r2, #7]
     6ce:	b25b      	sxtb	r3, r3
     6d0:	2b00      	cmp	r3, #0
     6d2:	db18      	blt.n	706 <_adc_interrupt_handler+0x7e>
     6d4:	8c13      	ldrh	r3, [r2, #32]
     6d6:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6d8:	2b00      	cmp	r3, #0
     6da:	d1fb      	bne.n	6d4 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6dc:	7e11      	ldrb	r1, [r2, #24]
     6de:	3302      	adds	r3, #2
     6e0:	430b      	orrs	r3, r1
     6e2:	7613      	strb	r3, [r2, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     6e4:	6822      	ldr	r2, [r4, #0]

	if (adc_module->SYNCBUSY.reg) {
     6e6:	8c13      	ldrh	r3, [r2, #32]
     6e8:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     6ea:	2b00      	cmp	r3, #0
     6ec:	d1fb      	bne.n	6e6 <_adc_interrupt_handler+0x5e>
     6ee:	e00a      	b.n	706 <_adc_interrupt_handler+0x7e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     6f0:	7f23      	ldrb	r3, [r4, #28]
     6f2:	2b05      	cmp	r3, #5
     6f4:	d107      	bne.n	706 <_adc_interrupt_handler+0x7e>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     6f6:	2300      	movs	r3, #0
     6f8:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     6fa:	3301      	adds	r3, #1
     6fc:	6822      	ldr	r2, [r4, #0]
     6fe:	7113      	strb	r3, [r2, #4]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     700:	0020      	movs	r0, r4
     702:	68a3      	ldr	r3, [r4, #8]
     704:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     706:	076b      	lsls	r3, r5, #29
     708:	d50b      	bpl.n	722 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     70a:	2304      	movs	r3, #4
     70c:	6822      	ldr	r2, [r4, #0]
     70e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     710:	7ee3      	ldrb	r3, [r4, #27]
     712:	079b      	lsls	r3, r3, #30
     714:	d505      	bpl.n	722 <_adc_interrupt_handler+0x9a>
     716:	7ea3      	ldrb	r3, [r4, #26]
     718:	079b      	lsls	r3, r3, #30
     71a:	d502      	bpl.n	722 <_adc_interrupt_handler+0x9a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     71c:	0020      	movs	r0, r4
     71e:	68e3      	ldr	r3, [r4, #12]
     720:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     722:	07ab      	lsls	r3, r5, #30
     724:	d50b      	bpl.n	73e <_adc_interrupt_handler+0xb6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     726:	2302      	movs	r3, #2
     728:	6822      	ldr	r2, [r4, #0]
     72a:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     72c:	7ee3      	ldrb	r3, [r4, #27]
     72e:	075b      	lsls	r3, r3, #29
     730:	d505      	bpl.n	73e <_adc_interrupt_handler+0xb6>
     732:	7ea3      	ldrb	r3, [r4, #26]
     734:	075b      	lsls	r3, r3, #29
     736:	d502      	bpl.n	73e <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     738:	6923      	ldr	r3, [r4, #16]
     73a:	0020      	movs	r0, r4
     73c:	4798      	blx	r3
		}
	}
}
     73e:	bd70      	pop	{r4, r5, r6, pc}
     740:	20000614 	.word	0x20000614

00000744 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <ADC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	00000689 	.word	0x00000689

00000754 <ADC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <ADC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000689 	.word	0x00000689

00000764 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     764:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     766:	2104      	movs	r1, #4
     768:	4b07      	ldr	r3, [pc, #28]	; (788 <rtc_calendar_enable+0x24>)
     76a:	6019      	str	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     76c:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     76e:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     770:	2b00      	cmp	r3, #0
     772:	d1fc      	bne.n	76e <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     774:	8811      	ldrh	r1, [r2, #0]
     776:	3302      	adds	r3, #2
     778:	430b      	orrs	r3, r1
     77a:	8013      	strh	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     77c:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     77e:	6913      	ldr	r3, [r2, #16]
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     780:	2b00      	cmp	r3, #0
     782:	d1fc      	bne.n	77e <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     784:	4770      	bx	lr
     786:	46c0      	nop			; (mov r8, r8)
     788:	e000e100 	.word	0xe000e100

0000078c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     78c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     78e:	6803      	ldr	r3, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     790:	2404      	movs	r4, #4
     792:	2280      	movs	r2, #128	; 0x80
     794:	4908      	ldr	r1, [pc, #32]	; (7b8 <rtc_calendar_disable+0x2c>)
     796:	508c      	str	r4, [r1, r2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     798:	6801      	ldr	r1, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     79a:	690a      	ldr	r2, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     79c:	2a00      	cmp	r2, #0
     79e:	d1fc      	bne.n	79a <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     7a0:	4a06      	ldr	r2, [pc, #24]	; (7bc <rtc_calendar_disable+0x30>)
     7a2:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     7a4:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     7a6:	881a      	ldrh	r2, [r3, #0]
     7a8:	2102      	movs	r1, #2
     7aa:	438a      	bics	r2, r1
     7ac:	801a      	strh	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7ae:	6802      	ldr	r2, [r0, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7b0:	6913      	ldr	r3, [r2, #16]
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;

	while (rtc_calendar_is_syncing(module)) {
     7b2:	2b00      	cmp	r3, #0
     7b4:	d1fc      	bne.n	7b0 <rtc_calendar_disable+0x24>
		/* Wait for synchronization */
	}
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	e000e100 	.word	0xe000e100
     7bc:	ffff81ff 	.word	0xffff81ff

000007c0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7c4:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     7c6:	4b09      	ldr	r3, [pc, #36]	; (7ec <rtc_calendar_reset+0x2c>)
     7c8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     7ca:	2300      	movs	r3, #0
     7cc:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     7ce:	8663      	strh	r3, [r4, #50]	; 0x32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7d0:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7d2:	6913      	ldr	r3, [r2, #16]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     7d4:	2b00      	cmp	r3, #0
     7d6:	d1fc      	bne.n	7d2 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     7d8:	882a      	ldrh	r2, [r5, #0]
     7da:	3301      	adds	r3, #1
     7dc:	4313      	orrs	r3, r2
     7de:	802b      	strh	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7e0:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7e2:	6913      	ldr	r3, [r2, #16]
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;

	while (rtc_calendar_is_syncing(module)) {
     7e4:	2b00      	cmp	r3, #0
     7e6:	d1fc      	bne.n	7e2 <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     7e8:	bd70      	pop	{r4, r5, r6, pc}
     7ea:	46c0      	nop			; (mov r8, r8)
     7ec:	0000078d 	.word	0x0000078d

000007f0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     7f0:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     7f2:	88cb      	ldrh	r3, [r1, #6]
     7f4:	88c2      	ldrh	r2, [r0, #6]
     7f6:	1a9b      	subs	r3, r3, r2
     7f8:	069a      	lsls	r2, r3, #26

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     7fa:	794b      	ldrb	r3, [r1, #5]
     7fc:	059c      	lsls	r4, r3, #22
     7fe:	790b      	ldrb	r3, [r1, #4]
     800:	045b      	lsls	r3, r3, #17
     802:	4323      	orrs	r3, r4
     804:	788c      	ldrb	r4, [r1, #2]
     806:	0324      	lsls	r4, r4, #12
     808:	4323      	orrs	r3, r4
     80a:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     80c:	7902      	ldrb	r2, [r0, #4]
     80e:	2a00      	cmp	r2, #0
     810:	d105      	bne.n	81e <rtc_calendar_time_to_register_value+0x2e>
     812:	78ca      	ldrb	r2, [r1, #3]
     814:	2a00      	cmp	r2, #0
     816:	d002      	beq.n	81e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     818:	2280      	movs	r2, #128	; 0x80
     81a:	0252      	lsls	r2, r2, #9
     81c:	4313      	orrs	r3, r2
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);

	return register_value;
     81e:	7848      	ldrb	r0, [r1, #1]
     820:	0180      	lsls	r0, r0, #6
     822:	780a      	ldrb	r2, [r1, #0]
     824:	4310      	orrs	r0, r2
     826:	4318      	orrs	r0, r3
}
     828:	bd10      	pop	{r4, pc}
     82a:	46c0      	nop			; (mov r8, r8)

0000082c <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     82c:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     82e:	0e8c      	lsrs	r4, r1, #26
     830:	88c3      	ldrh	r3, [r0, #6]
     832:	18e3      	adds	r3, r4, r3
     834:	80d3      	strh	r3, [r2, #6]
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     836:	018b      	lsls	r3, r1, #6
     838:	0f1b      	lsrs	r3, r3, #28
     83a:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     83c:	028b      	lsls	r3, r1, #10
     83e:	0edb      	lsrs	r3, r3, #27
     840:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     842:	7903      	ldrb	r3, [r0, #4]
     844:	2b00      	cmp	r3, #0
     846:	d003      	beq.n	850 <rtc_calendar_register_value_to_time+0x24>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     848:	03cb      	lsls	r3, r1, #15
     84a:	0edb      	lsrs	r3, r3, #27
     84c:	7093      	strb	r3, [r2, #2]
     84e:	e005      	b.n	85c <rtc_calendar_register_value_to_time+0x30>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
     850:	040b      	lsls	r3, r1, #16
     852:	0f1b      	lsrs	r3, r3, #28
     854:	7093      	strb	r3, [r2, #2]
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & (0x10u << RTC_MODE2_CLOCK_HOUR_Pos)) != 0);
     856:	03cb      	lsls	r3, r1, #15
     858:	0fdb      	lsrs	r3, r3, #31
     85a:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     85c:	098b      	lsrs	r3, r1, #6
     85e:	203f      	movs	r0, #63	; 0x3f
     860:	4003      	ands	r3, r0
     862:	7053      	strb	r3, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     864:	4001      	ands	r1, r0
     866:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     868:	bd10      	pop	{r4, pc}
     86a:	46c0      	nop			; (mov r8, r8)

0000086c <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     870:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <rtc_calendar_set_time+0x1c>)
     874:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     876:	692b      	ldr	r3, [r5, #16]

	Rtc *const rtc_module = module->hw;

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);

	while (rtc_calendar_is_syncing(module)) {
     878:	2b00      	cmp	r3, #0
     87a:	d1fc      	bne.n	876 <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     87c:	61a8      	str	r0, [r5, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     87e:	6822      	ldr	r2, [r4, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     880:	6913      	ldr	r3, [r2, #16]
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     882:	2b00      	cmp	r3, #0
     884:	d1fc      	bne.n	880 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
     886:	bd70      	pop	{r4, r5, r6, pc}
     888:	000007f1 	.word	0x000007f1

0000088c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     88c:	b510      	push	{r4, lr}
     88e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     890:	6804      	ldr	r4, [r0, #0]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     892:	6923      	ldr	r3, [r4, #16]
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	while (rtc_calendar_is_syncing(module)) {
     894:	2b00      	cmp	r3, #0
     896:	d1fc      	bne.n	892 <rtc_calendar_get_time+0x6>
		/* Wait for synchronization */
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     898:	69a1      	ldr	r1, [r4, #24]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     89a:	4b01      	ldr	r3, [pc, #4]	; (8a0 <rtc_calendar_get_time+0x14>)
     89c:	4798      	blx	r3
}
     89e:	bd10      	pop	{r4, pc}
     8a0:	0000082d 	.word	0x0000082d

000008a4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8a6:	0005      	movs	r5, r0
     8a8:	000e      	movs	r6, r1
     8aa:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     8ac:	2017      	movs	r0, #23
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     8ae:	2a01      	cmp	r2, #1
     8b0:	d815      	bhi.n	8de <rtc_calendar_set_alarm+0x3a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8b2:	682f      	ldr	r7, [r5, #0]
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     8b4:	0028      	movs	r0, r5
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <rtc_calendar_set_alarm+0x3c>)
     8b8:	4798      	blx	r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8ba:	693b      	ldr	r3, [r7, #16]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));

	while (rtc_calendar_is_syncing(module)) {
     8bc:	2b00      	cmp	r3, #0
     8be:	d1fc      	bne.n	8ba <rtc_calendar_set_alarm+0x16>
     8c0:	00e4      	lsls	r4, r4, #3
     8c2:	193c      	adds	r4, r7, r4
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     8c4:	6220      	str	r0, [r4, #32]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8c6:	682a      	ldr	r2, [r5, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8c8:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;

	while (rtc_calendar_is_syncing(module)) {
     8ca:	2b00      	cmp	r3, #0
     8cc:	d1fc      	bne.n	8c8 <rtc_calendar_set_alarm+0x24>
			/* Wait for synchronization */
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     8ce:	7a32      	ldrb	r2, [r6, #8]
     8d0:	3324      	adds	r3, #36	; 0x24
     8d2:	54e2      	strb	r2, [r4, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8d4:	682a      	ldr	r2, [r5, #0]

	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8d6:	6913      	ldr	r3, [r2, #16]
	}

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	while (rtc_calendar_is_syncing(module)) {
     8d8:	2b00      	cmp	r3, #0
     8da:	d1fc      	bne.n	8d6 <rtc_calendar_set_alarm+0x32>
			/* Wait for synchronization */
	}

	return STATUS_OK;
     8dc:	2000      	movs	r0, #0
}
     8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8e0:	000007f1 	.word	0x000007f1

000008e4 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
     8e4:	b570      	push	{r4, r5, r6, lr}
     8e6:	0005      	movs	r5, r0
     8e8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     8ea:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     8ec:	4a16      	ldr	r2, [pc, #88]	; (948 <rtc_calendar_init+0x64>)
     8ee:	6953      	ldr	r3, [r2, #20]
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0089      	lsls	r1, r1, #2
     8f4:	430b      	orrs	r3, r1
     8f6:	6153      	str	r3, [r2, #20]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     8f8:	2200      	movs	r2, #0
     8fa:	4b14      	ldr	r3, [pc, #80]	; (94c <rtc_calendar_init+0x68>)
     8fc:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
     8fe:	4b14      	ldr	r3, [pc, #80]	; (950 <rtc_calendar_init+0x6c>)
     900:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
     902:	78e3      	ldrb	r3, [r4, #3]
     904:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     906:	88a3      	ldrh	r3, [r4, #4]
     908:	80eb      	strh	r3, [r5, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     90a:	4b12      	ldr	r3, [pc, #72]	; (954 <rtc_calendar_init+0x70>)
     90c:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     90e:	682a      	ldr	r2, [r5, #0]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     910:	8823      	ldrh	r3, [r4, #0]

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if(config->enable_read_sync) {
     912:	79a1      	ldrb	r1, [r4, #6]
     914:	2900      	cmp	r1, #0
     916:	d102      	bne.n	91e <rtc_calendar_init+0x3a>

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     918:	3108      	adds	r1, #8
     91a:	430b      	orrs	r3, r1
     91c:	e001      	b.n	922 <rtc_calendar_init+0x3e>

#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	if(config->enable_read_sync) {
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
     91e:	490e      	ldr	r1, [pc, #56]	; (958 <rtc_calendar_init+0x74>)
     920:	430b      	orrs	r3, r1
	}
#endif

	/* Check clock mode. */
	if (!(config->clock_24h)) {
     922:	78e1      	ldrb	r1, [r4, #3]
     924:	2900      	cmp	r1, #0
     926:	d101      	bne.n	92c <rtc_calendar_init+0x48>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     928:	3140      	adds	r1, #64	; 0x40
     92a:	430b      	orrs	r3, r1
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
     92c:	78a1      	ldrb	r1, [r4, #2]
     92e:	2900      	cmp	r1, #0
     930:	d001      	beq.n	936 <rtc_calendar_init+0x52>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     932:	2180      	movs	r1, #128	; 0x80
     934:	430b      	orrs	r3, r1
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     936:	8013      	strh	r3, [r2, #0]

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     938:	0021      	movs	r1, r4
     93a:	3108      	adds	r1, #8
     93c:	2200      	movs	r2, #0
     93e:	0028      	movs	r0, r5
     940:	4b06      	ldr	r3, [pc, #24]	; (95c <rtc_calendar_init+0x78>)
     942:	4798      	blx	r3
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
}
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	40000800 	.word	0x40000800
     94c:	40001400 	.word	0x40001400
     950:	000007c1 	.word	0x000007c1
     954:	2000061c 	.word	0x2000061c
     958:	00008008 	.word	0x00008008
     95c:	000008a5 	.word	0x000008a5

00000960 <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     960:	2a09      	cmp	r2, #9
     962:	d901      	bls.n	968 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     964:	2017      	movs	r0, #23
     966:	e009      	b.n	97c <rtc_calendar_register_callback+0x1c>
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     968:	1c93      	adds	r3, r2, #2
     96a:	009b      	lsls	r3, r3, #2
     96c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     96e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
     970:	2301      	movs	r3, #1
     972:	4093      	lsls	r3, r2
     974:	430b      	orrs	r3, r1
     976:	b29b      	uxth	r3, r3
     978:	8603      	strh	r3, [r0, #48]	; 0x30
     97a:	2000      	movs	r0, #0
	}

	return status;
}
     97c:	4770      	bx	lr
     97e:	46c0      	nop			; (mov r8, r8)

00000980 <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     980:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     982:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     984:	2909      	cmp	r1, #9
     986:	d102      	bne.n	98e <rtc_calendar_enable_callback+0xe>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     988:	4a0d      	ldr	r2, [pc, #52]	; (9c0 <rtc_calendar_enable_callback+0x40>)
     98a:	815a      	strh	r2, [r3, #10]
     98c:	e010      	b.n	9b0 <rtc_calendar_enable_callback+0x30>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     98e:	2907      	cmp	r1, #7
     990:	d805      	bhi.n	99e <rtc_calendar_enable_callback+0x1e>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     992:	2201      	movs	r2, #1
     994:	408a      	lsls	r2, r1
     996:	24ff      	movs	r4, #255	; 0xff
     998:	4022      	ands	r2, r4
     99a:	815a      	strh	r2, [r3, #10]
     99c:	e008      	b.n	9b0 <rtc_calendar_enable_callback+0x30>
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     99e:	2280      	movs	r2, #128	; 0x80
     9a0:	0052      	lsls	r2, r2, #1
     9a2:	000c      	movs	r4, r1
     9a4:	3c08      	subs	r4, #8
     9a6:	40a2      	lsls	r2, r4
     9a8:	2480      	movs	r4, #128	; 0x80
     9aa:	0064      	lsls	r4, r4, #1
     9ac:	4022      	ands	r2, r4
     9ae:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     9b0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
     9b2:	2301      	movs	r3, #1
     9b4:	408b      	lsls	r3, r1
     9b6:	4313      	orrs	r3, r2
     9b8:	b29b      	uxth	r3, r3
     9ba:	8643      	strh	r3, [r0, #50]	; 0x32
}
     9bc:	bd10      	pop	{r4, pc}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	ffff8000 	.word	0xffff8000

000009c4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c6:	465f      	mov	r7, fp
     9c8:	4656      	mov	r6, sl
     9ca:	464d      	mov	r5, r9
     9cc:	4644      	mov	r4, r8
     9ce:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     9d0:	4b23      	ldr	r3, [pc, #140]	; (a60 <RTC_Handler+0x9c>)
     9d2:	681b      	ldr	r3, [r3, #0]
     9d4:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
     9d6:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     9d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     9da:	4652      	mov	r2, sl
     9dc:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     9de:	401a      	ands	r2, r3
     9e0:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     9e2:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     9e4:	8972      	ldrh	r2, [r6, #10]
     9e6:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     9e8:	b21a      	sxth	r2, r3
     9ea:	2a00      	cmp	r2, #0
     9ec:	da08      	bge.n	a00 <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     9ee:	4643      	mov	r3, r8
     9f0:	059b      	lsls	r3, r3, #22
     9f2:	d502      	bpl.n	9fa <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     9f4:	4653      	mov	r3, sl
     9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9f8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     9fa:	4b1a      	ldr	r3, [pc, #104]	; (a64 <RTC_Handler+0xa0>)
     9fc:	81b3      	strh	r3, [r6, #12]
     9fe:	e028      	b.n	a52 <RTC_Handler+0x8e>
     a00:	27ff      	movs	r7, #255	; 0xff
     a02:	401f      	ands	r7, r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     a04:	d01a      	beq.n	a3c <RTC_Handler+0x78>
     a06:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     a08:	2301      	movs	r3, #1
     a0a:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     a0c:	33fe      	adds	r3, #254	; 0xfe
     a0e:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     a10:	0023      	movs	r3, r4
     a12:	464d      	mov	r5, r9
     a14:	40a5      	lsls	r5, r4
     a16:	422f      	tst	r7, r5
     a18:	d009      	beq.n	a2e <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
     a1a:	4642      	mov	r2, r8
     a1c:	4122      	asrs	r2, r4
     a1e:	4649      	mov	r1, r9
     a20:	4211      	tst	r1, r2
     a22:	d004      	beq.n	a2e <RTC_Handler+0x6a>
				module->callbacks[i]();
     a24:	3302      	adds	r3, #2
     a26:	009b      	lsls	r3, r3, #2
     a28:	4652      	mov	r2, sl
     a2a:	589b      	ldr	r3, [r3, r2]
     a2c:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     a2e:	465b      	mov	r3, fp
     a30:	401d      	ands	r5, r3
     a32:	81b5      	strh	r5, [r6, #12]
     a34:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
     a36:	2c08      	cmp	r4, #8
     a38:	d1ea      	bne.n	a10 <RTC_Handler+0x4c>
     a3a:	e00a      	b.n	a52 <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     a3c:	05db      	lsls	r3, r3, #23
     a3e:	d508      	bpl.n	a52 <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     a40:	4643      	mov	r3, r8
     a42:	05db      	lsls	r3, r3, #23
     a44:	d502      	bpl.n	a4c <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     a46:	4653      	mov	r3, sl
     a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a4a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     a4c:	2380      	movs	r3, #128	; 0x80
     a4e:	005b      	lsls	r3, r3, #1
     a50:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     a52:	bc3c      	pop	{r2, r3, r4, r5}
     a54:	4690      	mov	r8, r2
     a56:	4699      	mov	r9, r3
     a58:	46a2      	mov	sl, r4
     a5a:	46ab      	mov	fp, r5
     a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	2000061c 	.word	0x2000061c
     a64:	ffff8000 	.word	0xffff8000

00000a68 <tsens_init>:
 * \retval STATUS_ERR_INVALID_ARG   Invalid argument(s) were provided
 * \retval STATUS_BUSY              The module is busy with a reset operation
 * \retval STATUS_ERR_DENIED        The module is enabled
 */
enum status_code tsens_init(struct tsens_config *config)
{
     a68:	b510      	push	{r4, lr}
     a6a:	b082      	sub	sp, #8
     a6c:	0004      	movs	r4, r0
     a6e:	4a27      	ldr	r2, [pc, #156]	; (b0c <tsens_init+0xa4>)
     a70:	6953      	ldr	r3, [r2, #20]
     a72:	2180      	movs	r1, #128	; 0x80
     a74:	0149      	lsls	r1, r1, #5
     a76:	430b      	orrs	r3, r1
     a78:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     a7a:	4b25      	ldr	r3, [pc, #148]	; (b10 <tsens_init+0xa8>)
     a7c:	781b      	ldrb	r3, [r3, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     a7e:	2005      	movs	r0, #5
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     a80:	07db      	lsls	r3, r3, #31
     a82:	d441      	bmi.n	b08 <tsens_init+0xa0>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     a84:	4b22      	ldr	r3, [pc, #136]	; (b10 <tsens_init+0xa8>)
     a86:	781b      	ldrb	r3, [r3, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     a88:	3017      	adds	r0, #23
	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     a8a:	079b      	lsls	r3, r3, #30
     a8c:	d43c      	bmi.n	b08 <tsens_init+0xa0>
static enum status_code _tsens_set_config(struct tsens_config *const config)
{
	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     a8e:	a901      	add	r1, sp, #4
     a90:	7823      	ldrb	r3, [r4, #0]
     a92:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(TSENS_GCLK_ID, &gclk_chan_conf);
     a94:	3817      	subs	r0, #23
     a96:	4b1f      	ldr	r3, [pc, #124]	; (b14 <tsens_init+0xac>)
     a98:	4798      	blx	r3
	system_gclk_chan_enable(TSENS_GCLK_ID);
     a9a:	2005      	movs	r0, #5
     a9c:	4b1e      	ldr	r3, [pc, #120]	; (b18 <tsens_init+0xb0>)
     a9e:	4798      	blx	r3

	/* Configure run in standby */
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);
     aa0:	78a3      	ldrb	r3, [r4, #2]
     aa2:	019b      	lsls	r3, r3, #6
     aa4:	b2db      	uxtb	r3, r3
     aa6:	4a1a      	ldr	r2, [pc, #104]	; (b10 <tsens_init+0xa8>)
     aa8:	7013      	strb	r3, [r2, #0]

	/* Check validity of window thresholds */
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
     aaa:	7923      	ldrb	r3, [r4, #4]
     aac:	2b00      	cmp	r3, #0
     aae:	d006      	beq.n	abe <tsens_init+0x56>
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
			(config->window.window_upper_value > WINDOW_MAX_VALUE)) {
				return STATUS_ERR_INVALID_ARG;
     ab0:	2017      	movs	r0, #23
	/* Configure run in standby */
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
     ab2:	68a2      	ldr	r2, [r4, #8]
     ab4:	3228      	adds	r2, #40	; 0x28
     ab6:	db27      	blt.n	b08 <tsens_init+0xa0>
     ab8:	68e2      	ldr	r2, [r4, #12]
     aba:	2a69      	cmp	r2, #105	; 0x69
     abc:	dc24      	bgt.n	b08 <tsens_init+0xa0>
				return STATUS_ERR_INVALID_ARG;
			}
	}

	/* Configure CTRLC */
	TSENS->CTRLC.reg =
     abe:	7862      	ldrb	r2, [r4, #1]
     ac0:	0112      	lsls	r2, r2, #4
     ac2:	4313      	orrs	r3, r2
     ac4:	b2da      	uxtb	r2, r3
     ac6:	4b12      	ldr	r3, [pc, #72]	; (b10 <tsens_init+0xa8>)
     ac8:	709a      	strb	r2, [r3, #2]
			(config->free_running << TSENS_CTRLC_FREERUN_Pos) | \
			(config->window.window_mode);

#if ERRATA_14476
	/* Configure lower threshold */
	TSENS->WINLT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
     aca:	68e2      	ldr	r2, [r4, #12]
     acc:	0212      	lsls	r2, r2, #8
     ace:	0a12      	lsrs	r2, r2, #8
     ad0:	611a      	str	r2, [r3, #16]

	/* Configure upper threshold */
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
     ad2:	68a2      	ldr	r2, [r4, #8]
     ad4:	0212      	lsls	r2, r2, #8
     ad6:	0a12      	lsrs	r2, r2, #8
     ad8:	615a      	str	r2, [r3, #20]
	/* Configure upper threshold */
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
#endif

	/* Configure events */
	TSENS->EVCTRL.reg = config->event_action;
     ada:	7c22      	ldrb	r2, [r4, #16]
     adc:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	TSENS->INTENCLR.reg =
     ade:	220f      	movs	r2, #15
     ae0:	711a      	strb	r2, [r3, #4]
			(1 << TSENS_INTENCLR_OVF_Pos) | (1 << TSENS_INTENCLR_WINMON_Pos) | \
			(1 << TSENS_INTENCLR_OVERRUN_Pos) | (1 << TSENS_INTENCLR_RESRDY_Pos);

	/* Read calibration from NVM */
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
     ae2:	4a0e      	ldr	r2, [pc, #56]	; (b1c <tsens_init+0xb4>)
     ae4:	6812      	ldr	r2, [r2, #0]
	uint32_t tsens_tcal = \
				((tsens_bits & TSENS_FUSES_TCAL_Msk) >> TSENS_FUSES_TCAL_Pos);
	uint32_t tsens_fcal = \
				((tsens_bits & TSENS_FUSES_FCAL_Msk) >> TSENS_FUSES_FCAL_Pos);

	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     ae6:	0210      	lsls	r0, r2, #8
     ae8:	21fc      	movs	r1, #252	; 0xfc
     aea:	0189      	lsls	r1, r1, #6
     aec:	4001      	ands	r1, r0
     aee:	0512      	lsls	r2, r2, #20
     af0:	0e92      	lsrs	r2, r2, #26
     af2:	430a      	orrs	r2, r1
     af4:	621a      	str	r2, [r3, #32]
	TSENS->GAIN.reg = TSENS_GAIN_GAIN(config->calibration.gain);
     af6:	6962      	ldr	r2, [r4, #20]
     af8:	0212      	lsls	r2, r2, #8
     afa:	0a12      	lsrs	r2, r2, #8
     afc:	619a      	str	r2, [r3, #24]
	TSENS->OFFSET.reg = TSENS_OFFSET_OFFSETC(config->calibration.offset);
     afe:	69a2      	ldr	r2, [r4, #24]
     b00:	0212      	lsls	r2, r2, #8
     b02:	0a12      	lsrs	r2, r2, #8
     b04:	61da      	str	r2, [r3, #28]

	return STATUS_OK;
     b06:	2000      	movs	r0, #0
		return STATUS_ERR_DENIED;
	}

	/* Write configuration to module */
	return _tsens_set_config(config);
}
     b08:	b002      	add	sp, #8
     b0a:	bd10      	pop	{r4, pc}
     b0c:	40000800 	.word	0x40000800
     b10:	40003000 	.word	0x40003000
     b14:	00002551 	.word	0x00002551
     b18:	000024e1 	.word	0x000024e1
     b1c:	00806030 	.word	0x00806030

00000b20 <tsens_get_config_defaults>:
 *                     default values
 */
void tsens_get_config_defaults(struct tsens_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     b20:	2300      	movs	r3, #0
     b22:	7003      	strb	r3, [r0, #0]
	config->free_running                  = false;
     b24:	7043      	strb	r3, [r0, #1]
	config->run_in_standby                = false;
     b26:	7083      	strb	r3, [r0, #2]
	config->window.window_mode            = TSENS_WINDOW_MODE_DISABLE;
     b28:	7103      	strb	r3, [r0, #4]
	config->window.window_upper_value     = 0;
     b2a:	60c3      	str	r3, [r0, #12]
	config->window.window_lower_value     = 0;
     b2c:	6083      	str	r3, [r0, #8]
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;
     b2e:	7403      	strb	r3, [r0, #16]

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
     b30:	4b06      	ldr	r3, [pc, #24]	; (b4c <tsens_get_config_defaults+0x2c>)
     b32:	681b      	ldr	r3, [r3, #0]
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
     b34:	4a06      	ldr	r2, [pc, #24]	; (b50 <tsens_get_config_defaults+0x30>)
     b36:	6812      	ldr	r2, [r2, #0]
	config->calibration.offset   = \
     b38:	0119      	lsls	r1, r3, #4
     b3a:	0a09      	lsrs	r1, r1, #8
     b3c:	6181      	str	r1, [r0, #24]
		((tsens_bits[0] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
	config->calibration.gain     = \
     b3e:	0b19      	lsrs	r1, r3, #12
     b40:	230f      	movs	r3, #15
     b42:	4013      	ands	r3, r2
     b44:	430b      	orrs	r3, r1
     b46:	6143      	str	r3, [r0, #20]
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
		((tsens_bits[1] & TSENS_FUSES_GAIN_1_Msk) >> TSENS_FUSES_GAIN_1_Pos);
}
     b48:	4770      	bx	lr
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	00806030 	.word	0x00806030
     b50:	00806034 	.word	0x00806034

00000b54 <tsens_read>:
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     b54:	4b1e      	ldr	r3, [pc, #120]	; (bd0 <tsens_read+0x7c>)
     b56:	799a      	ldrb	r2, [r3, #6]
     b58:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;
     b5a:	2301      	movs	r3, #1
     b5c:	4013      	ands	r3, r2
	if (int_flags & TSENS_INTFLAG_RESRDY) {
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     b5e:	0791      	lsls	r1, r2, #30
     b60:	d501      	bpl.n	b66 <tsens_read+0x12>
		status_flags |= TSENS_STATUS_OVERRUN;
     b62:	2102      	movs	r1, #2
     b64:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     b66:	0751      	lsls	r1, r2, #29
     b68:	d501      	bpl.n	b6e <tsens_read+0x1a>
		status_flags |= TSENS_STATUS_WINDOW;
     b6a:	2104      	movs	r1, #4
     b6c:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     b6e:	0712      	lsls	r2, r2, #28
     b70:	d501      	bpl.n	b76 <tsens_read+0x22>
		status_flags |= TSENS_STATUS_OVERFLOW;
     b72:	2208      	movs	r2, #8
     b74:	4313      	orrs	r3, r2
{
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
     b76:	2205      	movs	r2, #5
 */
enum status_code tsens_read(int32_t *result)
{
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
     b78:	07db      	lsls	r3, r3, #31
     b7a:	d527      	bpl.n	bcc <tsens_read+0x78>
		/* Result not ready */
		return STATUS_BUSY;
	}

	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     b7c:	4b14      	ldr	r3, [pc, #80]	; (bd0 <tsens_read+0x7c>)
     b7e:	79db      	ldrb	r3, [r3, #7]
		/* The result is not valid */
		return STATUS_ERR_BAD_DATA;
     b80:	320e      	adds	r2, #14
	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
	}

	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     b82:	07db      	lsls	r3, r3, #31
     b84:	d422      	bmi.n	bcc <tsens_read+0x78>
		/* The result is not valid */
		return STATUS_ERR_BAD_DATA;
	}

	/* Get TSENS result */
	uint32_t temp = TSENS->VALUE.reg;
     b86:	4b12      	ldr	r3, [pc, #72]	; (bd0 <tsens_read+0x7c>)
     b88:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     b8a:	021a      	lsls	r2, r3, #8
     b8c:	d502      	bpl.n	b94 <tsens_read+0x40>
		temp |= ~TSENS_VALUE_MASK;
     b8e:	22ff      	movs	r2, #255	; 0xff
     b90:	0612      	lsls	r2, r2, #24
     b92:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*result = temp * (-1);
     b94:	425b      	negs	r3, r3
     b96:	6003      	str	r3, [r0, #0]
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     b98:	4a0d      	ldr	r2, [pc, #52]	; (bd0 <tsens_read+0x7c>)
     b9a:	2301      	movs	r3, #1
     b9c:	7193      	strb	r3, [r2, #6]
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     b9e:	7992      	ldrb	r2, [r2, #6]
     ba0:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;
     ba2:	4013      	ands	r3, r2
	if (int_flags & TSENS_INTFLAG_RESRDY) {
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     ba4:	0791      	lsls	r1, r2, #30
     ba6:	d501      	bpl.n	bac <tsens_read+0x58>
		status_flags |= TSENS_STATUS_OVERRUN;
     ba8:	2102      	movs	r1, #2
     baa:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     bac:	0751      	lsls	r1, r2, #29
     bae:	d501      	bpl.n	bb4 <tsens_read+0x60>
		status_flags |= TSENS_STATUS_WINDOW;
     bb0:	2104      	movs	r1, #4
     bb2:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     bb4:	0712      	lsls	r2, r2, #28
     bb6:	d501      	bpl.n	bbc <tsens_read+0x68>
		status_flags |= TSENS_STATUS_OVERFLOW;
     bb8:	2208      	movs	r2, #8
     bba:	4313      	orrs	r3, r2
#endif

	/* Reset ready flag */
	tsens_clear_status(TSENS_STATUS_RESULT_READY);

	if (tsens_get_status() & TSENS_STATUS_OVERRUN) {
     bbc:	079b      	lsls	r3, r3, #30
     bbe:	d504      	bpl.n	bca <tsens_read+0x76>
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     bc0:	2202      	movs	r2, #2
     bc2:	4b03      	ldr	r3, [pc, #12]	; (bd0 <tsens_read+0x7c>)
     bc4:	719a      	strb	r2, [r3, #6]
		tsens_clear_status(TSENS_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
     bc6:	321c      	adds	r2, #28
     bc8:	e000      	b.n	bcc <tsens_read+0x78>
	}

	return STATUS_OK;
     bca:	2200      	movs	r2, #0
}
     bcc:	0010      	movs	r0, r2
     bce:	4770      	bx	lr
     bd0:	40003000 	.word	0x40003000

00000bd4 <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	4647      	mov	r7, r8
     bd8:	b480      	push	{r7}
	struct tsens_module *module = _tsens_instances;
     bda:	4b13      	ldr	r3, [pc, #76]	; (c28 <TSENS_Handler+0x54>)
     bdc:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     bde:	4b13      	ldr	r3, [pc, #76]	; (c2c <TSENS_Handler+0x58>)
     be0:	799e      	ldrb	r6, [r3, #6]
     be2:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     be4:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     be6:	021a      	lsls	r2, r3, #8
     be8:	d502      	bpl.n	bf0 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     bea:	22ff      	movs	r2, #255	; 0xff
     bec:	0612      	lsls	r2, r2, #24
     bee:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     bf0:	693a      	ldr	r2, [r7, #16]
     bf2:	425b      	negs	r3, r3
     bf4:	6013      	str	r3, [r2, #0]
     bf6:	2400      	movs	r4, #0
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     bf8:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     bfa:	4b0c      	ldr	r3, [pc, #48]	; (c2c <TSENS_Handler+0x58>)
     bfc:	4698      	mov	r8, r3
     bfe:	b2e0      	uxtb	r0, r4
	*(module->value) = temp * (-1);
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     c00:	0033      	movs	r3, r6
     c02:	40e3      	lsrs	r3, r4
     c04:	421d      	tst	r5, r3
     c06:	d009      	beq.n	c1c <TSENS_Handler+0x48>
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     c08:	002b      	movs	r3, r5
     c0a:	40a3      	lsls	r3, r4
     c0c:	b2db      	uxtb	r3, r3
     c0e:	4642      	mov	r2, r8
     c10:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     c12:	00a3      	lsls	r3, r4, #2
     c14:	58fb      	ldr	r3, [r7, r3]
     c16:	2b00      	cmp	r3, #0
     c18:	d000      	beq.n	c1c <TSENS_Handler+0x48>
				module->callback[i]((enum tsens_callback)i);
     c1a:	4798      	blx	r3
     c1c:	3401      	adds	r4, #1
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     c1e:	2c04      	cmp	r4, #4
     c20:	d1ed      	bne.n	bfe <TSENS_Handler+0x2a>
			if(module->callback[i] != NULL) {
				module->callback[i]((enum tsens_callback)i);
			}
		}
	}
}
     c22:	bc04      	pop	{r2}
     c24:	4690      	mov	r8, r2
     c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c28:	20000620 	.word	0x20000620
     c2c:	40003000 	.word	0x40003000

00000c30 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c32:	464f      	mov	r7, r9
     c34:	4646      	mov	r6, r8
     c36:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     c38:	0080      	lsls	r0, r0, #2
     c3a:	4b11      	ldr	r3, [pc, #68]	; (c80 <_tcc_interrupt_handler+0x50>)
     c3c:	58c3      	ldr	r3, [r0, r3]
     c3e:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     c40:	681b      	ldr	r3, [r3, #0]
     c42:	6adf      	ldr	r7, [r3, #44]	; 0x2c
     c44:	464b      	mov	r3, r9
     c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     c48:	401f      	ands	r7, r3
     c4a:	464b      	mov	r3, r9
     c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     c4e:	401f      	ands	r7, r3
     c50:	4d0c      	ldr	r5, [pc, #48]	; (c84 <_tcc_interrupt_handler+0x54>)
     c52:	464b      	mov	r3, r9
     c54:	1d1c      	adds	r4, r3, #4
     c56:	2334      	movs	r3, #52	; 0x34
     c58:	444b      	add	r3, r9
     c5a:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     c5c:	682e      	ldr	r6, [r5, #0]
     c5e:	423e      	tst	r6, r7
     c60:	d005      	beq.n	c6e <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     c62:	4648      	mov	r0, r9
     c64:	6823      	ldr	r3, [r4, #0]
     c66:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     c68:	464b      	mov	r3, r9
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	62de      	str	r6, [r3, #44]	; 0x2c
     c6e:	3504      	adds	r5, #4
     c70:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     c72:	4544      	cmp	r4, r8
     c74:	d1f2      	bne.n	c5c <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     c76:	bc0c      	pop	{r2, r3}
     c78:	4690      	mov	r8, r2
     c7a:	4699      	mov	r9, r3
     c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	20000624 	.word	0x20000624
     c84:	00004ec4 	.word	0x00004ec4

00000c88 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     c88:	b510      	push	{r4, lr}
     c8a:	2000      	movs	r0, #0
     c8c:	4b01      	ldr	r3, [pc, #4]	; (c94 <TCC0_Handler+0xc>)
     c8e:	4798      	blx	r3
     c90:	bd10      	pop	{r4, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00000c31 	.word	0x00000c31

00000c98 <TCC1_Handler>:
     c98:	b510      	push	{r4, lr}
     c9a:	2001      	movs	r0, #1
     c9c:	4b01      	ldr	r3, [pc, #4]	; (ca4 <TCC1_Handler+0xc>)
     c9e:	4798      	blx	r3
     ca0:	bd10      	pop	{r4, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000c31 	.word	0x00000c31

00000ca8 <TCC2_Handler>:
     ca8:	b510      	push	{r4, lr}
     caa:	2002      	movs	r0, #2
     cac:	4b01      	ldr	r3, [pc, #4]	; (cb4 <TCC2_Handler+0xc>)
     cae:	4798      	blx	r3
     cb0:	bd10      	pop	{r4, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	00000c31 	.word	0x00000c31

00000cb8 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     cb8:	2300      	movs	r3, #0
     cba:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     cbc:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     cbe:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     cc0:	2000      	movs	r0, #0
     cc2:	4770      	bx	lr

00000cc4 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     cc4:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <events_add_hook+0x2c>)
     cc8:	691a      	ldr	r2, [r3, #16]
     cca:	2a00      	cmp	r2, #0
     ccc:	d102      	bne.n	cd4 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     cce:	6119      	str	r1, [r3, #16]
     cd0:	e004      	b.n	cdc <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     cd2:	001a      	movs	r2, r3
		_events_inst.hook_list = hook;
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
     cd4:	6893      	ldr	r3, [r2, #8]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d1fb      	bne.n	cd2 <events_add_hook+0xe>
			tmp_hook = tmp_hook->next;
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     cda:	6091      	str	r1, [r2, #8]
 *
 */
static inline bool system_interrupt_is_enabled(
		const enum system_interrupt_vector vector)
{
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     cdc:	4b05      	ldr	r3, [pc, #20]	; (cf4 <events_add_hook+0x30>)
     cde:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     ce0:	05db      	lsls	r3, r3, #23
     ce2:	d403      	bmi.n	cec <events_add_hook+0x28>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ce4:	2280      	movs	r2, #128	; 0x80
     ce6:	0052      	lsls	r2, r2, #1
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <events_add_hook+0x30>)
     cea:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     cec:	2000      	movs	r0, #0
     cee:	4770      	bx	lr
     cf0:	20000000 	.word	0x20000000
     cf4:	e000e100 	.word	0xe000e100

00000cf8 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     cf8:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     cfa:	2901      	cmp	r1, #1
     cfc:	d108      	bne.n	d10 <events_enable_interrupt_source+0x18>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     cfe:	7800      	ldrb	r0, [r0, #0]
     d00:	310f      	adds	r1, #15
     d02:	4b09      	ldr	r3, [pc, #36]	; (d28 <events_enable_interrupt_source+0x30>)
     d04:	4798      	blx	r3
     d06:	2384      	movs	r3, #132	; 0x84
     d08:	05db      	lsls	r3, r3, #23
     d0a:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d0c:	2300      	movs	r3, #0
     d0e:	e009      	b.n	d24 <events_enable_interrupt_source+0x2c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     d10:	2317      	movs	r3, #23
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d12:	2900      	cmp	r1, #0
     d14:	d106      	bne.n	d24 <events_enable_interrupt_source+0x2c>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     d16:	7800      	ldrb	r0, [r0, #0]
     d18:	4b03      	ldr	r3, [pc, #12]	; (d28 <events_enable_interrupt_source+0x30>)
     d1a:	4798      	blx	r3
     d1c:	2384      	movs	r3, #132	; 0x84
     d1e:	05db      	lsls	r3, r3, #23
     d20:	6158      	str	r0, [r3, #20]
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d22:	2300      	movs	r3, #0
}
     d24:	0018      	movs	r0, r3
     d26:	bd10      	pop	{r4, pc}
     d28:	00000dd1 	.word	0x00000dd1

00000d2c <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     d2c:	b510      	push	{r4, lr}
     d2e:	0003      	movs	r3, r0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     d30:	2901      	cmp	r1, #1
     d32:	d104      	bne.n	d3e <events_is_interrupt_set+0x12>
		bitpos = _events_find_bit_position(resource->channel,
     d34:	7800      	ldrb	r0, [r0, #0]
     d36:	310f      	adds	r1, #15
     d38:	4b07      	ldr	r3, [pc, #28]	; (d58 <events_is_interrupt_set+0x2c>)
     d3a:	4798      	blx	r3
     d3c:	e005      	b.n	d4a <events_is_interrupt_set+0x1e>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     d3e:	2000      	movs	r0, #0
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d40:	2900      	cmp	r1, #0
     d42:	d108      	bne.n	d56 <events_is_interrupt_set+0x2a>
		bitpos = _events_find_bit_position(resource->channel,
     d44:	7818      	ldrb	r0, [r3, #0]
     d46:	4b04      	ldr	r3, [pc, #16]	; (d58 <events_is_interrupt_set+0x2c>)
     d48:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <events_is_interrupt_set+0x30>)
     d4c:	689b      	ldr	r3, [r3, #8]
     d4e:	4018      	ands	r0, r3
     d50:	1e43      	subs	r3, r0, #1
     d52:	4198      	sbcs	r0, r3
     d54:	b2c0      	uxtb	r0, r0
}
     d56:	bd10      	pop	{r4, pc}
     d58:	00000dd1 	.word	0x00000dd1
     d5c:	20000000 	.word	0x20000000

00000d60 <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     d60:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     d62:	2901      	cmp	r1, #1
     d64:	d104      	bne.n	d70 <events_ack_interrupt+0x10>
		bitpos = _events_find_bit_position(resource->channel,
     d66:	7800      	ldrb	r0, [r0, #0]
     d68:	310f      	adds	r1, #15
     d6a:	4b08      	ldr	r3, [pc, #32]	; (d8c <events_ack_interrupt+0x2c>)
     d6c:	4798      	blx	r3
     d6e:	e005      	b.n	d7c <events_ack_interrupt+0x1c>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     d70:	2317      	movs	r3, #23
	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d72:	2900      	cmp	r1, #0
     d74:	d107      	bne.n	d86 <events_ack_interrupt+0x26>
		bitpos = _events_find_bit_position(resource->channel,
     d76:	7800      	ldrb	r0, [r0, #0]
     d78:	4b04      	ldr	r3, [pc, #16]	; (d8c <events_ack_interrupt+0x2c>)
     d7a:	4798      	blx	r3
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     d7c:	4a04      	ldr	r2, [pc, #16]	; (d90 <events_ack_interrupt+0x30>)
     d7e:	68d3      	ldr	r3, [r2, #12]
     d80:	4318      	orrs	r0, r3
     d82:	60d0      	str	r0, [r2, #12]

	return STATUS_OK;
     d84:	2300      	movs	r3, #0
}
     d86:	0018      	movs	r0, r3
     d88:	bd10      	pop	{r4, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	00000dd1 	.word	0x00000dd1
     d90:	20000000 	.word	0x20000000

00000d94 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     d94:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     d96:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <EVSYS_Handler+0x34>)
     d98:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     d9a:	2184      	movs	r1, #132	; 0x84
     d9c:	05c9      	lsls	r1, r1, #23
     d9e:	6988      	ldr	r0, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     da0:	689a      	ldr	r2, [r3, #8]
     da2:	4302      	orrs	r2, r0
     da4:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     da6:	4b09      	ldr	r3, [pc, #36]	; (dcc <EVSYS_Handler+0x38>)
     da8:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     daa:	2c00      	cmp	r4, #0
     dac:	d005      	beq.n	dba <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     dae:	6820      	ldr	r0, [r4, #0]
     db0:	6863      	ldr	r3, [r4, #4]
     db2:	4798      	blx	r3
		current_hook = current_hook->next;
     db4:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     db6:	2c00      	cmp	r4, #0
     db8:	d1f9      	bne.n	dae <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     dba:	4b03      	ldr	r3, [pc, #12]	; (dc8 <EVSYS_Handler+0x34>)
     dbc:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     dbe:	689a      	ldr	r2, [r3, #8]
     dc0:	438a      	bics	r2, r1
     dc2:	609a      	str	r2, [r3, #8]
}
     dc4:	bd10      	pop	{r4, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	20000000 	.word	0x20000000
     dcc:	0fff0fff 	.word	0x0fff0fff

00000dd0 <_events_find_bit_position>:
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);

	return pos;
     dd0:	1809      	adds	r1, r1, r0
     dd2:	2001      	movs	r0, #1
     dd4:	4088      	lsls	r0, r1
}
     dd6:	4770      	bx	lr

00000dd8 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     dd8:	4906      	ldr	r1, [pc, #24]	; (df4 <_system_events_init+0x1c>)
     dda:	69cb      	ldr	r3, [r1, #28]
     ddc:	2201      	movs	r2, #1
     dde:	4313      	orrs	r3, r2
     de0:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     de2:	2384      	movs	r3, #132	; 0x84
     de4:	05db      	lsls	r3, r3, #23
     de6:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     de8:	0019      	movs	r1, r3
     dea:	780b      	ldrb	r3, [r1, #0]
     dec:	4213      	tst	r3, r2
     dee:	d1fc      	bne.n	dea <_system_events_init+0x12>
	}
}
     df0:	4770      	bx	lr
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	40000800 	.word	0x40000800

00000df8 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     df8:	2301      	movs	r3, #1
     dfa:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     dfc:	2300      	movs	r3, #0
     dfe:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     e00:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     e02:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     e04:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
     e06:	7143      	strb	r3, [r0, #5]
}
     e08:	4770      	bx	lr
     e0a:	46c0      	nop			; (mov r8, r8)

00000e0c <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     e0c:	b570      	push	{r4, r5, r6, lr}
     e0e:	b082      	sub	sp, #8
     e10:	0006      	movs	r6, r0
     e12:	000d      	movs	r5, r1
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e14:	4b28      	ldr	r3, [pc, #160]	; (eb8 <events_allocate+0xac>)
     e16:	4798      	blx	r3
	uint32_t tmp;
	bool allocated = false;

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;
     e18:	4b28      	ldr	r3, [pc, #160]	; (ebc <events_allocate+0xb0>)
     e1a:	681b      	ldr	r3, [r3, #0]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {

		if(!(tmp & 0x00000001)) {
     e1c:	07da      	lsls	r2, r3, #31
     e1e:	d444      	bmi.n	eaa <events_allocate+0x9e>
     e20:	e002      	b.n	e28 <events_allocate+0x1c>
     e22:	421a      	tst	r2, r3
     e24:	d110      	bne.n	e48 <events_allocate+0x3c>
     e26:	e000      	b.n	e2a <events_allocate+0x1e>

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e28:	2400      	movs	r4, #0

		if(!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
     e2a:	4b24      	ldr	r3, [pc, #144]	; (ebc <events_allocate+0xb0>)
     e2c:	6819      	ldr	r1, [r3, #0]
     e2e:	2201      	movs	r2, #1
     e30:	40a2      	lsls	r2, r4
     e32:	430a      	orrs	r2, r1
     e34:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
     e36:	791a      	ldrb	r2, [r3, #4]
     e38:	3a01      	subs	r2, #1
     e3a:	711a      	strb	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e3c:	4b20      	ldr	r3, [pc, #128]	; (ec0 <events_allocate+0xb4>)
     e3e:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     e40:	2014      	movs	r0, #20

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
     e42:	2cff      	cmp	r4, #255	; 0xff
     e44:	d106      	bne.n	e54 <events_allocate+0x48>
     e46:	e034      	b.n	eb2 <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
     e48:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e4a:	3401      	adds	r4, #1
     e4c:	b2e4      	uxtb	r4, r4
     e4e:	2c0c      	cmp	r4, #12
     e50:	d1e7      	bne.n	e22 <events_allocate+0x16>
     e52:	e026      	b.n	ea2 <events_allocate+0x96>

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
	}

	resource->channel = new_channel;
     e54:	7034      	strb	r4, [r6, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     e56:	786b      	ldrb	r3, [r5, #1]
     e58:	2b02      	cmp	r3, #2
     e5a:	d00a      	beq.n	e72 <events_allocate+0x66>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
     e5c:	a901      	add	r1, sp, #4
     e5e:	78eb      	ldrb	r3, [r5, #3]
     e60:	700b      	strb	r3, [r1, #0]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     e62:	3406      	adds	r4, #6
     e64:	b2e4      	uxtb	r4, r4
     e66:	0020      	movs	r0, r4
     e68:	4b16      	ldr	r3, [pc, #88]	; (ec4 <events_allocate+0xb8>)
     e6a:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     e6c:	0020      	movs	r0, r4
     e6e:	4b16      	ldr	r3, [pc, #88]	; (ec8 <events_allocate+0xbc>)
     e70:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     e72:	78ab      	ldrb	r3, [r5, #2]
     e74:	217f      	movs	r1, #127	; 0x7f
     e76:	4019      	ands	r1, r3
     e78:	792b      	ldrb	r3, [r5, #4]
     e7a:	039b      	lsls	r3, r3, #14
     e7c:	4319      	orrs	r1, r3
     e7e:	796a      	ldrb	r2, [r5, #5]
     e80:	03d2      	lsls	r2, r2, #15
     e82:	4311      	orrs	r1, r2
     e84:	786b      	ldrb	r3, [r5, #1]
     e86:	021b      	lsls	r3, r3, #8
     e88:	22c0      	movs	r2, #192	; 0xc0
     e8a:	0092      	lsls	r2, r2, #2
     e8c:	4013      	ands	r3, r2
     e8e:	4319      	orrs	r1, r3
     e90:	782b      	ldrb	r3, [r5, #0]
     e92:	029b      	lsls	r3, r3, #10
     e94:	22c0      	movs	r2, #192	; 0xc0
     e96:	0112      	lsls	r2, r2, #4
     e98:	4013      	ands	r3, r2
     e9a:	430b      	orrs	r3, r1
     e9c:	6073      	str	r3, [r6, #4]
			EVSYS_CHANNEL_PATH(config->path)                                 |
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
     e9e:	2000      	movs	r0, #0
     ea0:	e007      	b.n	eb2 <events_allocate+0xa6>
     ea2:	4b07      	ldr	r3, [pc, #28]	; (ec0 <events_allocate+0xb4>)
     ea4:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     ea6:	2014      	movs	r0, #20
     ea8:	e003      	b.n	eb2 <events_allocate+0xa6>

			break;

		}

		tmp = tmp >> 1;
     eaa:	085b      	lsrs	r3, r3, #1

	system_interrupt_enter_critical_section();

	tmp = _events_inst.allocated_channels;

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     eac:	2401      	movs	r4, #1

		if(!(tmp & 0x00000001)) {
     eae:	2201      	movs	r2, #1
     eb0:	e7b7      	b.n	e22 <events_allocate+0x16>
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
     eb2:	b002      	add	sp, #8
     eb4:	bd70      	pop	{r4, r5, r6, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000f05 	.word	0x00000f05
     ebc:	20000000 	.word	0x20000000
     ec0:	00000f45 	.word	0x00000f45
     ec4:	00002551 	.word	0x00002551
     ec8:	000024e1 	.word	0x000024e1

00000ecc <events_is_busy>:

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     ecc:	2384      	movs	r3, #132	; 0x84
     ece:	05db      	lsls	r3, r3, #23
     ed0:	68da      	ldr	r2, [r3, #12]
     ed2:	7803      	ldrb	r3, [r0, #0]
     ed4:	3310      	adds	r3, #16
     ed6:	2001      	movs	r0, #1
     ed8:	4098      	lsls	r0, r3
     eda:	4010      	ands	r0, r2
     edc:	1e43      	subs	r3, r0, #1
     ede:	4198      	sbcs	r0, r3
     ee0:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
     ee2:	4770      	bx	lr

00000ee4 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
     ee4:	7803      	ldrb	r3, [r0, #0]
     ee6:	3301      	adds	r3, #1
     ee8:	221f      	movs	r2, #31
     eea:	4013      	ands	r3, r2
     eec:	2284      	movs	r2, #132	; 0x84
     eee:	05d2      	lsls	r2, r2, #23
     ef0:	3120      	adds	r1, #32
     ef2:	0089      	lsls	r1, r1, #2
     ef4:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
     ef6:	7803      	ldrb	r3, [r0, #0]
     ef8:	6841      	ldr	r1, [r0, #4]
     efa:	3308      	adds	r3, #8
     efc:	009b      	lsls	r3, r3, #2
     efe:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
     f00:	2000      	movs	r0, #0
     f02:	4770      	bx	lr

00000f04 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <cpu_irq_enter_critical+0x34>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	2b00      	cmp	r3, #0
     f0a:	d110      	bne.n	f2e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f0c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f10:	2b00      	cmp	r3, #0
     f12:	d109      	bne.n	f28 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     f14:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f16:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f1a:	2200      	movs	r2, #0
     f1c:	4b07      	ldr	r3, [pc, #28]	; (f3c <cpu_irq_enter_critical+0x38>)
     f1e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f20:	3201      	adds	r2, #1
     f22:	4b07      	ldr	r3, [pc, #28]	; (f40 <cpu_irq_enter_critical+0x3c>)
     f24:	701a      	strb	r2, [r3, #0]
     f26:	e002      	b.n	f2e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f28:	2200      	movs	r2, #0
     f2a:	4b05      	ldr	r3, [pc, #20]	; (f40 <cpu_irq_enter_critical+0x3c>)
     f2c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f2e:	4a02      	ldr	r2, [pc, #8]	; (f38 <cpu_irq_enter_critical+0x34>)
     f30:	6813      	ldr	r3, [r2, #0]
     f32:	3301      	adds	r3, #1
     f34:	6013      	str	r3, [r2, #0]
}
     f36:	4770      	bx	lr
     f38:	200000b4 	.word	0x200000b4
     f3c:	20000014 	.word	0x20000014
     f40:	200000b8 	.word	0x200000b8

00000f44 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f44:	4b08      	ldr	r3, [pc, #32]	; (f68 <cpu_irq_leave_critical+0x24>)
     f46:	681a      	ldr	r2, [r3, #0]
     f48:	3a01      	subs	r2, #1
     f4a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	2b00      	cmp	r3, #0
     f50:	d109      	bne.n	f66 <cpu_irq_leave_critical+0x22>
     f52:	4b06      	ldr	r3, [pc, #24]	; (f6c <cpu_irq_leave_critical+0x28>)
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b00      	cmp	r3, #0
     f58:	d005      	beq.n	f66 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f5a:	2201      	movs	r2, #1
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <cpu_irq_leave_critical+0x2c>)
     f5e:	701a      	strb	r2, [r3, #0]
     f60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f64:	b662      	cpsie	i
	}
}
     f66:	4770      	bx	lr
     f68:	200000b4 	.word	0x200000b4
     f6c:	200000b8 	.word	0x200000b8
     f70:	20000014 	.word	0x20000014

00000f74 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     f74:	b5f0      	push	{r4, r5, r6, r7, lr}
     f76:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     f78:	ac01      	add	r4, sp, #4
     f7a:	2501      	movs	r5, #1
     f7c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     f7e:	2700      	movs	r7, #0
     f80:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f82:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f84:	0021      	movs	r1, r4
     f86:	200f      	movs	r0, #15
     f88:	4e06      	ldr	r6, [pc, #24]	; (fa4 <system_board_init+0x30>)
     f8a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f8c:	2280      	movs	r2, #128	; 0x80
     f8e:	0212      	lsls	r2, r2, #8
     f90:	2382      	movs	r3, #130	; 0x82
     f92:	05db      	lsls	r3, r3, #23
     f94:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     f96:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     f98:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     f9a:	0021      	movs	r1, r4
     f9c:	201c      	movs	r0, #28
     f9e:	47b0      	blx	r6
}
     fa0:	b003      	add	sp, #12
     fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa4:	00001501 	.word	0x00001501

00000fa8 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     fa8:	6803      	ldr	r3, [r0, #0]
     faa:	4a0a      	ldr	r2, [pc, #40]	; (fd4 <_can_enable_peripheral_clock+0x2c>)
     fac:	4293      	cmp	r3, r2
     fae:	d106      	bne.n	fbe <_can_enable_peripheral_clock+0x16>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	MCLK->AHBMASK.reg |= ahb_mask;
     fb0:	4a09      	ldr	r2, [pc, #36]	; (fd8 <_can_enable_peripheral_clock+0x30>)
     fb2:	6913      	ldr	r3, [r2, #16]
     fb4:	2180      	movs	r1, #128	; 0x80
     fb6:	0049      	lsls	r1, r1, #1
     fb8:	430b      	orrs	r3, r1
     fba:	6113      	str	r3, [r2, #16]
     fbc:	e008      	b.n	fd0 <_can_enable_peripheral_clock+0x28>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     fbe:	4a07      	ldr	r2, [pc, #28]	; (fdc <_can_enable_peripheral_clock+0x34>)
     fc0:	4293      	cmp	r3, r2
     fc2:	d105      	bne.n	fd0 <_can_enable_peripheral_clock+0x28>
     fc4:	4a04      	ldr	r2, [pc, #16]	; (fd8 <_can_enable_peripheral_clock+0x30>)
     fc6:	6913      	ldr	r3, [r2, #16]
     fc8:	2180      	movs	r1, #128	; 0x80
     fca:	0089      	lsls	r1, r1, #2
     fcc:	430b      	orrs	r3, r1
     fce:	6113      	str	r3, [r2, #16]
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     fd0:	4770      	bx	lr
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	42001c00 	.word	0x42001c00
     fd8:	40000800 	.word	0x40000800
     fdc:	42002000 	.word	0x42002000

00000fe0 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	000c      	movs	r4, r1
     fe4:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     fe6:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     fe8:	4ba5      	ldr	r3, [pc, #660]	; (1280 <can_init+0x2a0>)
     fea:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     fec:	4ba5      	ldr	r3, [pc, #660]	; (1284 <can_init+0x2a4>)
     fee:	2200      	movs	r2, #0
     ff0:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     ff2:	782a      	ldrb	r2, [r5, #0]
     ff4:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     ff6:	4ba4      	ldr	r3, [pc, #656]	; (1288 <can_init+0x2a8>)
     ff8:	429c      	cmp	r4, r3
     ffa:	d13a      	bne.n	1072 <can_init+0x92>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
     ffc:	49a1      	ldr	r1, [pc, #644]	; (1284 <can_init+0x2a4>)
     ffe:	201a      	movs	r0, #26
    1000:	4ba2      	ldr	r3, [pc, #648]	; (128c <can_init+0x2ac>)
    1002:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    1004:	201a      	movs	r0, #26
    1006:	4ba2      	ldr	r3, [pc, #648]	; (1290 <can_init+0x2b0>)
    1008:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    100a:	4b9f      	ldr	r3, [pc, #636]	; (1288 <can_init+0x2a8>)
    100c:	6999      	ldr	r1, [r3, #24]
    100e:	2202      	movs	r2, #2
    1010:	430a      	orrs	r2, r1
    1012:	619a      	str	r2, [r3, #24]
static struct can_extended_message_filter_element can1_rx_extended_filter[CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM];

static void _can_message_memory_init(Can *hw)
{
	if (hw == CAN0) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    1014:	4a9f      	ldr	r2, [pc, #636]	; (1294 <can_init+0x2b4>)
    1016:	0412      	lsls	r2, r2, #16
    1018:	0c12      	lsrs	r2, r2, #16
    101a:	2080      	movs	r0, #128	; 0x80
    101c:	02c0      	lsls	r0, r0, #11
    101e:	4302      	orrs	r2, r0
    1020:	2184      	movs	r1, #132	; 0x84
    1022:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN0_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    1024:	4a9c      	ldr	r2, [pc, #624]	; (1298 <can_init+0x2b8>)
    1026:	0412      	lsls	r2, r2, #16
    1028:	0c12      	lsrs	r2, r2, #16
    102a:	2180      	movs	r1, #128	; 0x80
    102c:	0289      	lsls	r1, r1, #10
    102e:	430a      	orrs	r2, r1
    1030:	2188      	movs	r1, #136	; 0x88
    1032:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN0_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    1034:	4a99      	ldr	r2, [pc, #612]	; (129c <can_init+0x2bc>)
    1036:	0412      	lsls	r2, r2, #16
    1038:	0c12      	lsrs	r2, r2, #16
    103a:	4302      	orrs	r2, r0
    103c:	3118      	adds	r1, #24
    103e:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    1040:	4997      	ldr	r1, [pc, #604]	; (12a0 <can_init+0x2c0>)
    1042:	0409      	lsls	r1, r1, #16
    1044:	0c09      	lsrs	r1, r1, #16
    1046:	4301      	orrs	r1, r0
    1048:	22b0      	movs	r2, #176	; 0xb0
    104a:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    104c:	4a95      	ldr	r2, [pc, #596]	; (12a4 <can_init+0x2c4>)
    104e:	0412      	lsls	r2, r2, #16
    1050:	0c12      	lsrs	r2, r2, #16
    1052:	21ac      	movs	r1, #172	; 0xac
    1054:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    1056:	4994      	ldr	r1, [pc, #592]	; (12a8 <can_init+0x2c8>)
    1058:	0409      	lsls	r1, r1, #16
    105a:	0c09      	lsrs	r1, r1, #16
    105c:	4a93      	ldr	r2, [pc, #588]	; (12ac <can_init+0x2cc>)
    105e:	4311      	orrs	r1, r2
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
				CAN_RXF0C_F0S(CONF_CAN0_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN0_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    1060:	22c0      	movs	r2, #192	; 0xc0
    1062:	5099      	str	r1, [r3, r2]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    1064:	4a92      	ldr	r2, [pc, #584]	; (12b0 <can_init+0x2d0>)
    1066:	0412      	lsls	r2, r2, #16
    1068:	0c12      	lsrs	r2, r2, #16
    106a:	4302      	orrs	r2, r0
    106c:	21f0      	movs	r1, #240	; 0xf0
    106e:	505a      	str	r2, [r3, r1]
    1070:	e03d      	b.n	10ee <can_init+0x10e>
	gclk_chan_conf.source_generator = config->clock_source;

	if (hw == CAN0) {
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    1072:	4b90      	ldr	r3, [pc, #576]	; (12b4 <can_init+0x2d4>)
    1074:	429c      	cmp	r4, r3
    1076:	d000      	beq.n	107a <can_init+0x9a>
    1078:	e0fb      	b.n	1272 <can_init+0x292>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    107a:	4982      	ldr	r1, [pc, #520]	; (1284 <can_init+0x2a4>)
    107c:	201b      	movs	r0, #27
    107e:	4b83      	ldr	r3, [pc, #524]	; (128c <can_init+0x2ac>)
    1080:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    1082:	201b      	movs	r0, #27
    1084:	4b82      	ldr	r3, [pc, #520]	; (1290 <can_init+0x2b0>)
    1086:	4798      	blx	r3
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1088:	4b8a      	ldr	r3, [pc, #552]	; (12b4 <can_init+0x2d4>)
    108a:	6999      	ldr	r1, [r3, #24]
    108c:	2202      	movs	r2, #2
    108e:	430a      	orrs	r2, r1
    1090:	619a      	str	r2, [r3, #24]
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN0_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
				CAN_TXEFC_EFS(CONF_CAN0_TX_EVENT_FIFO);
	} else if (hw == CAN1) {
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    1092:	4a89      	ldr	r2, [pc, #548]	; (12b8 <can_init+0x2d8>)
    1094:	0412      	lsls	r2, r2, #16
    1096:	0c12      	lsrs	r2, r2, #16
    1098:	2080      	movs	r0, #128	; 0x80
    109a:	02c0      	lsls	r0, r0, #11
    109c:	4302      	orrs	r2, r0
    109e:	2184      	movs	r1, #132	; 0x84
    10a0:	505a      	str	r2, [r3, r1]
				CAN_SIDFC_LSS(CONF_CAN1_RX_STANDARD_ID_FILTER_NUM);
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    10a2:	4a86      	ldr	r2, [pc, #536]	; (12bc <can_init+0x2dc>)
    10a4:	0412      	lsls	r2, r2, #16
    10a6:	0c12      	lsrs	r2, r2, #16
    10a8:	2180      	movs	r1, #128	; 0x80
    10aa:	0289      	lsls	r1, r1, #10
    10ac:	430a      	orrs	r2, r1
    10ae:	2188      	movs	r1, #136	; 0x88
    10b0:	505a      	str	r2, [r3, r1]
				CAN_XIDFC_LSE(CONF_CAN1_RX_EXTENDED_ID_FILTER_NUM);
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    10b2:	4a83      	ldr	r2, [pc, #524]	; (12c0 <can_init+0x2e0>)
    10b4:	0412      	lsls	r2, r2, #16
    10b6:	0c12      	lsrs	r2, r2, #16
    10b8:	4302      	orrs	r2, r0
    10ba:	3118      	adds	r1, #24
    10bc:	505a      	str	r2, [r3, r1]
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    10be:	4981      	ldr	r1, [pc, #516]	; (12c4 <can_init+0x2e4>)
    10c0:	0409      	lsls	r1, r1, #16
    10c2:	0c09      	lsrs	r1, r1, #16
    10c4:	4301      	orrs	r1, r0
    10c6:	22b0      	movs	r2, #176	; 0xb0
    10c8:	5099      	str	r1, [r3, r2]
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    10ca:	4a7f      	ldr	r2, [pc, #508]	; (12c8 <can_init+0x2e8>)
    10cc:	0412      	lsls	r2, r2, #16
    10ce:	0c12      	lsrs	r2, r2, #16
    10d0:	21ac      	movs	r1, #172	; 0xac
    10d2:	505a      	str	r2, [r3, r1]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    10d4:	497d      	ldr	r1, [pc, #500]	; (12cc <can_init+0x2ec>)
    10d6:	0409      	lsls	r1, r1, #16
    10d8:	0c09      	lsrs	r1, r1, #16
    10da:	4a74      	ldr	r2, [pc, #464]	; (12ac <can_init+0x2cc>)
    10dc:	4311      	orrs	r1, r2
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
				CAN_RXF0C_F0S(CONF_CAN1_RX_FIFO_0_NUM);
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
				CAN_RXF1C_F1S(CONF_CAN1_RX_FIFO_1_NUM);
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    10de:	22c0      	movs	r2, #192	; 0xc0
    10e0:	5099      	str	r1, [r3, r2]
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
				CAN_TXBC_TFQS(CONF_CAN1_TX_FIFO_QUEUE_NUM);
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    10e2:	4a7b      	ldr	r2, [pc, #492]	; (12d0 <can_init+0x2f0>)
    10e4:	0412      	lsls	r2, r2, #16
    10e6:	0c12      	lsrs	r2, r2, #16
    10e8:	4302      	orrs	r2, r0
    10ea:	21f0      	movs	r1, #240	; 0xf0
    10ec:	505a      	str	r2, [r3, r1]
	 * The corresponding setting value in register is 0/1//2/3/4/5/6/7.
	 * To simplify the calculation, seperate to two group 8/12/16/20/24 which
	 * increased with 4 and 32/48/64 which increased with 16.
	 */
	if (CONF_CAN_ELEMENT_DATA_SIZE <= 24) {
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    10ee:	4a79      	ldr	r2, [pc, #484]	; (12d4 <can_init+0x2f4>)
    10f0:	23bc      	movs	r3, #188	; 0xbc
    10f2:	50e2      	str	r2, [r4, r3]
				CAN_RXESC_F0DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
				CAN_RXESC_F1DS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    10f4:	2203      	movs	r2, #3
    10f6:	330c      	adds	r3, #12
    10f8:	50e2      	str	r2, [r4, r3]
}

static void _can_set_configuration(Can *hw, struct can_config *config)
{
	/* Timing setting. */
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    10fa:	4b77      	ldr	r3, [pc, #476]	; (12d8 <can_init+0x2f8>)
    10fc:	61e3      	str	r3, [r4, #28]
			CAN_NBTP_NSJW(CONF_CAN_NBTP_NSJW_VALUE) |
			CAN_NBTP_NTSEG1(CONF_CAN_NBTP_NTSEG1_VALUE) |
			CAN_NBTP_NTSEG2(CONF_CAN_NBTP_NTSEG2_VALUE);
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    10fe:	4b77      	ldr	r3, [pc, #476]	; (12dc <can_init+0x2fc>)
    1100:	60e3      	str	r3, [r4, #12]
			CAN_DBTP_DSJW(CONF_CAN_DBTP_DSJW_VALUE) |
			CAN_DBTP_DTSEG1(CONF_CAN_DBTP_DTSEG1_VALUE) |
			CAN_DBTP_DTSEG2(CONF_CAN_DBTP_DTSEG2_VALUE);

	if (config->tdc_enable) {
    1102:	7bab      	ldrb	r3, [r5, #14]
    1104:	2b00      	cmp	r3, #0
    1106:	d004      	beq.n	1112 <can_init+0x132>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    1108:	68e3      	ldr	r3, [r4, #12]
    110a:	2280      	movs	r2, #128	; 0x80
    110c:	0412      	lsls	r2, r2, #16
    110e:	4313      	orrs	r3, r2
    1110:	60e3      	str	r3, [r4, #12]
	}
	
	if (config->run_in_standby) {
    1112:	786b      	ldrb	r3, [r5, #1]
    1114:	2b00      	cmp	r3, #0
    1116:	d003      	beq.n	1120 <can_init+0x140>
		hw->MRCFG.reg |= 0x01<<6;
    1118:	68a2      	ldr	r2, [r4, #8]
    111a:	2340      	movs	r3, #64	; 0x40
    111c:	4313      	orrs	r3, r2
    111e:	60a3      	str	r3, [r4, #8]
	}

	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    1120:	6963      	ldr	r3, [r4, #20]
    1122:	78aa      	ldrb	r2, [r5, #2]
    1124:	4313      	orrs	r3, r2
    1126:	6163      	str	r3, [r4, #20]

	if (config->transmit_pause) {
    1128:	78eb      	ldrb	r3, [r5, #3]
    112a:	2b00      	cmp	r3, #0
    112c:	d004      	beq.n	1138 <can_init+0x158>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    112e:	69a3      	ldr	r3, [r4, #24]
    1130:	2280      	movs	r2, #128	; 0x80
    1132:	01d2      	lsls	r2, r2, #7
    1134:	4313      	orrs	r3, r2
    1136:	61a3      	str	r3, [r4, #24]
	}

	if (config->edge_filtering) {
    1138:	792b      	ldrb	r3, [r5, #4]
    113a:	2b00      	cmp	r3, #0
    113c:	d004      	beq.n	1148 <can_init+0x168>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    113e:	69a3      	ldr	r3, [r4, #24]
    1140:	2280      	movs	r2, #128	; 0x80
    1142:	0192      	lsls	r2, r2, #6
    1144:	4313      	orrs	r3, r2
    1146:	61a3      	str	r3, [r4, #24]
	}

	if (config->protocol_exception_handling) {
    1148:	796b      	ldrb	r3, [r5, #5]
    114a:	2b00      	cmp	r3, #0
    114c:	d004      	beq.n	1158 <can_init+0x178>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    114e:	69a3      	ldr	r3, [r4, #24]
    1150:	2280      	movs	r2, #128	; 0x80
    1152:	0152      	lsls	r2, r2, #5
    1154:	4313      	orrs	r3, r2
    1156:	61a3      	str	r3, [r4, #24]
	}

	if (!config->automatic_retransmission) {
    1158:	79ab      	ldrb	r3, [r5, #6]
    115a:	2b00      	cmp	r3, #0
    115c:	d103      	bne.n	1166 <can_init+0x186>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    115e:	69a2      	ldr	r2, [r4, #24]
    1160:	3340      	adds	r3, #64	; 0x40
    1162:	4313      	orrs	r3, r2
    1164:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_request) {
    1166:	79eb      	ldrb	r3, [r5, #7]
    1168:	2b00      	cmp	r3, #0
    116a:	d003      	beq.n	1174 <can_init+0x194>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    116c:	69a2      	ldr	r2, [r4, #24]
    116e:	2310      	movs	r3, #16
    1170:	4313      	orrs	r3, r2
    1172:	61a3      	str	r3, [r4, #24]
	}

	if (config->clock_stop_acknowledge) {
    1174:	7a2b      	ldrb	r3, [r5, #8]
    1176:	2b00      	cmp	r3, #0
    1178:	d003      	beq.n	1182 <can_init+0x1a2>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    117a:	69a2      	ldr	r2, [r4, #24]
    117c:	2308      	movs	r3, #8
    117e:	4313      	orrs	r3, r2
    1180:	61a3      	str	r3, [r4, #24]
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    1182:	7a6b      	ldrb	r3, [r5, #9]
    1184:	041b      	lsls	r3, r3, #16
    1186:	22f0      	movs	r2, #240	; 0xf0
    1188:	0312      	lsls	r2, r2, #12
    118a:	4013      	ands	r3, r2
    118c:	2201      	movs	r2, #1
    118e:	4313      	orrs	r3, r2
    1190:	6223      	str	r3, [r4, #32]
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
			config->timeout_mode | config->timeout_enable;
    1192:	7b2a      	ldrb	r2, [r5, #12]
    1194:	7b6b      	ldrb	r3, [r5, #13]
    1196:	4313      	orrs	r3, r2
    1198:	896a      	ldrh	r2, [r5, #10]
    119a:	0412      	lsls	r2, r2, #16
    119c:	4313      	orrs	r3, r2
	}

	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
			CAN_TSCC_TSS_INC_Val;

	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    119e:	62a3      	str	r3, [r4, #40]	; 0x28
			config->timeout_mode | config->timeout_enable;

	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    11a0:	7beb      	ldrb	r3, [r5, #15]
    11a2:	021b      	lsls	r3, r3, #8
    11a4:	22fe      	movs	r2, #254	; 0xfe
    11a6:	01d2      	lsls	r2, r2, #7
    11a8:	4013      	ands	r3, r2
    11aa:	0019      	movs	r1, r3
    11ac:	7c2a      	ldrb	r2, [r5, #16]
    11ae:	237f      	movs	r3, #127	; 0x7f
    11b0:	401a      	ands	r2, r3
    11b2:	000b      	movs	r3, r1
    11b4:	4313      	orrs	r3, r2
    11b6:	64a3      	str	r3, [r4, #72]	; 0x48
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);

	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    11b8:	7c6b      	ldrb	r3, [r5, #17]
    11ba:	011b      	lsls	r3, r3, #4
    11bc:	2130      	movs	r1, #48	; 0x30
    11be:	4019      	ands	r1, r3
    11c0:	7caa      	ldrb	r2, [r5, #18]
    11c2:	0092      	lsls	r2, r2, #2
    11c4:	230c      	movs	r3, #12
    11c6:	4013      	ands	r3, r2
    11c8:	430b      	orrs	r3, r1
    11ca:	2280      	movs	r2, #128	; 0x80
    11cc:	50a3      	str	r3, [r4, r2]
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
	if (config->remote_frames_standard_reject) {
    11ce:	7ceb      	ldrb	r3, [r5, #19]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d003      	beq.n	11dc <can_init+0x1fc>
		hw->GFC.reg |= CAN_GFC_RRFS;
    11d4:	58a1      	ldr	r1, [r4, r2]
    11d6:	2302      	movs	r3, #2
    11d8:	430b      	orrs	r3, r1
    11da:	50a3      	str	r3, [r4, r2]
	}
	if (config->remote_frames_extended_reject) {
    11dc:	7d2b      	ldrb	r3, [r5, #20]
    11de:	2b00      	cmp	r3, #0
    11e0:	d004      	beq.n	11ec <can_init+0x20c>
		hw->GFC.reg |= CAN_GFC_RRFE;
    11e2:	2280      	movs	r2, #128	; 0x80
    11e4:	58a1      	ldr	r1, [r4, r2]
    11e6:	2301      	movs	r3, #1
    11e8:	430b      	orrs	r3, r1
    11ea:	50a3      	str	r3, [r4, r2]
	}

	hw->XIDAM.reg = config->extended_id_mask;
    11ec:	2390      	movs	r3, #144	; 0x90
    11ee:	69aa      	ldr	r2, [r5, #24]
    11f0:	50e2      	str	r2, [r4, r3]

	if (config->rx_fifo_0_overwrite) {
    11f2:	7f2b      	ldrb	r3, [r5, #28]
    11f4:	2b00      	cmp	r3, #0
    11f6:	d005      	beq.n	1204 <can_init+0x224>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    11f8:	22a0      	movs	r2, #160	; 0xa0
    11fa:	58a3      	ldr	r3, [r4, r2]
    11fc:	2180      	movs	r1, #128	; 0x80
    11fe:	0609      	lsls	r1, r1, #24
    1200:	430b      	orrs	r3, r1
    1202:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    1204:	20a0      	movs	r0, #160	; 0xa0
    1206:	5822      	ldr	r2, [r4, r0]
    1208:	7f6b      	ldrb	r3, [r5, #29]
    120a:	061b      	lsls	r3, r3, #24
    120c:	21fe      	movs	r1, #254	; 0xfe
    120e:	05c9      	lsls	r1, r1, #23
    1210:	400b      	ands	r3, r1
    1212:	4313      	orrs	r3, r2
    1214:	5023      	str	r3, [r4, r0]

	if (config->rx_fifo_1_overwrite) {
    1216:	7fab      	ldrb	r3, [r5, #30]
    1218:	2b00      	cmp	r3, #0
    121a:	d005      	beq.n	1228 <can_init+0x248>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    121c:	22b0      	movs	r2, #176	; 0xb0
    121e:	58a3      	ldr	r3, [r4, r2]
    1220:	2180      	movs	r1, #128	; 0x80
    1222:	0609      	lsls	r1, r1, #24
    1224:	430b      	orrs	r3, r1
    1226:	50a3      	str	r3, [r4, r2]
	}
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    1228:	20b0      	movs	r0, #176	; 0xb0
    122a:	5822      	ldr	r2, [r4, r0]
    122c:	7feb      	ldrb	r3, [r5, #31]
    122e:	061b      	lsls	r3, r3, #24
    1230:	21fe      	movs	r1, #254	; 0xfe
    1232:	05c9      	lsls	r1, r1, #23
    1234:	400b      	ands	r3, r1
    1236:	4313      	orrs	r3, r2
    1238:	5023      	str	r3, [r4, r0]

	if (config->tx_queue_mode) {
    123a:	2320      	movs	r3, #32
    123c:	5ceb      	ldrb	r3, [r5, r3]
    123e:	2b00      	cmp	r3, #0
    1240:	d005      	beq.n	124e <can_init+0x26e>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    1242:	22c0      	movs	r2, #192	; 0xc0
    1244:	58a3      	ldr	r3, [r4, r2]
    1246:	2180      	movs	r1, #128	; 0x80
    1248:	05c9      	lsls	r1, r1, #23
    124a:	430b      	orrs	r3, r1
    124c:	50a3      	str	r3, [r4, r2]
	}

	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    124e:	20f0      	movs	r0, #240	; 0xf0
    1250:	5822      	ldr	r2, [r4, r0]
    1252:	2321      	movs	r3, #33	; 0x21
    1254:	5ceb      	ldrb	r3, [r5, r3]
    1256:	061b      	lsls	r3, r3, #24
    1258:	21fc      	movs	r1, #252	; 0xfc
    125a:	0589      	lsls	r1, r1, #22
    125c:	400b      	ands	r3, r1
    125e:	4313      	orrs	r3, r2
    1260:	5023      	str	r3, [r4, r0]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    1262:	2303      	movs	r3, #3
    1264:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    1266:	3b04      	subs	r3, #4
    1268:	22e0      	movs	r2, #224	; 0xe0
    126a:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    126c:	3204      	adds	r2, #4
    126e:	50a3      	str	r3, [r4, r2]
}
    1270:	e004      	b.n	127c <can_init+0x29c>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1272:	69a2      	ldr	r2, [r4, #24]
    1274:	2302      	movs	r3, #2
    1276:	4313      	orrs	r3, r2
    1278:	61a3      	str	r3, [r4, #24]
    127a:	e738      	b.n	10ee <can_init+0x10e>

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
}
    127c:	bd70      	pop	{r4, r5, r6, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00000fa9 	.word	0x00000fa9
    1284:	20000630 	.word	0x20000630
    1288:	42001c00 	.word	0x42001c00
    128c:	00002551 	.word	0x00002551
    1290:	000024e1 	.word	0x000024e1
    1294:	2000023c 	.word	0x2000023c
    1298:	2000021c 	.word	0x2000021c
    129c:	2000044c 	.word	0x2000044c
    12a0:	200000bc 	.word	0x200000bc
    12a4:	2000039c 	.word	0x2000039c
    12a8:	200002bc 	.word	0x200002bc
    12ac:	02020000 	.word	0x02020000
    12b0:	2000042c 	.word	0x2000042c
    12b4:	42002000 	.word	0x42002000
    12b8:	2000022c 	.word	0x2000022c
    12bc:	2000020c 	.word	0x2000020c
    12c0:	2000012c 	.word	0x2000012c
    12c4:	2000019c 	.word	0x2000019c
    12c8:	2000032c 	.word	0x2000032c
    12cc:	2000024c 	.word	0x2000024c
    12d0:	2000040c 	.word	0x2000040c
    12d4:	00000333 	.word	0x00000333
    12d8:	06050a03 	.word	0x06050a03
    12dc:	00000a33 	.word	0x00000a33

000012e0 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    12e0:	6802      	ldr	r2, [r0, #0]
    12e2:	6993      	ldr	r3, [r2, #24]
    12e4:	2101      	movs	r1, #1
    12e6:	438b      	bics	r3, r1
    12e8:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    12ea:	6801      	ldr	r1, [r0, #0]
    12ec:	2201      	movs	r2, #1
    12ee:	698b      	ldr	r3, [r1, #24]
    12f0:	421a      	tst	r2, r3
    12f2:	d1fc      	bne.n	12ee <can_start+0xe>
}
    12f4:	4770      	bx	lr
    12f6:	46c0      	nop			; (mov r8, r8)

000012f8 <can_enable_fd_mode>:
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
}

void can_enable_fd_mode(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg |= CAN_CCCR_INIT;
    12f8:	6802      	ldr	r2, [r0, #0]
    12fa:	6991      	ldr	r1, [r2, #24]
    12fc:	2301      	movs	r3, #1
    12fe:	430b      	orrs	r3, r1
    1300:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (!(module_inst->hw->CCCR.reg & CAN_CCCR_INIT));
    1302:	6802      	ldr	r2, [r0, #0]
    1304:	2101      	movs	r1, #1
    1306:	6993      	ldr	r3, [r2, #24]
    1308:	4219      	tst	r1, r3
    130a:	d0fc      	beq.n	1306 <can_enable_fd_mode+0xe>
	module_inst->hw->CCCR.reg |= CAN_CCCR_CCE;
    130c:	6991      	ldr	r1, [r2, #24]
    130e:	2302      	movs	r3, #2
    1310:	430b      	orrs	r3, r1
    1312:	6193      	str	r3, [r2, #24]

	module_inst->hw->CCCR.reg |= CAN_CCCR_FDOE;
    1314:	6802      	ldr	r2, [r0, #0]
    1316:	6993      	ldr	r3, [r2, #24]
    1318:	2180      	movs	r1, #128	; 0x80
    131a:	0049      	lsls	r1, r1, #1
    131c:	430b      	orrs	r3, r1
    131e:	6193      	str	r3, [r2, #24]
	module_inst->hw->CCCR.reg |= CAN_CCCR_BRSE;
    1320:	6802      	ldr	r2, [r0, #0]
    1322:	6993      	ldr	r3, [r2, #24]
    1324:	3101      	adds	r1, #1
    1326:	31ff      	adds	r1, #255	; 0xff
    1328:	430b      	orrs	r3, r1
    132a:	6193      	str	r3, [r2, #24]
}
    132c:	4770      	bx	lr
    132e:	46c0      	nop			; (mov r8, r8)

00001330 <can_set_rx_extended_filter>:
}

enum status_code can_set_rx_extended_filter(
		struct can_module *const module_inst,
		struct can_extended_message_filter_element *et_filter, uint32_t index)
{
    1330:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    1332:	6803      	ldr	r3, [r0, #0]
    1334:	480c      	ldr	r0, [pc, #48]	; (1368 <can_set_rx_extended_filter+0x38>)
    1336:	4283      	cmp	r3, r0
    1338:	d108      	bne.n	134c <can_set_rx_extended_filter+0x1c>
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    133a:	6808      	ldr	r0, [r1, #0]
    133c:	4b0b      	ldr	r3, [pc, #44]	; (136c <can_set_rx_extended_filter+0x3c>)
    133e:	00d2      	lsls	r2, r2, #3
    1340:	50d0      	str	r0, [r2, r3]
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    1342:	6849      	ldr	r1, [r1, #4]
    1344:	189a      	adds	r2, r3, r2
    1346:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    1348:	2000      	movs	r0, #0
    134a:	e00b      	b.n	1364 <can_set_rx_extended_filter+0x34>
	} else if (module_inst->hw == CAN1) {
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    134c:	2017      	movs	r0, #23
{
	if (module_inst->hw == CAN0) {
		can0_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
		can0_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    134e:	4c08      	ldr	r4, [pc, #32]	; (1370 <can_set_rx_extended_filter+0x40>)
    1350:	42a3      	cmp	r3, r4
    1352:	d107      	bne.n	1364 <can_set_rx_extended_filter+0x34>
		can1_rx_extended_filter[index].F0.reg = et_filter->F0.reg;
    1354:	6808      	ldr	r0, [r1, #0]
    1356:	4b07      	ldr	r3, [pc, #28]	; (1374 <can_set_rx_extended_filter+0x44>)
    1358:	00d2      	lsls	r2, r2, #3
    135a:	50d0      	str	r0, [r2, r3]
		can1_rx_extended_filter[index].F1.reg = et_filter->F1.reg;
    135c:	6849      	ldr	r1, [r1, #4]
    135e:	189a      	adds	r2, r3, r2
    1360:	6051      	str	r1, [r2, #4]
		return STATUS_OK;
    1362:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    1364:	bd10      	pop	{r4, pc}
    1366:	46c0      	nop			; (mov r8, r8)
    1368:	42001c00 	.word	0x42001c00
    136c:	2000021c 	.word	0x2000021c
    1370:	42002000 	.word	0x42002000
    1374:	2000020c 	.word	0x2000020c

00001378 <can_get_rx_buffer_element>:

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1378:	b510      	push	{r4, lr}
    137a:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    137c:	6803      	ldr	r3, [r0, #0]
    137e:	490e      	ldr	r1, [pc, #56]	; (13b8 <can_get_rx_buffer_element+0x40>)
    1380:	428b      	cmp	r3, r1
    1382:	d10a      	bne.n	139a <can_get_rx_buffer_element+0x22>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    1384:	00d1      	lsls	r1, r2, #3
    1386:	1a89      	subs	r1, r1, r2
    1388:	008a      	lsls	r2, r1, #2
    138a:	490c      	ldr	r1, [pc, #48]	; (13bc <can_get_rx_buffer_element+0x44>)
    138c:	1889      	adds	r1, r1, r2
    138e:	221c      	movs	r2, #28
    1390:	0020      	movs	r0, r4
    1392:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <can_get_rx_buffer_element+0x48>)
    1394:	4798      	blx	r3
		return STATUS_OK;
    1396:	2000      	movs	r0, #0
    1398:	e00d      	b.n	13b6 <can_get_rx_buffer_element+0x3e>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    139a:	2017      	movs	r0, #23
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    139c:	4909      	ldr	r1, [pc, #36]	; (13c4 <can_get_rx_buffer_element+0x4c>)
    139e:	428b      	cmp	r3, r1
    13a0:	d109      	bne.n	13b6 <can_get_rx_buffer_element+0x3e>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    13a2:	00d1      	lsls	r1, r2, #3
    13a4:	1a89      	subs	r1, r1, r2
    13a6:	008a      	lsls	r2, r1, #2
    13a8:	4907      	ldr	r1, [pc, #28]	; (13c8 <can_get_rx_buffer_element+0x50>)
    13aa:	1889      	adds	r1, r1, r2
    13ac:	221c      	movs	r2, #28
    13ae:	0020      	movs	r0, r4
    13b0:	4b03      	ldr	r3, [pc, #12]	; (13c0 <can_get_rx_buffer_element+0x48>)
    13b2:	4798      	blx	r3
		return STATUS_OK;
    13b4:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    13b6:	bd10      	pop	{r4, pc}
    13b8:	42001c00 	.word	0x42001c00
    13bc:	2000039c 	.word	0x2000039c
    13c0:	00003c99 	.word	0x00003c99
    13c4:	42002000 	.word	0x42002000
    13c8:	2000032c 	.word	0x2000032c

000013cc <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    13cc:	b510      	push	{r4, lr}
    13ce:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    13d0:	6803      	ldr	r3, [r0, #0]
    13d2:	490e      	ldr	r1, [pc, #56]	; (140c <can_get_rx_fifo_0_element+0x40>)
    13d4:	428b      	cmp	r3, r1
    13d6:	d10a      	bne.n	13ee <can_get_rx_fifo_0_element+0x22>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    13d8:	00d1      	lsls	r1, r2, #3
    13da:	1a89      	subs	r1, r1, r2
    13dc:	008a      	lsls	r2, r1, #2
    13de:	490c      	ldr	r1, [pc, #48]	; (1410 <can_get_rx_fifo_0_element+0x44>)
    13e0:	1889      	adds	r1, r1, r2
    13e2:	221c      	movs	r2, #28
    13e4:	0020      	movs	r0, r4
    13e6:	4b0b      	ldr	r3, [pc, #44]	; (1414 <can_get_rx_fifo_0_element+0x48>)
    13e8:	4798      	blx	r3
		return STATUS_OK;
    13ea:	2000      	movs	r0, #0
    13ec:	e00d      	b.n	140a <can_get_rx_fifo_0_element+0x3e>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    13ee:	2017      	movs	r0, #23
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    13f0:	4909      	ldr	r1, [pc, #36]	; (1418 <can_get_rx_fifo_0_element+0x4c>)
    13f2:	428b      	cmp	r3, r1
    13f4:	d109      	bne.n	140a <can_get_rx_fifo_0_element+0x3e>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    13f6:	00d1      	lsls	r1, r2, #3
    13f8:	1a89      	subs	r1, r1, r2
    13fa:	008a      	lsls	r2, r1, #2
    13fc:	4907      	ldr	r1, [pc, #28]	; (141c <can_get_rx_fifo_0_element+0x50>)
    13fe:	1889      	adds	r1, r1, r2
    1400:	221c      	movs	r2, #28
    1402:	0020      	movs	r0, r4
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <can_get_rx_fifo_0_element+0x48>)
    1406:	4798      	blx	r3
		return STATUS_OK;
    1408:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    140a:	bd10      	pop	{r4, pc}
    140c:	42001c00 	.word	0x42001c00
    1410:	2000044c 	.word	0x2000044c
    1414:	00003c99 	.word	0x00003c99
    1418:	42002000 	.word	0x42002000
    141c:	2000012c 	.word	0x2000012c

00001420 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    1420:	b510      	push	{r4, lr}
    1422:	000c      	movs	r4, r1
	if (module_inst->hw == CAN0) {
    1424:	6803      	ldr	r3, [r0, #0]
    1426:	490e      	ldr	r1, [pc, #56]	; (1460 <can_get_rx_fifo_1_element+0x40>)
    1428:	428b      	cmp	r3, r1
    142a:	d10a      	bne.n	1442 <can_get_rx_fifo_1_element+0x22>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    142c:	00d1      	lsls	r1, r2, #3
    142e:	1a89      	subs	r1, r1, r2
    1430:	008a      	lsls	r2, r1, #2
    1432:	490c      	ldr	r1, [pc, #48]	; (1464 <can_get_rx_fifo_1_element+0x44>)
    1434:	1889      	adds	r1, r1, r2
    1436:	221c      	movs	r2, #28
    1438:	0020      	movs	r0, r4
    143a:	4b0b      	ldr	r3, [pc, #44]	; (1468 <can_get_rx_fifo_1_element+0x48>)
    143c:	4798      	blx	r3
		return STATUS_OK;
    143e:	2000      	movs	r0, #0
    1440:	e00d      	b.n	145e <can_get_rx_fifo_1_element+0x3e>
	} else if (module_inst->hw == CAN1) {
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1442:	2017      	movs	r0, #23
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
	if (module_inst->hw == CAN0) {
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1444:	4909      	ldr	r1, [pc, #36]	; (146c <can_get_rx_fifo_1_element+0x4c>)
    1446:	428b      	cmp	r3, r1
    1448:	d109      	bne.n	145e <can_get_rx_fifo_1_element+0x3e>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    144a:	00d1      	lsls	r1, r2, #3
    144c:	1a89      	subs	r1, r1, r2
    144e:	008a      	lsls	r2, r1, #2
    1450:	4907      	ldr	r1, [pc, #28]	; (1470 <can_get_rx_fifo_1_element+0x50>)
    1452:	1889      	adds	r1, r1, r2
    1454:	221c      	movs	r2, #28
    1456:	0020      	movs	r0, r4
    1458:	4b03      	ldr	r3, [pc, #12]	; (1468 <can_get_rx_fifo_1_element+0x48>)
    145a:	4798      	blx	r3
		return STATUS_OK;
    145c:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    145e:	bd10      	pop	{r4, pc}
    1460:	42001c00 	.word	0x42001c00
    1464:	200000bc 	.word	0x200000bc
    1468:	00003c99 	.word	0x00003c99
    146c:	42002000 	.word	0x42002000
    1470:	2000019c 	.word	0x2000019c

00001474 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    1474:	b530      	push	{r4, r5, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    1476:	6803      	ldr	r3, [r0, #0]
    1478:	4d1d      	ldr	r5, [pc, #116]	; (14f0 <can_set_tx_buffer_element+0x7c>)
    147a:	42ab      	cmp	r3, r5
    147c:	d119      	bne.n	14b2 <can_set_tx_buffer_element+0x3e>
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    147e:	680d      	ldr	r5, [r1, #0]
    1480:	4c1c      	ldr	r4, [pc, #112]	; (14f4 <can_set_tx_buffer_element+0x80>)
    1482:	00d0      	lsls	r0, r2, #3
    1484:	1a83      	subs	r3, r0, r2
    1486:	009b      	lsls	r3, r3, #2
    1488:	511d      	str	r5, [r3, r4]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    148a:	684d      	ldr	r5, [r1, #4]
    148c:	1a83      	subs	r3, r0, r2
    148e:	009b      	lsls	r3, r3, #2
    1490:	18e3      	adds	r3, r4, r3
    1492:	605d      	str	r5, [r3, #4]
    1494:	000b      	movs	r3, r1
    1496:	3308      	adds	r3, #8
    1498:	1a80      	subs	r0, r0, r2
    149a:	0080      	lsls	r0, r0, #2
    149c:	3008      	adds	r0, #8
    149e:	1822      	adds	r2, r4, r0
    14a0:	311c      	adds	r1, #28
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    14a2:	7818      	ldrb	r0, [r3, #0]
    14a4:	7010      	strb	r0, [r2, #0]
    14a6:	3301      	adds	r3, #1
    14a8:	3201      	adds	r2, #1
{
	uint32_t i;
	if (module_inst->hw == CAN0) {
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14aa:	428b      	cmp	r3, r1
    14ac:	d1f9      	bne.n	14a2 <can_set_tx_buffer_element+0x2e>
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    14ae:	2000      	movs	r0, #0
    14b0:	e01d      	b.n	14ee <can_set_tx_buffer_element+0x7a>
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    14b2:	2017      	movs	r0, #23
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    14b4:	4c10      	ldr	r4, [pc, #64]	; (14f8 <can_set_tx_buffer_element+0x84>)
    14b6:	42a3      	cmp	r3, r4
    14b8:	d119      	bne.n	14ee <can_set_tx_buffer_element+0x7a>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    14ba:	680d      	ldr	r5, [r1, #0]
    14bc:	480f      	ldr	r0, [pc, #60]	; (14fc <can_set_tx_buffer_element+0x88>)
    14be:	00d4      	lsls	r4, r2, #3
    14c0:	1aa3      	subs	r3, r4, r2
    14c2:	009b      	lsls	r3, r3, #2
    14c4:	501d      	str	r5, [r3, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    14c6:	684d      	ldr	r5, [r1, #4]
    14c8:	1aa3      	subs	r3, r4, r2
    14ca:	009b      	lsls	r3, r3, #2
    14cc:	18c3      	adds	r3, r0, r3
    14ce:	605d      	str	r5, [r3, #4]
    14d0:	000b      	movs	r3, r1
    14d2:	3308      	adds	r3, #8
    14d4:	1aa4      	subs	r4, r4, r2
    14d6:	00a4      	lsls	r4, r4, #2
    14d8:	0022      	movs	r2, r4
    14da:	3208      	adds	r2, #8
    14dc:	1882      	adds	r2, r0, r2
    14de:	311c      	adds	r1, #28
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    14e0:	7818      	ldrb	r0, [r3, #0]
    14e2:	7010      	strb	r0, [r2, #0]
    14e4:	3301      	adds	r3, #1
    14e6:	3201      	adds	r2, #1
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    14e8:	428b      	cmp	r3, r1
    14ea:	d1f9      	bne.n	14e0 <can_set_tx_buffer_element+0x6c>
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
    14ec:	2000      	movs	r0, #0
	}
	return STATUS_ERR_INVALID_ARG;
}
    14ee:	bd30      	pop	{r4, r5, pc}
    14f0:	42001c00 	.word	0x42001c00
    14f4:	200002bc 	.word	0x200002bc
    14f8:	42002000 	.word	0x42002000
    14fc:	2000024c 	.word	0x2000024c

00001500 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1500:	b500      	push	{lr}
    1502:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1504:	ab01      	add	r3, sp, #4
    1506:	2280      	movs	r2, #128	; 0x80
    1508:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    150a:	780a      	ldrb	r2, [r1, #0]
    150c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    150e:	784a      	ldrb	r2, [r1, #1]
    1510:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1512:	788a      	ldrb	r2, [r1, #2]
    1514:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1516:	0019      	movs	r1, r3
    1518:	4b01      	ldr	r3, [pc, #4]	; (1520 <port_pin_set_config+0x20>)
    151a:	4798      	blx	r3
}
    151c:	b003      	add	sp, #12
    151e:	bd00      	pop	{pc}
    1520:	0000264d 	.word	0x0000264d

00001524 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1524:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1526:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1528:	2340      	movs	r3, #64	; 0x40
    152a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    152c:	4281      	cmp	r1, r0
    152e:	d201      	bcs.n	1534 <_sercom_get_sync_baud_val+0x10>
    1530:	e00a      	b.n	1548 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    1532:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1534:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1536:	1c63      	adds	r3, r4, #1
    1538:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    153a:	4288      	cmp	r0, r1
    153c:	d9f9      	bls.n	1532 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    153e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1540:	2cff      	cmp	r4, #255	; 0xff
    1542:	d801      	bhi.n	1548 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    1544:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1546:	2300      	movs	r3, #0
	}
}
    1548:	0018      	movs	r0, r3
    154a:	bd10      	pop	{r4, pc}

0000154c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    154c:	b5f0      	push	{r4, r5, r6, r7, lr}
    154e:	465f      	mov	r7, fp
    1550:	4656      	mov	r6, sl
    1552:	464d      	mov	r5, r9
    1554:	4644      	mov	r4, r8
    1556:	b4f0      	push	{r4, r5, r6, r7}
    1558:	b089      	sub	sp, #36	; 0x24
    155a:	000c      	movs	r4, r1
    155c:	9205      	str	r2, [sp, #20]
    155e:	aa12      	add	r2, sp, #72	; 0x48
    1560:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1562:	0002      	movs	r2, r0
    1564:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1566:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1568:	42a2      	cmp	r2, r4
    156a:	d900      	bls.n	156e <_sercom_get_async_baud_val+0x22>
    156c:	e0c6      	b.n	16fc <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    156e:	2b00      	cmp	r3, #0
    1570:	d151      	bne.n	1616 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1572:	0002      	movs	r2, r0
    1574:	0008      	movs	r0, r1
    1576:	2100      	movs	r1, #0
    1578:	4d64      	ldr	r5, [pc, #400]	; (170c <_sercom_get_async_baud_val+0x1c0>)
    157a:	47a8      	blx	r5
    157c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    157e:	0026      	movs	r6, r4
    1580:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1582:	2300      	movs	r3, #0
    1584:	2400      	movs	r4, #0
    1586:	9300      	str	r3, [sp, #0]
    1588:	9401      	str	r4, [sp, #4]
    158a:	2200      	movs	r2, #0
    158c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    158e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1590:	2120      	movs	r1, #32
    1592:	468c      	mov	ip, r1
    1594:	391f      	subs	r1, #31
    1596:	9602      	str	r6, [sp, #8]
    1598:	9703      	str	r7, [sp, #12]
    159a:	2420      	movs	r4, #32
    159c:	4264      	negs	r4, r4
    159e:	1904      	adds	r4, r0, r4
    15a0:	d403      	bmi.n	15aa <_sercom_get_async_baud_val+0x5e>
    15a2:	000d      	movs	r5, r1
    15a4:	40a5      	lsls	r5, r4
    15a6:	46a8      	mov	r8, r5
    15a8:	e004      	b.n	15b4 <_sercom_get_async_baud_val+0x68>
    15aa:	4664      	mov	r4, ip
    15ac:	1a24      	subs	r4, r4, r0
    15ae:	000d      	movs	r5, r1
    15b0:	40e5      	lsrs	r5, r4
    15b2:	46a8      	mov	r8, r5
    15b4:	000c      	movs	r4, r1
    15b6:	4084      	lsls	r4, r0
    15b8:	46a1      	mov	r9, r4

		r = r << 1;
    15ba:	0014      	movs	r4, r2
    15bc:	001d      	movs	r5, r3
    15be:	18a4      	adds	r4, r4, r2
    15c0:	415d      	adcs	r5, r3
    15c2:	0022      	movs	r2, r4
    15c4:	002b      	movs	r3, r5

		if (n & bit_shift) {
    15c6:	4646      	mov	r6, r8
    15c8:	465f      	mov	r7, fp
    15ca:	423e      	tst	r6, r7
    15cc:	d003      	beq.n	15d6 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    15ce:	000e      	movs	r6, r1
    15d0:	4326      	orrs	r6, r4
    15d2:	0032      	movs	r2, r6
    15d4:	002b      	movs	r3, r5
		}

		if (r >= d) {
    15d6:	9c02      	ldr	r4, [sp, #8]
    15d8:	9d03      	ldr	r5, [sp, #12]
    15da:	429d      	cmp	r5, r3
    15dc:	d80f      	bhi.n	15fe <_sercom_get_async_baud_val+0xb2>
    15de:	d101      	bne.n	15e4 <_sercom_get_async_baud_val+0x98>
    15e0:	4294      	cmp	r4, r2
    15e2:	d80c      	bhi.n	15fe <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    15e4:	9c02      	ldr	r4, [sp, #8]
    15e6:	9d03      	ldr	r5, [sp, #12]
    15e8:	1b12      	subs	r2, r2, r4
    15ea:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    15ec:	464d      	mov	r5, r9
    15ee:	9e00      	ldr	r6, [sp, #0]
    15f0:	9f01      	ldr	r7, [sp, #4]
    15f2:	4335      	orrs	r5, r6
    15f4:	003c      	movs	r4, r7
    15f6:	4646      	mov	r6, r8
    15f8:	4334      	orrs	r4, r6
    15fa:	9500      	str	r5, [sp, #0]
    15fc:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    15fe:	3801      	subs	r0, #1
    1600:	d2cb      	bcs.n	159a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    1602:	2200      	movs	r2, #0
    1604:	2301      	movs	r3, #1
    1606:	9800      	ldr	r0, [sp, #0]
    1608:	9901      	ldr	r1, [sp, #4]
    160a:	1a12      	subs	r2, r2, r0
    160c:	418b      	sbcs	r3, r1
    160e:	0c12      	lsrs	r2, r2, #16
    1610:	041b      	lsls	r3, r3, #16
    1612:	431a      	orrs	r2, r3
    1614:	e06f      	b.n	16f6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    1616:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1618:	2b01      	cmp	r3, #1
    161a:	d16c      	bne.n	16f6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    161c:	0f63      	lsrs	r3, r4, #29
    161e:	9304      	str	r3, [sp, #16]
    1620:	00e3      	lsls	r3, r4, #3
    1622:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1624:	000a      	movs	r2, r1
    1626:	2300      	movs	r3, #0
    1628:	2100      	movs	r1, #0
    162a:	4c38      	ldr	r4, [pc, #224]	; (170c <_sercom_get_async_baud_val+0x1c0>)
    162c:	47a0      	blx	r4
    162e:	0004      	movs	r4, r0
    1630:	000d      	movs	r5, r1
    1632:	2300      	movs	r3, #0
    1634:	469c      	mov	ip, r3
    1636:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1638:	3320      	adds	r3, #32
    163a:	469b      	mov	fp, r3
    163c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    163e:	4663      	mov	r3, ip
    1640:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1642:	2300      	movs	r3, #0
    1644:	9302      	str	r3, [sp, #8]
    1646:	2200      	movs	r2, #0
    1648:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    164a:	213f      	movs	r1, #63	; 0x3f
    164c:	9400      	str	r4, [sp, #0]
    164e:	9501      	str	r5, [sp, #4]
    1650:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    1652:	2120      	movs	r1, #32
    1654:	4249      	negs	r1, r1
    1656:	1879      	adds	r1, r7, r1
    1658:	d403      	bmi.n	1662 <_sercom_get_async_baud_val+0x116>
    165a:	0030      	movs	r0, r6
    165c:	4088      	lsls	r0, r1
    165e:	4684      	mov	ip, r0
    1660:	e004      	b.n	166c <_sercom_get_async_baud_val+0x120>
    1662:	4659      	mov	r1, fp
    1664:	1bc9      	subs	r1, r1, r7
    1666:	0030      	movs	r0, r6
    1668:	40c8      	lsrs	r0, r1
    166a:	4684      	mov	ip, r0
    166c:	0031      	movs	r1, r6
    166e:	40b9      	lsls	r1, r7
    1670:	4689      	mov	r9, r1

		r = r << 1;
    1672:	0010      	movs	r0, r2
    1674:	0019      	movs	r1, r3
    1676:	1880      	adds	r0, r0, r2
    1678:	4159      	adcs	r1, r3
    167a:	0002      	movs	r2, r0
    167c:	000b      	movs	r3, r1

		if (n & bit_shift) {
    167e:	4644      	mov	r4, r8
    1680:	464d      	mov	r5, r9
    1682:	402c      	ands	r4, r5
    1684:	46a2      	mov	sl, r4
    1686:	4664      	mov	r4, ip
    1688:	9d04      	ldr	r5, [sp, #16]
    168a:	402c      	ands	r4, r5
    168c:	46a4      	mov	ip, r4
    168e:	4654      	mov	r4, sl
    1690:	4665      	mov	r5, ip
    1692:	432c      	orrs	r4, r5
    1694:	d003      	beq.n	169e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    1696:	0034      	movs	r4, r6
    1698:	4304      	orrs	r4, r0
    169a:	0022      	movs	r2, r4
    169c:	000b      	movs	r3, r1
		}

		if (r >= d) {
    169e:	9800      	ldr	r0, [sp, #0]
    16a0:	9901      	ldr	r1, [sp, #4]
    16a2:	4299      	cmp	r1, r3
    16a4:	d80a      	bhi.n	16bc <_sercom_get_async_baud_val+0x170>
    16a6:	d101      	bne.n	16ac <_sercom_get_async_baud_val+0x160>
    16a8:	4290      	cmp	r0, r2
    16aa:	d807      	bhi.n	16bc <_sercom_get_async_baud_val+0x170>
			r = r - d;
    16ac:	9800      	ldr	r0, [sp, #0]
    16ae:	9901      	ldr	r1, [sp, #4]
    16b0:	1a12      	subs	r2, r2, r0
    16b2:	418b      	sbcs	r3, r1
			q |= bit_shift;
    16b4:	9902      	ldr	r1, [sp, #8]
    16b6:	4648      	mov	r0, r9
    16b8:	4301      	orrs	r1, r0
    16ba:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    16bc:	3f01      	subs	r7, #1
    16be:	d2c8      	bcs.n	1652 <_sercom_get_async_baud_val+0x106>
    16c0:	9c00      	ldr	r4, [sp, #0]
    16c2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    16c4:	9902      	ldr	r1, [sp, #8]
    16c6:	9a07      	ldr	r2, [sp, #28]
    16c8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    16ca:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    16cc:	4910      	ldr	r1, [pc, #64]	; (1710 <_sercom_get_async_baud_val+0x1c4>)
    16ce:	428b      	cmp	r3, r1
    16d0:	d90b      	bls.n	16ea <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    16d2:	9b06      	ldr	r3, [sp, #24]
    16d4:	3301      	adds	r3, #1
    16d6:	b2db      	uxtb	r3, r3
    16d8:	0019      	movs	r1, r3
    16da:	9306      	str	r3, [sp, #24]
    16dc:	0013      	movs	r3, r2
    16de:	3301      	adds	r3, #1
    16e0:	9307      	str	r3, [sp, #28]
    16e2:	2908      	cmp	r1, #8
    16e4:	d1ad      	bne.n	1642 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16e6:	2540      	movs	r5, #64	; 0x40
    16e8:	e008      	b.n	16fc <_sercom_get_async_baud_val+0x1b0>
    16ea:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    16ec:	9a06      	ldr	r2, [sp, #24]
    16ee:	2a08      	cmp	r2, #8
    16f0:	d004      	beq.n	16fc <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    16f2:	0352      	lsls	r2, r2, #13
    16f4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    16f6:	9b05      	ldr	r3, [sp, #20]
    16f8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    16fa:	2500      	movs	r5, #0
}
    16fc:	0028      	movs	r0, r5
    16fe:	b009      	add	sp, #36	; 0x24
    1700:	bc3c      	pop	{r2, r3, r4, r5}
    1702:	4690      	mov	r8, r2
    1704:	4699      	mov	r9, r3
    1706:	46a2      	mov	sl, r4
    1708:	46ab      	mov	fp, r5
    170a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    170c:	00003a21 	.word	0x00003a21
    1710:	00001fff 	.word	0x00001fff

00001714 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1714:	b510      	push	{r4, lr}
    1716:	b082      	sub	sp, #8
    1718:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    171a:	4b0e      	ldr	r3, [pc, #56]	; (1754 <sercom_set_gclk_generator+0x40>)
    171c:	781b      	ldrb	r3, [r3, #0]
    171e:	2b00      	cmp	r3, #0
    1720:	d001      	beq.n	1726 <sercom_set_gclk_generator+0x12>
    1722:	2900      	cmp	r1, #0
    1724:	d00d      	beq.n	1742 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    1726:	a901      	add	r1, sp, #4
    1728:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    172a:	2012      	movs	r0, #18
    172c:	4b0a      	ldr	r3, [pc, #40]	; (1758 <sercom_set_gclk_generator+0x44>)
    172e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1730:	2012      	movs	r0, #18
    1732:	4b0a      	ldr	r3, [pc, #40]	; (175c <sercom_set_gclk_generator+0x48>)
    1734:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1736:	4b07      	ldr	r3, [pc, #28]	; (1754 <sercom_set_gclk_generator+0x40>)
    1738:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    173a:	2201      	movs	r2, #1
    173c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    173e:	2000      	movs	r0, #0
    1740:	e006      	b.n	1750 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    1742:	4b04      	ldr	r3, [pc, #16]	; (1754 <sercom_set_gclk_generator+0x40>)
    1744:	785b      	ldrb	r3, [r3, #1]
    1746:	4283      	cmp	r3, r0
    1748:	d001      	beq.n	174e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    174a:	201d      	movs	r0, #29
    174c:	e000      	b.n	1750 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    174e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1750:	b002      	add	sp, #8
    1752:	bd10      	pop	{r4, pc}
    1754:	200004bc 	.word	0x200004bc
    1758:	00002551 	.word	0x00002551
    175c:	000024e1 	.word	0x000024e1

00001760 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1760:	4b44      	ldr	r3, [pc, #272]	; (1874 <_sercom_get_default_pad+0x114>)
    1762:	4298      	cmp	r0, r3
    1764:	d033      	beq.n	17ce <_sercom_get_default_pad+0x6e>
    1766:	d806      	bhi.n	1776 <_sercom_get_default_pad+0x16>
    1768:	4b43      	ldr	r3, [pc, #268]	; (1878 <_sercom_get_default_pad+0x118>)
    176a:	4298      	cmp	r0, r3
    176c:	d00d      	beq.n	178a <_sercom_get_default_pad+0x2a>
    176e:	4b43      	ldr	r3, [pc, #268]	; (187c <_sercom_get_default_pad+0x11c>)
    1770:	4298      	cmp	r0, r3
    1772:	d01b      	beq.n	17ac <_sercom_get_default_pad+0x4c>
    1774:	e06f      	b.n	1856 <_sercom_get_default_pad+0xf6>
    1776:	4b42      	ldr	r3, [pc, #264]	; (1880 <_sercom_get_default_pad+0x120>)
    1778:	4298      	cmp	r0, r3
    177a:	d04a      	beq.n	1812 <_sercom_get_default_pad+0xb2>
    177c:	4b41      	ldr	r3, [pc, #260]	; (1884 <_sercom_get_default_pad+0x124>)
    177e:	4298      	cmp	r0, r3
    1780:	d058      	beq.n	1834 <_sercom_get_default_pad+0xd4>
    1782:	4b41      	ldr	r3, [pc, #260]	; (1888 <_sercom_get_default_pad+0x128>)
    1784:	4298      	cmp	r0, r3
    1786:	d166      	bne.n	1856 <_sercom_get_default_pad+0xf6>
    1788:	e032      	b.n	17f0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    178a:	2901      	cmp	r1, #1
    178c:	d006      	beq.n	179c <_sercom_get_default_pad+0x3c>
    178e:	2900      	cmp	r1, #0
    1790:	d063      	beq.n	185a <_sercom_get_default_pad+0xfa>
    1792:	2902      	cmp	r1, #2
    1794:	d006      	beq.n	17a4 <_sercom_get_default_pad+0x44>
    1796:	2903      	cmp	r1, #3
    1798:	d006      	beq.n	17a8 <_sercom_get_default_pad+0x48>
    179a:	e001      	b.n	17a0 <_sercom_get_default_pad+0x40>
    179c:	483b      	ldr	r0, [pc, #236]	; (188c <_sercom_get_default_pad+0x12c>)
    179e:	e067      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17a0:	2000      	movs	r0, #0
    17a2:	e065      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17a4:	483a      	ldr	r0, [pc, #232]	; (1890 <_sercom_get_default_pad+0x130>)
    17a6:	e063      	b.n	1870 <_sercom_get_default_pad+0x110>
    17a8:	483a      	ldr	r0, [pc, #232]	; (1894 <_sercom_get_default_pad+0x134>)
    17aa:	e061      	b.n	1870 <_sercom_get_default_pad+0x110>
    17ac:	2901      	cmp	r1, #1
    17ae:	d006      	beq.n	17be <_sercom_get_default_pad+0x5e>
    17b0:	2900      	cmp	r1, #0
    17b2:	d054      	beq.n	185e <_sercom_get_default_pad+0xfe>
    17b4:	2902      	cmp	r1, #2
    17b6:	d006      	beq.n	17c6 <_sercom_get_default_pad+0x66>
    17b8:	2903      	cmp	r1, #3
    17ba:	d006      	beq.n	17ca <_sercom_get_default_pad+0x6a>
    17bc:	e001      	b.n	17c2 <_sercom_get_default_pad+0x62>
    17be:	4836      	ldr	r0, [pc, #216]	; (1898 <_sercom_get_default_pad+0x138>)
    17c0:	e056      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17c2:	2000      	movs	r0, #0
    17c4:	e054      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17c6:	4835      	ldr	r0, [pc, #212]	; (189c <_sercom_get_default_pad+0x13c>)
    17c8:	e052      	b.n	1870 <_sercom_get_default_pad+0x110>
    17ca:	4835      	ldr	r0, [pc, #212]	; (18a0 <_sercom_get_default_pad+0x140>)
    17cc:	e050      	b.n	1870 <_sercom_get_default_pad+0x110>
    17ce:	2901      	cmp	r1, #1
    17d0:	d006      	beq.n	17e0 <_sercom_get_default_pad+0x80>
    17d2:	2900      	cmp	r1, #0
    17d4:	d045      	beq.n	1862 <_sercom_get_default_pad+0x102>
    17d6:	2902      	cmp	r1, #2
    17d8:	d006      	beq.n	17e8 <_sercom_get_default_pad+0x88>
    17da:	2903      	cmp	r1, #3
    17dc:	d006      	beq.n	17ec <_sercom_get_default_pad+0x8c>
    17de:	e001      	b.n	17e4 <_sercom_get_default_pad+0x84>
    17e0:	4830      	ldr	r0, [pc, #192]	; (18a4 <_sercom_get_default_pad+0x144>)
    17e2:	e045      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    17e4:	2000      	movs	r0, #0
    17e6:	e043      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17e8:	482f      	ldr	r0, [pc, #188]	; (18a8 <_sercom_get_default_pad+0x148>)
    17ea:	e041      	b.n	1870 <_sercom_get_default_pad+0x110>
    17ec:	482f      	ldr	r0, [pc, #188]	; (18ac <_sercom_get_default_pad+0x14c>)
    17ee:	e03f      	b.n	1870 <_sercom_get_default_pad+0x110>
    17f0:	2901      	cmp	r1, #1
    17f2:	d006      	beq.n	1802 <_sercom_get_default_pad+0xa2>
    17f4:	2900      	cmp	r1, #0
    17f6:	d036      	beq.n	1866 <_sercom_get_default_pad+0x106>
    17f8:	2902      	cmp	r1, #2
    17fa:	d006      	beq.n	180a <_sercom_get_default_pad+0xaa>
    17fc:	2903      	cmp	r1, #3
    17fe:	d006      	beq.n	180e <_sercom_get_default_pad+0xae>
    1800:	e001      	b.n	1806 <_sercom_get_default_pad+0xa6>
    1802:	482b      	ldr	r0, [pc, #172]	; (18b0 <_sercom_get_default_pad+0x150>)
    1804:	e034      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1806:	2000      	movs	r0, #0
    1808:	e032      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    180a:	482a      	ldr	r0, [pc, #168]	; (18b4 <_sercom_get_default_pad+0x154>)
    180c:	e030      	b.n	1870 <_sercom_get_default_pad+0x110>
    180e:	482a      	ldr	r0, [pc, #168]	; (18b8 <_sercom_get_default_pad+0x158>)
    1810:	e02e      	b.n	1870 <_sercom_get_default_pad+0x110>
    1812:	2901      	cmp	r1, #1
    1814:	d006      	beq.n	1824 <_sercom_get_default_pad+0xc4>
    1816:	2900      	cmp	r1, #0
    1818:	d027      	beq.n	186a <_sercom_get_default_pad+0x10a>
    181a:	2902      	cmp	r1, #2
    181c:	d006      	beq.n	182c <_sercom_get_default_pad+0xcc>
    181e:	2903      	cmp	r1, #3
    1820:	d006      	beq.n	1830 <_sercom_get_default_pad+0xd0>
    1822:	e001      	b.n	1828 <_sercom_get_default_pad+0xc8>
    1824:	4825      	ldr	r0, [pc, #148]	; (18bc <_sercom_get_default_pad+0x15c>)
    1826:	e023      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1828:	2000      	movs	r0, #0
    182a:	e021      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    182c:	4824      	ldr	r0, [pc, #144]	; (18c0 <_sercom_get_default_pad+0x160>)
    182e:	e01f      	b.n	1870 <_sercom_get_default_pad+0x110>
    1830:	4824      	ldr	r0, [pc, #144]	; (18c4 <_sercom_get_default_pad+0x164>)
    1832:	e01d      	b.n	1870 <_sercom_get_default_pad+0x110>
    1834:	2901      	cmp	r1, #1
    1836:	d006      	beq.n	1846 <_sercom_get_default_pad+0xe6>
    1838:	2900      	cmp	r1, #0
    183a:	d018      	beq.n	186e <_sercom_get_default_pad+0x10e>
    183c:	2902      	cmp	r1, #2
    183e:	d006      	beq.n	184e <_sercom_get_default_pad+0xee>
    1840:	2903      	cmp	r1, #3
    1842:	d006      	beq.n	1852 <_sercom_get_default_pad+0xf2>
    1844:	e001      	b.n	184a <_sercom_get_default_pad+0xea>
    1846:	4820      	ldr	r0, [pc, #128]	; (18c8 <_sercom_get_default_pad+0x168>)
    1848:	e012      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    184a:	2000      	movs	r0, #0
    184c:	e010      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    184e:	481f      	ldr	r0, [pc, #124]	; (18cc <_sercom_get_default_pad+0x16c>)
    1850:	e00e      	b.n	1870 <_sercom_get_default_pad+0x110>
    1852:	481f      	ldr	r0, [pc, #124]	; (18d0 <_sercom_get_default_pad+0x170>)
    1854:	e00c      	b.n	1870 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1856:	2000      	movs	r0, #0
    1858:	e00a      	b.n	1870 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    185a:	481e      	ldr	r0, [pc, #120]	; (18d4 <_sercom_get_default_pad+0x174>)
    185c:	e008      	b.n	1870 <_sercom_get_default_pad+0x110>
    185e:	481e      	ldr	r0, [pc, #120]	; (18d8 <_sercom_get_default_pad+0x178>)
    1860:	e006      	b.n	1870 <_sercom_get_default_pad+0x110>
    1862:	481e      	ldr	r0, [pc, #120]	; (18dc <_sercom_get_default_pad+0x17c>)
    1864:	e004      	b.n	1870 <_sercom_get_default_pad+0x110>
    1866:	481e      	ldr	r0, [pc, #120]	; (18e0 <_sercom_get_default_pad+0x180>)
    1868:	e002      	b.n	1870 <_sercom_get_default_pad+0x110>
    186a:	481e      	ldr	r0, [pc, #120]	; (18e4 <_sercom_get_default_pad+0x184>)
    186c:	e000      	b.n	1870 <_sercom_get_default_pad+0x110>
    186e:	481e      	ldr	r0, [pc, #120]	; (18e8 <_sercom_get_default_pad+0x188>)
	}

	Assert(false);
	return 0;
}
    1870:	4770      	bx	lr
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	42000c00 	.word	0x42000c00
    1878:	42000400 	.word	0x42000400
    187c:	42000800 	.word	0x42000800
    1880:	42001400 	.word	0x42001400
    1884:	42001800 	.word	0x42001800
    1888:	42001000 	.word	0x42001000
    188c:	00050003 	.word	0x00050003
    1890:	00060003 	.word	0x00060003
    1894:	00070003 	.word	0x00070003
    1898:	00110002 	.word	0x00110002
    189c:	00120002 	.word	0x00120002
    18a0:	00130002 	.word	0x00130002
    18a4:	000d0002 	.word	0x000d0002
    18a8:	000e0002 	.word	0x000e0002
    18ac:	000f0002 	.word	0x000f0002
    18b0:	00170002 	.word	0x00170002
    18b4:	00180002 	.word	0x00180002
    18b8:	00190002 	.word	0x00190002
    18bc:	00290003 	.word	0x00290003
    18c0:	002a0003 	.word	0x002a0003
    18c4:	002b0003 	.word	0x002b0003
    18c8:	00230003 	.word	0x00230003
    18cc:	00200003 	.word	0x00200003
    18d0:	00210003 	.word	0x00210003
    18d4:	00040003 	.word	0x00040003
    18d8:	00100002 	.word	0x00100002
    18dc:	000c0002 	.word	0x000c0002
    18e0:	00160002 	.word	0x00160002
    18e4:	00280003 	.word	0x00280003
    18e8:	00220003 	.word	0x00220003

000018ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    18ec:	b530      	push	{r4, r5, lr}
    18ee:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18f0:	4b0c      	ldr	r3, [pc, #48]	; (1924 <_sercom_get_sercom_inst_index+0x38>)
    18f2:	466a      	mov	r2, sp
    18f4:	cb32      	ldmia	r3!, {r1, r4, r5}
    18f6:	c232      	stmia	r2!, {r1, r4, r5}
    18f8:	cb32      	ldmia	r3!, {r1, r4, r5}
    18fa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18fc:	9b00      	ldr	r3, [sp, #0]
    18fe:	4283      	cmp	r3, r0
    1900:	d006      	beq.n	1910 <_sercom_get_sercom_inst_index+0x24>
    1902:	2301      	movs	r3, #1
    1904:	009a      	lsls	r2, r3, #2
    1906:	4669      	mov	r1, sp
    1908:	5852      	ldr	r2, [r2, r1]
    190a:	4282      	cmp	r2, r0
    190c:	d103      	bne.n	1916 <_sercom_get_sercom_inst_index+0x2a>
    190e:	e000      	b.n	1912 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1910:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1912:	b2d8      	uxtb	r0, r3
    1914:	e003      	b.n	191e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1916:	3301      	adds	r3, #1
    1918:	2b06      	cmp	r3, #6
    191a:	d1f3      	bne.n	1904 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    191c:	2000      	movs	r0, #0
}
    191e:	b007      	add	sp, #28
    1920:	bd30      	pop	{r4, r5, pc}
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	00004ef4 	.word	0x00004ef4

00001928 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1928:	4770      	bx	lr
    192a:	46c0      	nop			; (mov r8, r8)

0000192c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    192c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    192e:	4b0a      	ldr	r3, [pc, #40]	; (1958 <_sercom_set_handler+0x2c>)
    1930:	781b      	ldrb	r3, [r3, #0]
    1932:	2b00      	cmp	r3, #0
    1934:	d10c      	bne.n	1950 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1936:	4f09      	ldr	r7, [pc, #36]	; (195c <_sercom_set_handler+0x30>)
    1938:	4e09      	ldr	r6, [pc, #36]	; (1960 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    193a:	4d0a      	ldr	r5, [pc, #40]	; (1964 <_sercom_set_handler+0x38>)
    193c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    193e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1940:	195a      	adds	r2, r3, r5
    1942:	6014      	str	r4, [r2, #0]
    1944:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1946:	2b18      	cmp	r3, #24
    1948:	d1f9      	bne.n	193e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    194a:	2201      	movs	r2, #1
    194c:	4b02      	ldr	r3, [pc, #8]	; (1958 <_sercom_set_handler+0x2c>)
    194e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1950:	0080      	lsls	r0, r0, #2
    1952:	4b02      	ldr	r3, [pc, #8]	; (195c <_sercom_set_handler+0x30>)
    1954:	50c1      	str	r1, [r0, r3]
}
    1956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1958:	200004be 	.word	0x200004be
    195c:	200004c0 	.word	0x200004c0
    1960:	00001929 	.word	0x00001929
    1964:	20000634 	.word	0x20000634

00001968 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1968:	b510      	push	{r4, lr}
    196a:	b082      	sub	sp, #8
    196c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    196e:	2206      	movs	r2, #6
    1970:	4905      	ldr	r1, [pc, #20]	; (1988 <_sercom_get_interrupt_vector+0x20>)
    1972:	4668      	mov	r0, sp
    1974:	4b05      	ldr	r3, [pc, #20]	; (198c <_sercom_get_interrupt_vector+0x24>)
    1976:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1978:	0020      	movs	r0, r4
    197a:	4b05      	ldr	r3, [pc, #20]	; (1990 <_sercom_get_interrupt_vector+0x28>)
    197c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    197e:	466b      	mov	r3, sp
    1980:	5618      	ldrsb	r0, [r3, r0]
}
    1982:	b002      	add	sp, #8
    1984:	bd10      	pop	{r4, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	00004f0c 	.word	0x00004f0c
    198c:	00003c99 	.word	0x00003c99
    1990:	000018ed 	.word	0x000018ed

00001994 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1994:	b510      	push	{r4, lr}
    1996:	4b02      	ldr	r3, [pc, #8]	; (19a0 <SERCOM0_Handler+0xc>)
    1998:	681b      	ldr	r3, [r3, #0]
    199a:	2000      	movs	r0, #0
    199c:	4798      	blx	r3
    199e:	bd10      	pop	{r4, pc}
    19a0:	200004c0 	.word	0x200004c0

000019a4 <SERCOM1_Handler>:
    19a4:	b510      	push	{r4, lr}
    19a6:	4b02      	ldr	r3, [pc, #8]	; (19b0 <SERCOM1_Handler+0xc>)
    19a8:	685b      	ldr	r3, [r3, #4]
    19aa:	2001      	movs	r0, #1
    19ac:	4798      	blx	r3
    19ae:	bd10      	pop	{r4, pc}
    19b0:	200004c0 	.word	0x200004c0

000019b4 <SERCOM2_Handler>:
    19b4:	b510      	push	{r4, lr}
    19b6:	4b02      	ldr	r3, [pc, #8]	; (19c0 <SERCOM2_Handler+0xc>)
    19b8:	689b      	ldr	r3, [r3, #8]
    19ba:	2002      	movs	r0, #2
    19bc:	4798      	blx	r3
    19be:	bd10      	pop	{r4, pc}
    19c0:	200004c0 	.word	0x200004c0

000019c4 <SERCOM3_Handler>:
    19c4:	b510      	push	{r4, lr}
    19c6:	4b02      	ldr	r3, [pc, #8]	; (19d0 <SERCOM3_Handler+0xc>)
    19c8:	68db      	ldr	r3, [r3, #12]
    19ca:	2003      	movs	r0, #3
    19cc:	4798      	blx	r3
    19ce:	bd10      	pop	{r4, pc}
    19d0:	200004c0 	.word	0x200004c0

000019d4 <SERCOM4_Handler>:
    19d4:	b510      	push	{r4, lr}
    19d6:	4b02      	ldr	r3, [pc, #8]	; (19e0 <SERCOM4_Handler+0xc>)
    19d8:	691b      	ldr	r3, [r3, #16]
    19da:	2004      	movs	r0, #4
    19dc:	4798      	blx	r3
    19de:	bd10      	pop	{r4, pc}
    19e0:	200004c0 	.word	0x200004c0

000019e4 <SERCOM5_Handler>:
    19e4:	b510      	push	{r4, lr}
    19e6:	4b02      	ldr	r3, [pc, #8]	; (19f0 <SERCOM5_Handler+0xc>)
    19e8:	695b      	ldr	r3, [r3, #20]
    19ea:	2005      	movs	r0, #5
    19ec:	4798      	blx	r3
    19ee:	bd10      	pop	{r4, pc}
    19f0:	200004c0 	.word	0x200004c0

000019f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    19f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f6:	465f      	mov	r7, fp
    19f8:	4656      	mov	r6, sl
    19fa:	464d      	mov	r5, r9
    19fc:	4644      	mov	r4, r8
    19fe:	b4f0      	push	{r4, r5, r6, r7}
    1a00:	b091      	sub	sp, #68	; 0x44
    1a02:	0005      	movs	r5, r0
    1a04:	000c      	movs	r4, r1
    1a06:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1a08:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a0a:	0008      	movs	r0, r1
    1a0c:	4bcf      	ldr	r3, [pc, #828]	; (1d4c <usart_init+0x358>)
    1a0e:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1a10:	2805      	cmp	r0, #5
    1a12:	d002      	beq.n	1a1a <usart_init+0x26>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1a14:	0007      	movs	r7, r0
    1a16:	3713      	adds	r7, #19
    1a18:	e000      	b.n	1a1c <usart_init+0x28>
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    1a1a:	2719      	movs	r7, #25
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a1c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1a1e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1a20:	07d2      	lsls	r2, r2, #31
    1a22:	d500      	bpl.n	1a26 <usart_init+0x32>
    1a24:	e18a      	b.n	1d3c <usart_init+0x348>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a26:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1a28:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1a2a:	0792      	lsls	r2, r2, #30
    1a2c:	d500      	bpl.n	1a30 <usart_init+0x3c>
    1a2e:	e185      	b.n	1d3c <usart_init+0x348>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    1a30:	49c7      	ldr	r1, [pc, #796]	; (1d50 <usart_init+0x35c>)
    1a32:	69ca      	ldr	r2, [r1, #28]
    1a34:	3001      	adds	r0, #1
    1a36:	3b1b      	subs	r3, #27
    1a38:	4083      	lsls	r3, r0
    1a3a:	4313      	orrs	r3, r2
    1a3c:	61cb      	str	r3, [r1, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1a3e:	a90f      	add	r1, sp, #60	; 0x3c
    1a40:	2335      	movs	r3, #53	; 0x35
    1a42:	4698      	mov	r8, r3
    1a44:	5cf3      	ldrb	r3, [r6, r3]
    1a46:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a48:	b2ff      	uxtb	r7, r7
    1a4a:	0038      	movs	r0, r7
    1a4c:	4bc1      	ldr	r3, [pc, #772]	; (1d54 <usart_init+0x360>)
    1a4e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1a50:	0038      	movs	r0, r7
    1a52:	4bc1      	ldr	r3, [pc, #772]	; (1d58 <usart_init+0x364>)
    1a54:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1a56:	4643      	mov	r3, r8
    1a58:	5cf0      	ldrb	r0, [r6, r3]
    1a5a:	2100      	movs	r1, #0
    1a5c:	4bbf      	ldr	r3, [pc, #764]	; (1d5c <usart_init+0x368>)
    1a5e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1a60:	7af3      	ldrb	r3, [r6, #11]
    1a62:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1a64:	232c      	movs	r3, #44	; 0x2c
    1a66:	5cf3      	ldrb	r3, [r6, r3]
    1a68:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1a6a:	232d      	movs	r3, #45	; 0x2d
    1a6c:	5cf3      	ldrb	r3, [r6, r3]
    1a6e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1a70:	7ef3      	ldrb	r3, [r6, #27]
    1a72:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a74:	2324      	movs	r3, #36	; 0x24
    1a76:	5cf3      	ldrb	r3, [r6, r3]
    1a78:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a7a:	682b      	ldr	r3, [r5, #0]
    1a7c:	9302      	str	r3, [sp, #8]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a7e:	0018      	movs	r0, r3
    1a80:	4bb2      	ldr	r3, [pc, #712]	; (1d4c <usart_init+0x358>)
    1a82:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a84:	3013      	adds	r0, #19
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    1a86:	2200      	movs	r2, #0
    1a88:	230e      	movs	r3, #14
    1a8a:	a906      	add	r1, sp, #24
    1a8c:	468c      	mov	ip, r1
    1a8e:	4463      	add	r3, ip
    1a90:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1a92:	8a33      	ldrh	r3, [r6, #16]
    1a94:	4699      	mov	r9, r3
    1a96:	2380      	movs	r3, #128	; 0x80
    1a98:	01db      	lsls	r3, r3, #7
    1a9a:	4599      	cmp	r9, r3
    1a9c:	d019      	beq.n	1ad2 <usart_init+0xde>
    1a9e:	d804      	bhi.n	1aaa <usart_init+0xb6>
    1aa0:	2380      	movs	r3, #128	; 0x80
    1aa2:	019b      	lsls	r3, r3, #6
    1aa4:	4599      	cmp	r9, r3
    1aa6:	d00a      	beq.n	1abe <usart_init+0xca>
    1aa8:	e129      	b.n	1cfe <usart_init+0x30a>
    1aaa:	23c0      	movs	r3, #192	; 0xc0
    1aac:	01db      	lsls	r3, r3, #7
    1aae:	4599      	cmp	r9, r3
    1ab0:	d00a      	beq.n	1ac8 <usart_init+0xd4>
    1ab2:	2380      	movs	r3, #128	; 0x80
    1ab4:	021b      	lsls	r3, r3, #8
    1ab6:	4599      	cmp	r9, r3
    1ab8:	d100      	bne.n	1abc <usart_init+0xc8>
    1aba:	e125      	b.n	1d08 <usart_init+0x314>
    1abc:	e11f      	b.n	1cfe <usart_init+0x30a>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1abe:	2310      	movs	r3, #16
    1ac0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1ac2:	3b0f      	subs	r3, #15
    1ac4:	9307      	str	r3, [sp, #28]
    1ac6:	e123      	b.n	1d10 <usart_init+0x31c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1ac8:	2308      	movs	r3, #8
    1aca:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1acc:	3b07      	subs	r3, #7
    1ace:	9307      	str	r3, [sp, #28]
    1ad0:	e11e      	b.n	1d10 <usart_init+0x31c>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1ad2:	6833      	ldr	r3, [r6, #0]
    1ad4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1ad6:	68f3      	ldr	r3, [r6, #12]
    1ad8:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1ada:	6973      	ldr	r3, [r6, #20]
    1adc:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ade:	7e33      	ldrb	r3, [r6, #24]
    1ae0:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ae2:	232e      	movs	r3, #46	; 0x2e
    1ae4:	5cf3      	ldrb	r3, [r6, r3]
    1ae6:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1ae8:	6873      	ldr	r3, [r6, #4]
    1aea:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1aec:	2b00      	cmp	r3, #0
    1aee:	d015      	beq.n	1b1c <usart_init+0x128>
    1af0:	2380      	movs	r3, #128	; 0x80
    1af2:	055b      	lsls	r3, r3, #21
    1af4:	459a      	cmp	sl, r3
    1af6:	d136      	bne.n	1b66 <usart_init+0x172>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1af8:	232f      	movs	r3, #47	; 0x2f
    1afa:	5cf3      	ldrb	r3, [r6, r3]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d136      	bne.n	1b6e <usart_init+0x17a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1b00:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b02:	001f      	movs	r7, r3
    1b04:	b2c0      	uxtb	r0, r0
    1b06:	4b96      	ldr	r3, [pc, #600]	; (1d60 <usart_init+0x36c>)
    1b08:	4798      	blx	r3
    1b0a:	0001      	movs	r1, r0
    1b0c:	220e      	movs	r2, #14
    1b0e:	ab06      	add	r3, sp, #24
    1b10:	469c      	mov	ip, r3
    1b12:	4462      	add	r2, ip
    1b14:	0038      	movs	r0, r7
    1b16:	4b93      	ldr	r3, [pc, #588]	; (1d64 <usart_init+0x370>)
    1b18:	4798      	blx	r3
    1b1a:	e025      	b.n	1b68 <usart_init+0x174>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b1c:	2308      	movs	r3, #8
    1b1e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b20:	2300      	movs	r3, #0
    1b22:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1b24:	232f      	movs	r3, #47	; 0x2f
    1b26:	5cf3      	ldrb	r3, [r6, r3]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d00b      	beq.n	1b44 <usart_init+0x150>
				status_code =
    1b2c:	9b06      	ldr	r3, [sp, #24]
    1b2e:	9300      	str	r3, [sp, #0]
    1b30:	9b07      	ldr	r3, [sp, #28]
    1b32:	220e      	movs	r2, #14
    1b34:	a906      	add	r1, sp, #24
    1b36:	468c      	mov	ip, r1
    1b38:	4462      	add	r2, ip
    1b3a:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1b3c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1b3e:	4f8a      	ldr	r7, [pc, #552]	; (1d68 <usart_init+0x374>)
    1b40:	47b8      	blx	r7
    1b42:	e011      	b.n	1b68 <usart_init+0x174>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1b44:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1b46:	001f      	movs	r7, r3
    1b48:	b2c0      	uxtb	r0, r0
    1b4a:	4b85      	ldr	r3, [pc, #532]	; (1d60 <usart_init+0x36c>)
    1b4c:	4798      	blx	r3
    1b4e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1b50:	9b06      	ldr	r3, [sp, #24]
    1b52:	9300      	str	r3, [sp, #0]
    1b54:	9b07      	ldr	r3, [sp, #28]
    1b56:	220e      	movs	r2, #14
    1b58:	a806      	add	r0, sp, #24
    1b5a:	4684      	mov	ip, r0
    1b5c:	4462      	add	r2, ip
    1b5e:	0038      	movs	r0, r7
    1b60:	4f81      	ldr	r7, [pc, #516]	; (1d68 <usart_init+0x374>)
    1b62:	47b8      	blx	r7
    1b64:	e000      	b.n	1b68 <usart_init+0x174>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1b66:	2000      	movs	r0, #0
    1b68:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1b6a:	d000      	beq.n	1b6e <usart_init+0x17a>
    1b6c:	e0e6      	b.n	1d3c <usart_init+0x348>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1b6e:	7e73      	ldrb	r3, [r6, #25]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d002      	beq.n	1b7a <usart_init+0x186>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1b74:	7eb3      	ldrb	r3, [r6, #26]
    1b76:	9a02      	ldr	r2, [sp, #8]
    1b78:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b7a:	682a      	ldr	r2, [r5, #0]
    1b7c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b7e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b80:	2b00      	cmp	r3, #0
    1b82:	d1fc      	bne.n	1b7e <usart_init+0x18a>
    1b84:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1b86:	330e      	adds	r3, #14
    1b88:	a906      	add	r1, sp, #24
    1b8a:	468c      	mov	ip, r1
    1b8c:	4463      	add	r3, ip
    1b8e:	881b      	ldrh	r3, [r3, #0]
    1b90:	81bb      	strh	r3, [r7, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    1b92:	9b05      	ldr	r3, [sp, #20]
    1b94:	465a      	mov	r2, fp
    1b96:	4313      	orrs	r3, r2
    1b98:	9a03      	ldr	r2, [sp, #12]
    1b9a:	4313      	orrs	r3, r2
    1b9c:	4652      	mov	r2, sl
    1b9e:	4313      	orrs	r3, r2
    1ba0:	464a      	mov	r2, r9
    1ba2:	4313      	orrs	r3, r2
    1ba4:	9a04      	ldr	r2, [sp, #16]
    1ba6:	0210      	lsls	r0, r2, #8
    1ba8:	4303      	orrs	r3, r0
    1baa:	4642      	mov	r2, r8
    1bac:	0750      	lsls	r0, r2, #29
    1bae:	4318      	orrs	r0, r3

	if (config->use_external_clock == false) {
    1bb0:	232f      	movs	r3, #47	; 0x2f
    1bb2:	5cf3      	ldrb	r3, [r6, r3]
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d101      	bne.n	1bbc <usart_init+0x1c8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1bb8:	3304      	adds	r3, #4
    1bba:	4318      	orrs	r0, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1bbc:	7e71      	ldrb	r1, [r6, #25]
    1bbe:	0289      	lsls	r1, r1, #10
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1bc0:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1bc2:	5cf3      	ldrb	r3, [r6, r3]
    1bc4:	025b      	lsls	r3, r3, #9
    1bc6:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1bc8:	2326      	movs	r3, #38	; 0x26
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1bca:	5cf3      	ldrb	r3, [r6, r3]
    1bcc:	021b      	lsls	r3, r3, #8
    1bce:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1bd0:	232c      	movs	r3, #44	; 0x2c
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1bd2:	5cf3      	ldrb	r3, [r6, r3]
    1bd4:	045b      	lsls	r3, r3, #17
    1bd6:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1bd8:	232d      	movs	r3, #45	; 0x2d
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1bda:	5cf2      	ldrb	r2, [r6, r3]
    1bdc:	0412      	lsls	r2, r2, #16
    1bde:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1be0:	7af3      	ldrb	r3, [r6, #11]
    1be2:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1be4:	8933      	ldrh	r3, [r6, #8]
    1be6:	2bff      	cmp	r3, #255	; 0xff
    1be8:	d004      	beq.n	1bf4 <usart_init+0x200>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1bea:	2280      	movs	r2, #128	; 0x80
    1bec:	0452      	lsls	r2, r2, #17
    1bee:	4310      	orrs	r0, r2
		ctrlb |= config->parity;
    1bf0:	4319      	orrs	r1, r3
    1bf2:	e005      	b.n	1c00 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1bf4:	7ef3      	ldrb	r3, [r6, #27]
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d002      	beq.n	1c00 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1bfa:	2380      	movs	r3, #128	; 0x80
    1bfc:	04db      	lsls	r3, r3, #19
    1bfe:	4318      	orrs	r0, r3
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c00:	9f02      	ldr	r7, [sp, #8]
    1c02:	68bb      	ldr	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;
    1c04:	2207      	movs	r2, #7
    1c06:	4013      	ands	r3, r2
    1c08:	8c32      	ldrh	r2, [r6, #32]
    1c0a:	4313      	orrs	r3, r2
    1c0c:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    1c0e:	4313      	orrs	r3, r2
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_LIN_MASTER
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c10:	60bb      	str	r3, [r7, #8]
						| config->lin_header_delay
						| config->lin_break_length;

	if (config->lin_node != LIN_INVALID_MODE) {
    1c12:	69f2      	ldr	r2, [r6, #28]
    1c14:	2a00      	cmp	r2, #0
    1c16:	d002      	beq.n	1c1e <usart_init+0x22a>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1c18:	4b54      	ldr	r3, [pc, #336]	; (1d6c <usart_init+0x378>)
    1c1a:	4018      	ands	r0, r3
		ctrla |= config->lin_node;
    1c1c:	4310      	orrs	r0, r2
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1c1e:	2334      	movs	r3, #52	; 0x34
    1c20:	5cf3      	ldrb	r3, [r6, r3]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d103      	bne.n	1c2e <usart_init+0x23a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c26:	4b52      	ldr	r3, [pc, #328]	; (1d70 <usart_init+0x37c>)
    1c28:	789b      	ldrb	r3, [r3, #2]
    1c2a:	079b      	lsls	r3, r3, #30
    1c2c:	d501      	bpl.n	1c32 <usart_init+0x23e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1c2e:	2380      	movs	r3, #128	; 0x80
    1c30:	4318      	orrs	r0, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c32:	682a      	ldr	r2, [r5, #0]
    1c34:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c36:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c38:	2b00      	cmp	r3, #0
    1c3a:	d1fc      	bne.n	1c36 <usart_init+0x242>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1c3c:	6079      	str	r1, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c3e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c40:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c42:	2b00      	cmp	r3, #0
    1c44:	d1fc      	bne.n	1c40 <usart_init+0x24c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1c46:	6038      	str	r0, [r7, #0]

#ifdef FEATURE_USART_RS485
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1c48:	683a      	ldr	r2, [r7, #0]
    1c4a:	23f0      	movs	r3, #240	; 0xf0
    1c4c:	051b      	lsls	r3, r3, #20
    1c4e:	4013      	ands	r3, r2
    1c50:	22e0      	movs	r2, #224	; 0xe0
    1c52:	04d2      	lsls	r2, r2, #19
    1c54:	4293      	cmp	r3, r2
    1c56:	d03f      	beq.n	1cd8 <usart_init+0x2e4>
		SERCOM_USART_CTRLA_FORM(0x07)) {
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1c58:	68bb      	ldr	r3, [r7, #8]
    1c5a:	2207      	movs	r2, #7
    1c5c:	4393      	bics	r3, r2
    1c5e:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1c60:	68ba      	ldr	r2, [r7, #8]
    1c62:	2325      	movs	r3, #37	; 0x25
    1c64:	5cf3      	ldrb	r3, [r6, r3]
    1c66:	2107      	movs	r1, #7
    1c68:	400b      	ands	r3, r1
    1c6a:	4313      	orrs	r3, r2
    1c6c:	60bb      	str	r3, [r7, #8]
    1c6e:	e033      	b.n	1cd8 <usart_init+0x2e4>
    1c70:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c72:	00bb      	lsls	r3, r7, #2
    1c74:	aa0a      	add	r2, sp, #40	; 0x28
    1c76:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1c78:	2800      	cmp	r0, #0
    1c7a:	d102      	bne.n	1c82 <usart_init+0x28e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c7c:	0020      	movs	r0, r4
    1c7e:	4b3d      	ldr	r3, [pc, #244]	; (1d74 <usart_init+0x380>)
    1c80:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1c82:	1c43      	adds	r3, r0, #1
    1c84:	d005      	beq.n	1c92 <usart_init+0x29e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1c86:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c88:	0c00      	lsrs	r0, r0, #16
    1c8a:	b2c0      	uxtb	r0, r0
    1c8c:	0031      	movs	r1, r6
    1c8e:	4b3a      	ldr	r3, [pc, #232]	; (1d78 <usart_init+0x384>)
    1c90:	4798      	blx	r3
    1c92:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c94:	2f04      	cmp	r7, #4
    1c96:	d1eb      	bne.n	1c70 <usart_init+0x27c>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1c98:	2300      	movs	r3, #0
    1c9a:	60eb      	str	r3, [r5, #12]
    1c9c:	612b      	str	r3, [r5, #16]
    1c9e:	616b      	str	r3, [r5, #20]
    1ca0:	61ab      	str	r3, [r5, #24]
    1ca2:	61eb      	str	r3, [r5, #28]
    1ca4:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1ca6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1ca8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1caa:	2200      	movs	r2, #0
    1cac:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1cae:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1cb0:	3330      	adds	r3, #48	; 0x30
    1cb2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1cb4:	3301      	adds	r3, #1
    1cb6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1cb8:	3301      	adds	r3, #1
    1cba:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1cbc:	3301      	adds	r3, #1
    1cbe:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cc0:	6828      	ldr	r0, [r5, #0]
    1cc2:	4b22      	ldr	r3, [pc, #136]	; (1d4c <usart_init+0x358>)
    1cc4:	4798      	blx	r3
    1cc6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1cc8:	492c      	ldr	r1, [pc, #176]	; (1d7c <usart_init+0x388>)
    1cca:	4b2d      	ldr	r3, [pc, #180]	; (1d80 <usart_init+0x38c>)
    1ccc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1cce:	00a4      	lsls	r4, r4, #2
    1cd0:	4b2c      	ldr	r3, [pc, #176]	; (1d84 <usart_init+0x390>)
    1cd2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1cd4:	2300      	movs	r3, #0
    1cd6:	e031      	b.n	1d3c <usart_init+0x348>
    1cd8:	ab0e      	add	r3, sp, #56	; 0x38
    1cda:	2280      	movs	r2, #128	; 0x80
    1cdc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cde:	2200      	movs	r2, #0
    1ce0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1ce2:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ce4:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1ce6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1ce8:	930a      	str	r3, [sp, #40]	; 0x28
    1cea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1cec:	930b      	str	r3, [sp, #44]	; 0x2c
    1cee:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1cf0:	930c      	str	r3, [sp, #48]	; 0x30
    1cf2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1cf4:	9302      	str	r3, [sp, #8]
    1cf6:	930d      	str	r3, [sp, #52]	; 0x34
    1cf8:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1cfa:	ae0e      	add	r6, sp, #56	; 0x38
    1cfc:	e7b8      	b.n	1c70 <usart_init+0x27c>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1cfe:	2310      	movs	r3, #16
    1d00:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d02:	2300      	movs	r3, #0
    1d04:	9307      	str	r3, [sp, #28]
    1d06:	e003      	b.n	1d10 <usart_init+0x31c>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1d08:	2303      	movs	r3, #3
    1d0a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d0c:	2300      	movs	r3, #0
    1d0e:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1d10:	6833      	ldr	r3, [r6, #0]
    1d12:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1d14:	68f3      	ldr	r3, [r6, #12]
    1d16:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1d18:	6973      	ldr	r3, [r6, #20]
    1d1a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d1c:	7e33      	ldrb	r3, [r6, #24]
    1d1e:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d20:	232e      	movs	r3, #46	; 0x2e
    1d22:	5cf3      	ldrb	r3, [r6, r3]
    1d24:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1d26:	6873      	ldr	r3, [r6, #4]
    1d28:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d100      	bne.n	1d30 <usart_init+0x33c>
    1d2e:	e6f9      	b.n	1b24 <usart_init+0x130>
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	055b      	lsls	r3, r3, #21
    1d34:	459a      	cmp	sl, r3
    1d36:	d100      	bne.n	1d3a <usart_init+0x346>
    1d38:	e6de      	b.n	1af8 <usart_init+0x104>
    1d3a:	e718      	b.n	1b6e <usart_init+0x17a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1d3c:	0018      	movs	r0, r3
    1d3e:	b011      	add	sp, #68	; 0x44
    1d40:	bc3c      	pop	{r2, r3, r4, r5}
    1d42:	4690      	mov	r8, r2
    1d44:	4699      	mov	r9, r3
    1d46:	46a2      	mov	sl, r4
    1d48:	46ab      	mov	fp, r5
    1d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d4c:	000018ed 	.word	0x000018ed
    1d50:	40000800 	.word	0x40000800
    1d54:	00002551 	.word	0x00002551
    1d58:	000024e1 	.word	0x000024e1
    1d5c:	00001715 	.word	0x00001715
    1d60:	00002575 	.word	0x00002575
    1d64:	00001525 	.word	0x00001525
    1d68:	0000154d 	.word	0x0000154d
    1d6c:	f0ffffff 	.word	0xf0ffffff
    1d70:	41002000 	.word	0x41002000
    1d74:	00001761 	.word	0x00001761
    1d78:	0000264d 	.word	0x0000264d
    1d7c:	00001e25 	.word	0x00001e25
    1d80:	0000192d 	.word	0x0000192d
    1d84:	20000634 	.word	0x20000634

00001d88 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d88:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1d8a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d8c:	2a00      	cmp	r2, #0
    1d8e:	d00e      	beq.n	1dae <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1d90:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1d92:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d94:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1d96:	2a00      	cmp	r2, #0
    1d98:	d109      	bne.n	1dae <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d9a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1d9c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1d9e:	2a00      	cmp	r2, #0
    1da0:	d1fc      	bne.n	1d9c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1da2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1da4:	2102      	movs	r1, #2
    1da6:	7e1a      	ldrb	r2, [r3, #24]
    1da8:	420a      	tst	r2, r1
    1daa:	d0fc      	beq.n	1da6 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1dac:	2300      	movs	r3, #0
}
    1dae:	0018      	movs	r0, r3
    1db0:	4770      	bx	lr
    1db2:	46c0      	nop			; (mov r8, r8)

00001db4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1db4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1db6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1db8:	2a00      	cmp	r2, #0
    1dba:	d030      	beq.n	1e1e <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1dbc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1dbe:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1dc0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1dc2:	2a00      	cmp	r2, #0
    1dc4:	d12b      	bne.n	1e1e <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dc6:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1dc8:	7e10      	ldrb	r0, [r2, #24]
    1dca:	0740      	lsls	r0, r0, #29
    1dcc:	d527      	bpl.n	1e1e <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1dce:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d1fc      	bne.n	1dce <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1dd4:	8b53      	ldrh	r3, [r2, #26]
    1dd6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1dd8:	0658      	lsls	r0, r3, #25
    1dda:	d01d      	beq.n	1e18 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ddc:	0798      	lsls	r0, r3, #30
    1dde:	d503      	bpl.n	1de8 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1de0:	2302      	movs	r3, #2
    1de2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1de4:	3318      	adds	r3, #24
    1de6:	e01a      	b.n	1e1e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1de8:	0758      	lsls	r0, r3, #29
    1dea:	d503      	bpl.n	1df4 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1dec:	2304      	movs	r3, #4
    1dee:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    1df0:	331a      	adds	r3, #26
    1df2:	e014      	b.n	1e1e <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1df4:	07d8      	lsls	r0, r3, #31
    1df6:	d503      	bpl.n	1e00 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1df8:	2301      	movs	r3, #1
    1dfa:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1dfc:	3312      	adds	r3, #18
    1dfe:	e00e      	b.n	1e1e <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1e00:	06d8      	lsls	r0, r3, #27
    1e02:	d503      	bpl.n	1e0c <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1e04:	2310      	movs	r3, #16
    1e06:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1e08:	3332      	adds	r3, #50	; 0x32
    1e0a:	e008      	b.n	1e1e <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1e0c:	069b      	lsls	r3, r3, #26
    1e0e:	d503      	bpl.n	1e18 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1e10:	2320      	movs	r3, #32
    1e12:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1e14:	3321      	adds	r3, #33	; 0x21
    1e16:	e002      	b.n	1e1e <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1e18:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1e1a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1e1c:	2300      	movs	r3, #0
}
    1e1e:	0018      	movs	r0, r3
    1e20:	4770      	bx	lr
    1e22:	46c0      	nop			; (mov r8, r8)

00001e24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1e26:	0080      	lsls	r0, r0, #2
    1e28:	4b61      	ldr	r3, [pc, #388]	; (1fb0 <_usart_interrupt_handler+0x18c>)
    1e2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1e2c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1e2e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1e30:	2b00      	cmp	r3, #0
    1e32:	d1fc      	bne.n	1e2e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1e34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1e36:	7da6      	ldrb	r6, [r4, #22]
    1e38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1e3a:	2330      	movs	r3, #48	; 0x30
    1e3c:	5ceb      	ldrb	r3, [r5, r3]
    1e3e:	2231      	movs	r2, #49	; 0x31
    1e40:	5caf      	ldrb	r7, [r5, r2]
    1e42:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1e44:	07f3      	lsls	r3, r6, #31
    1e46:	d522      	bpl.n	1e8e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1e48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e4a:	b29b      	uxth	r3, r3
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d01c      	beq.n	1e8a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1e52:	7813      	ldrb	r3, [r2, #0]
    1e54:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1e56:	1c51      	adds	r1, r2, #1
    1e58:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e5a:	7969      	ldrb	r1, [r5, #5]
    1e5c:	2901      	cmp	r1, #1
    1e5e:	d001      	beq.n	1e64 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e60:	b29b      	uxth	r3, r3
    1e62:	e004      	b.n	1e6e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e64:	7851      	ldrb	r1, [r2, #1]
    1e66:	0209      	lsls	r1, r1, #8
    1e68:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1e6a:	3202      	adds	r2, #2
    1e6c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1e6e:	05db      	lsls	r3, r3, #23
    1e70:	0ddb      	lsrs	r3, r3, #23
    1e72:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e74:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e76:	3b01      	subs	r3, #1
    1e78:	b29b      	uxth	r3, r3
    1e7a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d106      	bne.n	1e8e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e80:	3301      	adds	r3, #1
    1e82:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e84:	3301      	adds	r3, #1
    1e86:	75a3      	strb	r3, [r4, #22]
    1e88:	e001      	b.n	1e8e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e8a:	2301      	movs	r3, #1
    1e8c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e8e:	07b3      	lsls	r3, r6, #30
    1e90:	d509      	bpl.n	1ea6 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1e92:	2302      	movs	r3, #2
    1e94:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1e96:	2200      	movs	r2, #0
    1e98:	3331      	adds	r3, #49	; 0x31
    1e9a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1e9c:	07fb      	lsls	r3, r7, #31
    1e9e:	d502      	bpl.n	1ea6 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1ea0:	0028      	movs	r0, r5
    1ea2:	68eb      	ldr	r3, [r5, #12]
    1ea4:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1ea6:	0773      	lsls	r3, r6, #29
    1ea8:	d563      	bpl.n	1f72 <_usart_interrupt_handler+0x14e>

		if (module->remaining_rx_buffer_length) {
    1eaa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1eac:	b29b      	uxth	r3, r3
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d05d      	beq.n	1f6e <_usart_interrupt_handler+0x14a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1eb2:	8b63      	ldrh	r3, [r4, #26]
    1eb4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1eb6:	071a      	lsls	r2, r3, #28
    1eb8:	d402      	bmi.n	1ec0 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1eba:	227f      	movs	r2, #127	; 0x7f
    1ebc:	4013      	ands	r3, r2
    1ebe:	e001      	b.n	1ec4 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1ec0:	2277      	movs	r2, #119	; 0x77
    1ec2:	4013      	ands	r3, r2
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1ec4:	065a      	lsls	r2, r3, #25
    1ec6:	d501      	bpl.n	1ecc <_usart_interrupt_handler+0xa8>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1ec8:	2240      	movs	r2, #64	; 0x40
    1eca:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1ecc:	2b00      	cmp	r3, #0
    1ece:	d02c      	beq.n	1f2a <_usart_interrupt_handler+0x106>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1ed0:	079a      	lsls	r2, r3, #30
    1ed2:	d505      	bpl.n	1ee0 <_usart_interrupt_handler+0xbc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ed4:	221a      	movs	r2, #26
    1ed6:	2332      	movs	r3, #50	; 0x32
    1ed8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1eda:	3b30      	subs	r3, #48	; 0x30
    1edc:	8363      	strh	r3, [r4, #26]
    1ede:	e01e      	b.n	1f1e <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ee0:	075a      	lsls	r2, r3, #29
    1ee2:	d505      	bpl.n	1ef0 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ee4:	221e      	movs	r2, #30
    1ee6:	2332      	movs	r3, #50	; 0x32
    1ee8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1eea:	3b2e      	subs	r3, #46	; 0x2e
    1eec:	8363      	strh	r3, [r4, #26]
    1eee:	e016      	b.n	1f1e <_usart_interrupt_handler+0xfa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ef0:	07da      	lsls	r2, r3, #31
    1ef2:	d505      	bpl.n	1f00 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ef4:	2213      	movs	r2, #19
    1ef6:	2332      	movs	r3, #50	; 0x32
    1ef8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1efa:	3b31      	subs	r3, #49	; 0x31
    1efc:	8363      	strh	r3, [r4, #26]
    1efe:	e00e      	b.n	1f1e <_usart_interrupt_handler+0xfa>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1f00:	06da      	lsls	r2, r3, #27
    1f02:	d505      	bpl.n	1f10 <_usart_interrupt_handler+0xec>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1f04:	2242      	movs	r2, #66	; 0x42
    1f06:	2332      	movs	r3, #50	; 0x32
    1f08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1f0a:	3b22      	subs	r3, #34	; 0x22
    1f0c:	8363      	strh	r3, [r4, #26]
    1f0e:	e006      	b.n	1f1e <_usart_interrupt_handler+0xfa>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1f10:	069b      	lsls	r3, r3, #26
    1f12:	d504      	bpl.n	1f1e <_usart_interrupt_handler+0xfa>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1f14:	2241      	movs	r2, #65	; 0x41
    1f16:	2332      	movs	r3, #50	; 0x32
    1f18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f1a:	3b12      	subs	r3, #18
    1f1c:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1f1e:	077b      	lsls	r3, r7, #29
    1f20:	d527      	bpl.n	1f72 <_usart_interrupt_handler+0x14e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1f22:	0028      	movs	r0, r5
    1f24:	696b      	ldr	r3, [r5, #20]
    1f26:	4798      	blx	r3
    1f28:	e023      	b.n	1f72 <_usart_interrupt_handler+0x14e>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1f2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1f2c:	05db      	lsls	r3, r3, #23
    1f2e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1f30:	b2da      	uxtb	r2, r3
    1f32:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1f34:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1f36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1f38:	1c51      	adds	r1, r2, #1
    1f3a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f3c:	7969      	ldrb	r1, [r5, #5]
    1f3e:	2901      	cmp	r1, #1
    1f40:	d104      	bne.n	1f4c <_usart_interrupt_handler+0x128>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1f42:	0a1b      	lsrs	r3, r3, #8
    1f44:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f48:	3301      	adds	r3, #1
    1f4a:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1f4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1f4e:	3b01      	subs	r3, #1
    1f50:	b29b      	uxth	r3, r3
    1f52:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1f54:	2b00      	cmp	r3, #0
    1f56:	d10c      	bne.n	1f72 <_usart_interrupt_handler+0x14e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f58:	3304      	adds	r3, #4
    1f5a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1f5c:	2200      	movs	r2, #0
    1f5e:	332e      	adds	r3, #46	; 0x2e
    1f60:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1f62:	07bb      	lsls	r3, r7, #30
    1f64:	d505      	bpl.n	1f72 <_usart_interrupt_handler+0x14e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1f66:	0028      	movs	r0, r5
    1f68:	692b      	ldr	r3, [r5, #16]
    1f6a:	4798      	blx	r3
    1f6c:	e001      	b.n	1f72 <_usart_interrupt_handler+0x14e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f6e:	2304      	movs	r3, #4
    1f70:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f72:	06f3      	lsls	r3, r6, #27
    1f74:	d507      	bpl.n	1f86 <_usart_interrupt_handler+0x162>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f76:	2310      	movs	r3, #16
    1f78:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f7a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f7c:	06fb      	lsls	r3, r7, #27
    1f7e:	d502      	bpl.n	1f86 <_usart_interrupt_handler+0x162>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f80:	0028      	movs	r0, r5
    1f82:	69eb      	ldr	r3, [r5, #28]
    1f84:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f86:	06b3      	lsls	r3, r6, #26
    1f88:	d507      	bpl.n	1f9a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f8a:	2320      	movs	r3, #32
    1f8c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f8e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1f90:	073b      	lsls	r3, r7, #28
    1f92:	d502      	bpl.n	1f9a <_usart_interrupt_handler+0x176>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1f94:	0028      	movs	r0, r5
    1f96:	69ab      	ldr	r3, [r5, #24]
    1f98:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1f9a:	0733      	lsls	r3, r6, #28
    1f9c:	d507      	bpl.n	1fae <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1f9e:	2308      	movs	r3, #8
    1fa0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1fa2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1fa4:	06bb      	lsls	r3, r7, #26
    1fa6:	d502      	bpl.n	1fae <_usart_interrupt_handler+0x18a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1fa8:	6a2b      	ldr	r3, [r5, #32]
    1faa:	0028      	movs	r0, r5
    1fac:	4798      	blx	r3
		}
	}
#endif
}
    1fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fb0:	20000634 	.word	0x20000634

00001fb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1fb4:	b510      	push	{r4, lr}
	switch (clock_source) {
    1fb6:	2807      	cmp	r0, #7
    1fb8:	d803      	bhi.n	1fc2 <system_clock_source_get_hz+0xe>
    1fba:	0080      	lsls	r0, r0, #2
    1fbc:	4b0f      	ldr	r3, [pc, #60]	; (1ffc <system_clock_source_get_hz+0x48>)
    1fbe:	581b      	ldr	r3, [r3, r0]
    1fc0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1fc2:	2000      	movs	r0, #0
    1fc4:	e018      	b.n	1ff8 <system_clock_source_get_hz+0x44>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1fc6:	4b0e      	ldr	r3, [pc, #56]	; (2000 <STACK_SIZE>)
    1fc8:	6858      	ldr	r0, [r3, #4]
    1fca:	e015      	b.n	1ff8 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1fcc:	4b0d      	ldr	r3, [pc, #52]	; (2004 <STACK_SIZE+0x4>)
    1fce:	7d59      	ldrb	r1, [r3, #21]
    1fd0:	0709      	lsls	r1, r1, #28
    1fd2:	0f09      	lsrs	r1, r1, #28
    1fd4:	3101      	adds	r1, #1
    1fd6:	480c      	ldr	r0, [pc, #48]	; (2008 <STACK_SIZE+0x8>)
    1fd8:	4b0c      	ldr	r3, [pc, #48]	; (200c <STACK_SIZE+0xc>)
    1fda:	4798      	blx	r3
    1fdc:	e00c      	b.n	1ff8 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1fde:	4b08      	ldr	r3, [pc, #32]	; (2000 <STACK_SIZE>)
    1fe0:	6898      	ldr	r0, [r3, #8]
    1fe2:	e009      	b.n	1ff8 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1fe4:	4b07      	ldr	r3, [pc, #28]	; (2004 <STACK_SIZE+0x4>)
    1fe6:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1fe8:	2000      	movs	r0, #0

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1fea:	079b      	lsls	r3, r3, #30
    1fec:	d504      	bpl.n	1ff8 <system_clock_source_get_hz+0x44>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <STACK_SIZE>)
    1ff0:	6818      	ldr	r0, [r3, #0]
    1ff2:	e001      	b.n	1ff8 <system_clock_source_get_hz+0x44>

	case SYSTEM_CLOCK_SOURCE_OSC48M:
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1ff4:	2080      	movs	r0, #128	; 0x80
    1ff6:	0200      	lsls	r0, r0, #8
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	00004f14 	.word	0x00004f14
    2000:	200004d8 	.word	0x200004d8
    2004:	40001000 	.word	0x40001000
    2008:	02dc6c00 	.word	0x02dc6c00
    200c:	000036f5 	.word	0x000036f5

00002010 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2010:	b5f0      	push	{r4, r5, r6, r7, lr}
    2012:	465f      	mov	r7, fp
    2014:	4656      	mov	r6, sl
    2016:	464d      	mov	r5, r9
    2018:	4644      	mov	r4, r8
    201a:	b4f0      	push	{r4, r5, r6, r7}
    201c:	b083      	sub	sp, #12
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    201e:	4f30      	ldr	r7, [pc, #192]	; (20e0 <system_clock_source_xosc32k_set_config+0xd0>)
    2020:	8abb      	ldrh	r3, [r7, #20]
    2022:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    2024:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2026:	7803      	ldrb	r3, [r0, #0]
    2028:	425a      	negs	r2, r3
    202a:	415a      	adcs	r2, r3
    202c:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    202e:	7883      	ldrb	r3, [r0, #2]
    2030:	469b      	mov	fp, r3
	temp.bit.EN32K = config->enable_32khz_output;
    2032:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    2034:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2036:	7a02      	ldrb	r2, [r0, #8]
    2038:	9200      	str	r2, [sp, #0]
	temp.bit.WRTLOCK  = config->write_once;
    203a:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    203c:	4a29      	ldr	r2, [pc, #164]	; (20e4 <system_clock_source_xosc32k_set_config+0xd4>)
    203e:	6841      	ldr	r1, [r0, #4]
    2040:	6091      	str	r1, [r2, #8]

	OSC32KCTRL->CFDCTRL.reg =
    2042:	7ac2      	ldrb	r2, [r0, #11]
    2044:	0092      	lsls	r2, r2, #2
    2046:	4692      	mov	sl, r2
    2048:	7b82      	ldrb	r2, [r0, #14]
    204a:	0052      	lsls	r2, r2, #1
    204c:	4691      	mov	r9, r2
    204e:	4652      	mov	r2, sl
    2050:	4649      	mov	r1, r9
    2052:	430a      	orrs	r2, r1
    2054:	4691      	mov	r9, r2
    2056:	7b42      	ldrb	r2, [r0, #13]
    2058:	4692      	mov	sl, r2
    205a:	464a      	mov	r2, r9
    205c:	4651      	mov	r1, sl
    205e:	430a      	orrs	r2, r1
    2060:	4669      	mov	r1, sp
    2062:	71ca      	strb	r2, [r1, #7]
    2064:	79ca      	ldrb	r2, [r1, #7]
    2066:	75ba      	strb	r2, [r7, #22]
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);

	OSC32KCTRL->EVCTRL.reg =
    2068:	7b00      	ldrb	r0, [r0, #12]
    206a:	75f8      	strb	r0, [r7, #23]
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);

	OSC32KCTRL->XOSC32K = temp;
    206c:	2001      	movs	r0, #1
    206e:	4642      	mov	r2, r8
    2070:	0092      	lsls	r2, r2, #2
    2072:	4690      	mov	r8, r2
    2074:	2204      	movs	r2, #4
    2076:	4691      	mov	r9, r2
    2078:	4662      	mov	r2, ip
    207a:	4649      	mov	r1, r9
    207c:	438a      	bics	r2, r1
    207e:	4694      	mov	ip, r2
    2080:	4642      	mov	r2, r8
    2082:	4661      	mov	r1, ip
    2084:	430a      	orrs	r2, r1
    2086:	4694      	mov	ip, r2
    2088:	4003      	ands	r3, r0
    208a:	00db      	lsls	r3, r3, #3
    208c:	2208      	movs	r2, #8
    208e:	4690      	mov	r8, r2
    2090:	4662      	mov	r2, ip
    2092:	4641      	mov	r1, r8
    2094:	438a      	bics	r2, r1
    2096:	4313      	orrs	r3, r2
    2098:	4659      	mov	r1, fp
    209a:	4001      	ands	r1, r0
    209c:	0109      	lsls	r1, r1, #4
    209e:	2210      	movs	r2, #16
    20a0:	4393      	bics	r3, r2
    20a2:	430b      	orrs	r3, r1
    20a4:	9a00      	ldr	r2, [sp, #0]
    20a6:	4002      	ands	r2, r0
    20a8:	0192      	lsls	r2, r2, #6
    20aa:	2140      	movs	r1, #64	; 0x40
    20ac:	438b      	bics	r3, r1
    20ae:	4313      	orrs	r3, r2
    20b0:	4006      	ands	r6, r0
    20b2:	01f6      	lsls	r6, r6, #7
    20b4:	2280      	movs	r2, #128	; 0x80
    20b6:	4393      	bics	r3, r2
    20b8:	4333      	orrs	r3, r6
    20ba:	3a79      	subs	r2, #121	; 0x79
    20bc:	4015      	ands	r5, r2
    20be:	022d      	lsls	r5, r5, #8
    20c0:	4e09      	ldr	r6, [pc, #36]	; (20e8 <system_clock_source_xosc32k_set_config+0xd8>)
    20c2:	4033      	ands	r3, r6
    20c4:	432b      	orrs	r3, r5
    20c6:	4004      	ands	r4, r0
    20c8:	0320      	lsls	r0, r4, #12
    20ca:	4c08      	ldr	r4, [pc, #32]	; (20ec <system_clock_source_xosc32k_set_config+0xdc>)
    20cc:	401c      	ands	r4, r3
    20ce:	4304      	orrs	r4, r0
    20d0:	82bc      	strh	r4, [r7, #20]
}
    20d2:	b003      	add	sp, #12
    20d4:	bc3c      	pop	{r2, r3, r4, r5}
    20d6:	4690      	mov	r8, r2
    20d8:	4699      	mov	r9, r3
    20da:	46a2      	mov	sl, r4
    20dc:	46ab      	mov	fp, r5
    20de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e0:	40001400 	.word	0x40001400
    20e4:	200004d8 	.word	0x200004d8
    20e8:	fffff8ff 	.word	0xfffff8ff
    20ec:	ffffefff 	.word	0xffffefff

000020f0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    20f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20f2:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    20f4:	68c3      	ldr	r3, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    20f6:	7d02      	ldrb	r2, [r0, #20]
    20f8:	2a01      	cmp	r2, #1
    20fa:	d104      	bne.n	2106 <system_clock_source_dpll_set_config+0x16>
		refclk = refclk / config->reference_divider;
    20fc:	8a01      	ldrh	r1, [r0, #16]
    20fe:	0018      	movs	r0, r3
    2100:	4b28      	ldr	r3, [pc, #160]	; (21a4 <system_clock_source_dpll_set_config+0xb4>)
    2102:	4798      	blx	r3
    2104:	0003      	movs	r3, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2106:	68a2      	ldr	r2, [r4, #8]
    2108:	0110      	lsls	r0, r2, #4
    210a:	0019      	movs	r1, r3
    210c:	4b25      	ldr	r3, [pc, #148]	; (21a4 <system_clock_source_dpll_set_config+0xb4>)
    210e:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    2110:	260f      	movs	r6, #15
    2112:	4006      	ands	r6, r0
	tmpldr = (tmpldr >> 4) - 1;
    2114:	0900      	lsrs	r0, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
    2116:	7823      	ldrb	r3, [r4, #0]
    2118:	01da      	lsls	r2, r3, #7
    211a:	7863      	ldrb	r3, [r4, #1]
    211c:	019b      	lsls	r3, r3, #6
    211e:	4313      	orrs	r3, r2
    2120:	b2db      	uxtb	r3, r3
    2122:	4a21      	ldr	r2, [pc, #132]	; (21a8 <system_clock_source_dpll_set_config+0xb8>)
    2124:	7713      	strb	r3, [r2, #28]
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2126:	0431      	lsls	r1, r6, #16
    2128:	1e43      	subs	r3, r0, #1
    212a:	051b      	lsls	r3, r3, #20
    212c:	0d1b      	lsrs	r3, r3, #20
    212e:	430b      	orrs	r3, r1

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	OSCCTRL->DPLLRATIO.reg =
    2130:	6213      	str	r3, [r2, #32]
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    2132:	0015      	movs	r5, r2
    2134:	212c      	movs	r1, #44	; 0x2c
    2136:	2204      	movs	r2, #4
    2138:	5c6b      	ldrb	r3, [r5, r1]
    213a:	4213      	tst	r3, r2
    213c:	d1fc      	bne.n	2138 <system_clock_source_dpll_set_config+0x48>
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    213e:	78a1      	ldrb	r1, [r4, #2]
    2140:	0309      	lsls	r1, r1, #12
    2142:	78e3      	ldrb	r3, [r4, #3]
    2144:	00db      	lsls	r3, r3, #3
    2146:	4319      	orrs	r1, r3
    2148:	7923      	ldrb	r3, [r4, #4]
    214a:	009b      	lsls	r3, r3, #2
    214c:	4319      	orrs	r1, r3
    214e:	7ca3      	ldrb	r3, [r4, #18]
    2150:	2703      	movs	r7, #3
    2152:	403b      	ands	r3, r7
    2154:	4319      	orrs	r1, r3
    2156:	8a25      	ldrh	r5, [r4, #16]
    2158:	042d      	lsls	r5, r5, #16
    215a:	4a14      	ldr	r2, [pc, #80]	; (21ac <system_clock_source_dpll_set_config+0xbc>)
    215c:	002b      	movs	r3, r5
    215e:	4013      	ands	r3, r2
    2160:	4319      	orrs	r1, r3
    2162:	7ce3      	ldrb	r3, [r4, #19]
    2164:	021b      	lsls	r3, r3, #8
    2166:	22e0      	movs	r2, #224	; 0xe0
    2168:	00d2      	lsls	r2, r2, #3
    216a:	4013      	ands	r3, r2
    216c:	4319      	orrs	r1, r3
    216e:	7d22      	ldrb	r2, [r4, #20]
    2170:	0112      	lsls	r2, r2, #4
    2172:	2330      	movs	r3, #48	; 0x30
    2174:	4013      	ands	r3, r2
    2176:	430b      	orrs	r3, r1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
		}

	OSCCTRL->DPLLCTRLB.reg =
    2178:	4a0b      	ldr	r2, [pc, #44]	; (21a8 <system_clock_source_dpll_set_config+0xb8>)
    217a:	6253      	str	r3, [r2, #36]	; 0x24
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    217c:	7d63      	ldrb	r3, [r4, #21]
    217e:	401f      	ands	r7, r3
    2180:	2328      	movs	r3, #40	; 0x28
    2182:	54d7      	strb	r7, [r2, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    2184:	0015      	movs	r5, r2
    2186:	212c      	movs	r1, #44	; 0x2c
    2188:	2208      	movs	r2, #8
    218a:	5c6b      	ldrb	r3, [r5, r1]
    218c:	4213      	tst	r3, r2
    218e:	d1fc      	bne.n	218a <system_clock_source_dpll_set_config+0x9a>
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
    2190:	0100      	lsls	r0, r0, #4
    2192:	1986      	adds	r6, r0, r6
    2194:	68e3      	ldr	r3, [r4, #12]
    2196:	435e      	muls	r6, r3
    2198:	7d63      	ldrb	r3, [r4, #21]
    219a:	3304      	adds	r3, #4
    219c:	40de      	lsrs	r6, r3
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
		}
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
    219e:	4b04      	ldr	r3, [pc, #16]	; (21b0 <system_clock_source_dpll_set_config+0xc0>)
    21a0:	601e      	str	r6, [r3, #0]
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> (4 + config->prescaler);
}
    21a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21a4:	000036f5 	.word	0x000036f5
    21a8:	40001000 	.word	0x40001000
    21ac:	07ff0000 	.word	0x07ff0000
    21b0:	200004d8 	.word	0x200004d8

000021b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    21b4:	2807      	cmp	r0, #7
    21b6:	d803      	bhi.n	21c0 <system_clock_source_enable+0xc>
    21b8:	0080      	lsls	r0, r0, #2
    21ba:	4b18      	ldr	r3, [pc, #96]	; (221c <system_clock_source_enable+0x68>)
    21bc:	581b      	ldr	r3, [r3, r0]
    21be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    21c0:	2017      	movs	r0, #23
    21c2:	e029      	b.n	2218 <system_clock_source_enable+0x64>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC48M:
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    21c4:	4a16      	ldr	r2, [pc, #88]	; (2220 <system_clock_source_enable+0x6c>)
    21c6:	7d11      	ldrb	r1, [r2, #20]
    21c8:	2302      	movs	r3, #2
    21ca:	430b      	orrs	r3, r1
    21cc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    21ce:	2000      	movs	r0, #0
    21d0:	e022      	b.n	2218 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    21d2:	4a14      	ldr	r2, [pc, #80]	; (2224 <system_clock_source_enable+0x70>)
    21d4:	6991      	ldr	r1, [r2, #24]
    21d6:	2302      	movs	r3, #2
    21d8:	430b      	orrs	r3, r1
    21da:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    21dc:	2000      	movs	r0, #0
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    21de:	e01b      	b.n	2218 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    21e0:	4a0f      	ldr	r2, [pc, #60]	; (2220 <system_clock_source_enable+0x6c>)
    21e2:	8a11      	ldrh	r1, [r2, #16]
    21e4:	2302      	movs	r3, #2
    21e6:	430b      	orrs	r3, r1
    21e8:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    21ea:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    21ec:	e014      	b.n	2218 <system_clock_source_enable+0x64>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    21ee:	4a0d      	ldr	r2, [pc, #52]	; (2224 <system_clock_source_enable+0x70>)
    21f0:	8a91      	ldrh	r1, [r2, #20]
    21f2:	2302      	movs	r3, #2
    21f4:	430b      	orrs	r3, r1
    21f6:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    21f8:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    21fa:	e00d      	b.n	2218 <system_clock_source_enable+0x64>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    21fc:	4a08      	ldr	r2, [pc, #32]	; (2220 <system_clock_source_enable+0x6c>)
    21fe:	7f11      	ldrb	r1, [r2, #28]
    2200:	2302      	movs	r3, #2
    2202:	430b      	orrs	r3, r1
    2204:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2206:	0010      	movs	r0, r2
    2208:	212c      	movs	r1, #44	; 0x2c
    220a:	2202      	movs	r2, #2
    220c:	5c43      	ldrb	r3, [r0, r1]
    220e:	4213      	tst	r3, r2
    2210:	d1fc      	bne.n	220c <system_clock_source_enable+0x58>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2212:	2000      	movs	r0, #0
    2214:	e000      	b.n	2218 <system_clock_source_enable+0x64>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2216:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    2218:	4770      	bx	lr
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00004f34 	.word	0x00004f34
    2220:	40001000 	.word	0x40001000
    2224:	40001400 	.word	0x40001400

00002228 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
    222a:	4647      	mov	r7, r8
    222c:	b480      	push	{r7}
    222e:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    2230:	2203      	movs	r2, #3
    2232:	4b3f      	ldr	r3, [pc, #252]	; (2330 <system_clock_init+0x108>)
    2234:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2236:	493f      	ldr	r1, [pc, #252]	; (2334 <system_clock_init+0x10c>)
    2238:	684b      	ldr	r3, [r1, #4]
    223a:	321b      	adds	r2, #27
    223c:	4393      	bics	r3, r2
    223e:	3a18      	subs	r2, #24
    2240:	4313      	orrs	r3, r2
    2242:	604b      	str	r3, [r1, #4]
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2244:	a80a      	add	r0, sp, #40	; 0x28
    2246:	2300      	movs	r3, #0
    2248:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    224a:	2280      	movs	r2, #128	; 0x80
    224c:	0212      	lsls	r2, r2, #8
    224e:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2250:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2252:	2201      	movs	r2, #1
    2254:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    2256:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    2258:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    225a:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    225c:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    225e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2260:	2104      	movs	r1, #4
    2262:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2264:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2266:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2268:	4b33      	ldr	r3, [pc, #204]	; (2338 <system_clock_init+0x110>)
    226a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    226c:	2005      	movs	r0, #5
    226e:	4b33      	ldr	r3, [pc, #204]	; (233c <system_clock_init+0x114>)
    2270:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2272:	4933      	ldr	r1, [pc, #204]	; (2340 <system_clock_init+0x118>)
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2274:	2201      	movs	r2, #1
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2276:	68cb      	ldr	r3, [r1, #12]
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2278:	421a      	tst	r2, r3
    227a:	d0fc      	beq.n	2276 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    227c:	4b31      	ldr	r3, [pc, #196]	; (2344 <system_clock_init+0x11c>)
    227e:	7d19      	ldrb	r1, [r3, #20]
    2280:	2280      	movs	r2, #128	; 0x80
    2282:	430a      	orrs	r2, r1
    2284:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    2286:	2202      	movs	r2, #2
    2288:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    228a:	001a      	movs	r2, r3
    228c:	6993      	ldr	r3, [r2, #24]
    228e:	2b00      	cmp	r3, #0
    2290:	d1fc      	bne.n	228c <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2292:	4b2d      	ldr	r3, [pc, #180]	; (2348 <system_clock_init+0x120>)
    2294:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2296:	ad01      	add	r5, sp, #4
    2298:	2601      	movs	r6, #1
    229a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    229c:	2400      	movs	r4, #0
    229e:	706c      	strb	r4, [r5, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    22a0:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    22a2:	2305      	movs	r3, #5
    22a4:	702b      	strb	r3, [r5, #0]
    22a6:	722e      	strb	r6, [r5, #8]
    22a8:	0029      	movs	r1, r5
    22aa:	2001      	movs	r0, #1
    22ac:	4b27      	ldr	r3, [pc, #156]	; (234c <system_clock_init+0x124>)
    22ae:	4698      	mov	r8, r3
    22b0:	4798      	blx	r3
    22b2:	2001      	movs	r0, #1
    22b4:	4f26      	ldr	r7, [pc, #152]	; (2350 <system_clock_init+0x128>)
    22b6:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    22b8:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    22ba:	706c      	strb	r4, [r5, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    22bc:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    22be:	726c      	strb	r4, [r5, #9]
    22c0:	2307      	movs	r3, #7
    22c2:	702b      	strb	r3, [r5, #0]
    22c4:	0029      	movs	r1, r5
    22c6:	2008      	movs	r0, #8
    22c8:	47c0      	blx	r8
    22ca:	2008      	movs	r0, #8
    22cc:	47b8      	blx	r7
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
	config->lock_bypass         = false;
    22ce:	a804      	add	r0, sp, #16
    22d0:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    22d2:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    22d4:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    22d6:	4b1f      	ldr	r3, [pc, #124]	; (2354 <system_clock_init+0x12c>)
    22d8:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    22da:	8206      	strh	r6, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK;
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    22dc:	7544      	strb	r4, [r0, #21]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    22de:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    22e0:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    22e2:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    22e4:	2301      	movs	r3, #1
    22e6:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    22e8:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    22ea:	4b1b      	ldr	r3, [pc, #108]	; (2358 <system_clock_init+0x130>)
    22ec:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    22ee:	4b1b      	ldr	r3, [pc, #108]	; (235c <system_clock_init+0x134>)
    22f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    22f2:	2007      	movs	r0, #7
    22f4:	4b11      	ldr	r3, [pc, #68]	; (233c <system_clock_init+0x114>)
    22f6:	4798      	blx	r3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    22f8:	4812      	ldr	r0, [pc, #72]	; (2344 <system_clock_init+0x11c>)
    22fa:	2130      	movs	r1, #48	; 0x30
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    22fc:	2203      	movs	r2, #3
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    22fe:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2300:	4013      	ands	r3, r2
    2302:	2b03      	cmp	r3, #3
    2304:	d1fb      	bne.n	22fe <system_clock_init+0xd6>
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2306:	3b02      	subs	r3, #2
    2308:	4a15      	ldr	r2, [pc, #84]	; (2360 <system_clock_init+0x138>)
    230a:	7113      	strb	r3, [r2, #4]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    230c:	a901      	add	r1, sp, #4
    230e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2310:	2200      	movs	r2, #0
    2312:	704a      	strb	r2, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    2314:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2316:	3207      	adds	r2, #7
    2318:	700a      	strb	r2, [r1, #0]
    231a:	720b      	strb	r3, [r1, #8]
    231c:	2000      	movs	r0, #0
    231e:	4b0b      	ldr	r3, [pc, #44]	; (234c <system_clock_init+0x124>)
    2320:	4798      	blx	r3
    2322:	2000      	movs	r0, #0
    2324:	4b0a      	ldr	r3, [pc, #40]	; (2350 <system_clock_init+0x128>)
    2326:	4798      	blx	r3
#endif

}
    2328:	b00e      	add	sp, #56	; 0x38
    232a:	bc04      	pop	{r2}
    232c:	4690      	mov	r8, r2
    232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2330:	40001800 	.word	0x40001800
    2334:	41004000 	.word	0x41004000
    2338:	00002011 	.word	0x00002011
    233c:	000021b5 	.word	0x000021b5
    2340:	40001400 	.word	0x40001400
    2344:	40001000 	.word	0x40001000
    2348:	00002365 	.word	0x00002365
    234c:	00002389 	.word	0x00002389
    2350:	00002435 	.word	0x00002435
    2354:	02dc6c00 	.word	0x02dc6c00
    2358:	00007fff 	.word	0x00007fff
    235c:	000020f1 	.word	0x000020f1
    2360:	40000800 	.word	0x40000800

00002364 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    2364:	4a06      	ldr	r2, [pc, #24]	; (2380 <system_gclk_init+0x1c>)
    2366:	6951      	ldr	r1, [r2, #20]
    2368:	2380      	movs	r3, #128	; 0x80
    236a:	430b      	orrs	r3, r1
    236c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    236e:	2201      	movs	r2, #1
    2370:	4b04      	ldr	r3, [pc, #16]	; (2384 <system_gclk_init+0x20>)
    2372:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2374:	0019      	movs	r1, r3
    2376:	780b      	ldrb	r3, [r1, #0]
    2378:	4213      	tst	r3, r2
    237a:	d1fc      	bne.n	2376 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    237c:	4770      	bx	lr
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	40000800 	.word	0x40000800
    2384:	40001c00 	.word	0x40001c00

00002388 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2388:	b570      	push	{r4, r5, r6, lr}
    238a:	0005      	movs	r5, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    238c:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    238e:	784b      	ldrb	r3, [r1, #1]
    2390:	2b00      	cmp	r3, #0
    2392:	d002      	beq.n	239a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2394:	2380      	movs	r3, #128	; 0x80
    2396:	00db      	lsls	r3, r3, #3
    2398:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    239a:	7a4b      	ldrb	r3, [r1, #9]
    239c:	2b00      	cmp	r3, #0
    239e:	d002      	beq.n	23a6 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    23a0:	2380      	movs	r3, #128	; 0x80
    23a2:	011b      	lsls	r3, r3, #4
    23a4:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    23a6:	684a      	ldr	r2, [r1, #4]
    23a8:	2a01      	cmp	r2, #1
    23aa:	d917      	bls.n	23dc <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    23ac:	1e53      	subs	r3, r2, #1
    23ae:	421a      	tst	r2, r3
    23b0:	d10f      	bne.n	23d2 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    23b2:	2a02      	cmp	r2, #2
    23b4:	d906      	bls.n	23c4 <system_gclk_gen_set_config+0x3c>
    23b6:	2302      	movs	r3, #2
    23b8:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    23ba:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    23bc:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    23be:	429a      	cmp	r2, r3
    23c0:	d8fb      	bhi.n	23ba <system_gclk_gen_set_config+0x32>
    23c2:	e000      	b.n	23c6 <system_gclk_gen_set_config+0x3e>
    23c4:	2000      	movs	r0, #0
    23c6:	2380      	movs	r3, #128	; 0x80
    23c8:	015b      	lsls	r3, r3, #5
    23ca:	431c      	orrs	r4, r3
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    23cc:	0400      	lsls	r0, r0, #16
    23ce:	4304      	orrs	r4, r0
    23d0:	e004      	b.n	23dc <system_gclk_gen_set_config+0x54>

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23d2:	0412      	lsls	r2, r2, #16
    23d4:	2380      	movs	r3, #128	; 0x80
    23d6:	009b      	lsls	r3, r3, #2
    23d8:	431a      	orrs	r2, r3
    23da:	4314      	orrs	r4, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    23dc:	7a0b      	ldrb	r3, [r1, #8]
    23de:	2b00      	cmp	r3, #0
    23e0:	d002      	beq.n	23e8 <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    23e2:	2380      	movs	r3, #128	; 0x80
    23e4:	019b      	lsls	r3, r3, #6
    23e6:	431c      	orrs	r4, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23e8:	2604      	movs	r6, #4
    23ea:	40ae      	lsls	r6, r5
    23ec:	490d      	ldr	r1, [pc, #52]	; (2424 <system_gclk_gen_set_config+0x9c>)
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    23ee:	4a0e      	ldr	r2, [pc, #56]	; (2428 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23f0:	684b      	ldr	r3, [r1, #4]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    23f2:	4013      	ands	r3, r2
    23f4:	421e      	tst	r6, r3
    23f6:	d1fb      	bne.n	23f0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    23f8:	4b0c      	ldr	r3, [pc, #48]	; (242c <system_gclk_gen_set_config+0xa4>)
    23fa:	4798      	blx	r3
    23fc:	00ad      	lsls	r5, r5, #2
    23fe:	4b09      	ldr	r3, [pc, #36]	; (2424 <system_gclk_gen_set_config+0x9c>)
    2400:	469c      	mov	ip, r3
    2402:	4465      	add	r5, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2404:	6a28      	ldr	r0, [r5, #32]
    2406:	2380      	movs	r3, #128	; 0x80
    2408:	005b      	lsls	r3, r3, #1
    240a:	4018      	ands	r0, r3
    240c:	4320      	orrs	r0, r4
    240e:	6228      	str	r0, [r5, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2410:	4661      	mov	r1, ip

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    2412:	4a05      	ldr	r2, [pc, #20]	; (2428 <system_gclk_gen_set_config+0xa0>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2414:	684b      	ldr	r3, [r1, #4]

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    2416:	4013      	ands	r3, r2
    2418:	421e      	tst	r6, r3
    241a:	d1fb      	bne.n	2414 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    241c:	4b04      	ldr	r3, [pc, #16]	; (2430 <system_gclk_gen_set_config+0xa8>)
    241e:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    2420:	bd70      	pop	{r4, r5, r6, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	40001c00 	.word	0x40001c00
    2428:	000007fc 	.word	0x000007fc
    242c:	00000f05 	.word	0x00000f05
    2430:	00000f45 	.word	0x00000f45

00002434 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2434:	b510      	push	{r4, lr}
    2436:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2438:	2204      	movs	r2, #4
    243a:	4082      	lsls	r2, r0
    243c:	4809      	ldr	r0, [pc, #36]	; (2464 <system_gclk_gen_enable+0x30>)
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    243e:	490a      	ldr	r1, [pc, #40]	; (2468 <system_gclk_gen_enable+0x34>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2440:	6843      	ldr	r3, [r0, #4]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    2442:	400b      	ands	r3, r1
    2444:	421a      	tst	r2, r3
    2446:	d1fb      	bne.n	2440 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2448:	4b08      	ldr	r3, [pc, #32]	; (246c <system_gclk_gen_enable+0x38>)
    244a:	4798      	blx	r3
    244c:	00a4      	lsls	r4, r4, #2
    244e:	4b05      	ldr	r3, [pc, #20]	; (2464 <system_gclk_gen_enable+0x30>)
    2450:	469c      	mov	ip, r3
    2452:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2454:	6a23      	ldr	r3, [r4, #32]
    2456:	2280      	movs	r2, #128	; 0x80
    2458:	0052      	lsls	r2, r2, #1
    245a:	4313      	orrs	r3, r2
    245c:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    245e:	4b04      	ldr	r3, [pc, #16]	; (2470 <system_gclk_gen_enable+0x3c>)
    2460:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2462:	bd10      	pop	{r4, pc}
    2464:	40001c00 	.word	0x40001c00
    2468:	000007fc 	.word	0x000007fc
    246c:	00000f05 	.word	0x00000f05
    2470:	00000f45 	.word	0x00000f45

00002474 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2476:	0004      	movs	r4, r0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2478:	2204      	movs	r2, #4
    247a:	4082      	lsls	r2, r0
    247c:	4812      	ldr	r0, [pc, #72]	; (24c8 <system_gclk_gen_get_hz+0x54>)
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    247e:	4913      	ldr	r1, [pc, #76]	; (24cc <system_gclk_gen_get_hz+0x58>)
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2480:	6843      	ldr	r3, [r0, #4]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    2482:	400b      	ands	r3, r1
    2484:	421a      	tst	r2, r3
    2486:	d1fb      	bne.n	2480 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2488:	4b11      	ldr	r3, [pc, #68]	; (24d0 <system_gclk_gen_get_hz+0x5c>)
    248a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    248c:	4f0e      	ldr	r7, [pc, #56]	; (24c8 <system_gclk_gen_get_hz+0x54>)
    248e:	3408      	adds	r4, #8
    2490:	00a4      	lsls	r4, r4, #2
    2492:	59e0      	ldr	r0, [r4, r7]
    2494:	0740      	lsls	r0, r0, #29
    2496:	0f40      	lsrs	r0, r0, #29
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2498:	4b0e      	ldr	r3, [pc, #56]	; (24d4 <system_gclk_gen_get_hz+0x60>)
    249a:	4798      	blx	r3
    249c:	0006      	movs	r6, r0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    249e:	59e5      	ldr	r5, [r4, r7]
    24a0:	04ed      	lsls	r5, r5, #19
    24a2:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    24a4:	59e4      	ldr	r4, [r4, r7]
    24a6:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    24a8:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <system_gclk_gen_get_hz+0x64>)
    24aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    24ac:	2d00      	cmp	r5, #0
    24ae:	d107      	bne.n	24c0 <system_gclk_gen_get_hz+0x4c>
    24b0:	2c01      	cmp	r4, #1
    24b2:	d907      	bls.n	24c4 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    24b4:	0021      	movs	r1, r4
    24b6:	0030      	movs	r0, r6
    24b8:	4b08      	ldr	r3, [pc, #32]	; (24dc <system_gclk_gen_get_hz+0x68>)
    24ba:	4798      	blx	r3
    24bc:	0006      	movs	r6, r0
    24be:	e001      	b.n	24c4 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    24c0:	3401      	adds	r4, #1
    24c2:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    24c4:	0030      	movs	r0, r6
    24c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24c8:	40001c00 	.word	0x40001c00
    24cc:	000007fc 	.word	0x000007fc
    24d0:	00000f05 	.word	0x00000f05
    24d4:	00001fb5 	.word	0x00001fb5
    24d8:	00000f45 	.word	0x00000f45
    24dc:	000036f5 	.word	0x000036f5

000024e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    24e0:	b510      	push	{r4, lr}
    24e2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    24e4:	4b09      	ldr	r3, [pc, #36]	; (250c <system_gclk_chan_enable+0x2c>)
    24e6:	4798      	blx	r3
    24e8:	00a0      	lsls	r0, r4, #2
    24ea:	4b09      	ldr	r3, [pc, #36]	; (2510 <system_gclk_chan_enable+0x30>)
    24ec:	469c      	mov	ip, r3
    24ee:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    24f0:	2280      	movs	r2, #128	; 0x80
    24f2:	5881      	ldr	r1, [r0, r2]
    24f4:	2340      	movs	r3, #64	; 0x40
    24f6:	430b      	orrs	r3, r1
    24f8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    24fa:	2180      	movs	r1, #128	; 0x80
    24fc:	3a40      	subs	r2, #64	; 0x40
    24fe:	5843      	ldr	r3, [r0, r1]
    2500:	421a      	tst	r2, r3
    2502:	d0fc      	beq.n	24fe <system_gclk_chan_enable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2504:	4b03      	ldr	r3, [pc, #12]	; (2514 <system_gclk_chan_enable+0x34>)
    2506:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2508:	bd10      	pop	{r4, pc}
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	00000f05 	.word	0x00000f05
    2510:	40001c00 	.word	0x40001c00
    2514:	00000f45 	.word	0x00000f45

00002518 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2518:	b510      	push	{r4, lr}
    251a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    251c:	4b09      	ldr	r3, [pc, #36]	; (2544 <system_gclk_chan_disable+0x2c>)
    251e:	4798      	blx	r3
    2520:	00a0      	lsls	r0, r4, #2
    2522:	4b09      	ldr	r3, [pc, #36]	; (2548 <system_gclk_chan_disable+0x30>)
    2524:	469c      	mov	ip, r3
    2526:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    2528:	2280      	movs	r2, #128	; 0x80
    252a:	5883      	ldr	r3, [r0, r2]
    252c:	2140      	movs	r1, #64	; 0x40
    252e:	438b      	bics	r3, r1
    2530:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    2532:	3140      	adds	r1, #64	; 0x40
    2534:	3a40      	subs	r2, #64	; 0x40
    2536:	5843      	ldr	r3, [r0, r1]
    2538:	421a      	tst	r2, r3
    253a:	d1fc      	bne.n	2536 <system_gclk_chan_disable+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    253c:	4b03      	ldr	r3, [pc, #12]	; (254c <system_gclk_chan_disable+0x34>)
    253e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2540:	bd10      	pop	{r4, pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	00000f05 	.word	0x00000f05
    2548:	40001c00 	.word	0x40001c00
    254c:	00000f45 	.word	0x00000f45

00002550 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	0004      	movs	r4, r0
    2554:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2556:	4b05      	ldr	r3, [pc, #20]	; (256c <system_gclk_chan_set_config+0x1c>)
    2558:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    255a:	782b      	ldrb	r3, [r5, #0]
    255c:	220f      	movs	r2, #15
    255e:	4013      	ands	r3, r2
    2560:	3420      	adds	r4, #32
    2562:	00a4      	lsls	r4, r4, #2
    2564:	4a02      	ldr	r2, [pc, #8]	; (2570 <system_gclk_chan_set_config+0x20>)
    2566:	50a3      	str	r3, [r4, r2]


}
    2568:	bd70      	pop	{r4, r5, r6, pc}
    256a:	46c0      	nop			; (mov r8, r8)
    256c:	00002519 	.word	0x00002519
    2570:	40001c00 	.word	0x40001c00

00002574 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2574:	b510      	push	{r4, lr}
    2576:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2578:	4b06      	ldr	r3, [pc, #24]	; (2594 <system_gclk_chan_get_hz+0x20>)
    257a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    257c:	3420      	adds	r4, #32
    257e:	00a4      	lsls	r4, r4, #2
    2580:	4b05      	ldr	r3, [pc, #20]	; (2598 <system_gclk_chan_get_hz+0x24>)
    2582:	58e4      	ldr	r4, [r4, r3]
    2584:	0724      	lsls	r4, r4, #28
    2586:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2588:	4b04      	ldr	r3, [pc, #16]	; (259c <system_gclk_chan_get_hz+0x28>)
    258a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    258c:	0020      	movs	r0, r4
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <system_gclk_chan_get_hz+0x2c>)
    2590:	4798      	blx	r3
}
    2592:	bd10      	pop	{r4, pc}
    2594:	00000f05 	.word	0x00000f05
    2598:	40001c00 	.word	0x40001c00
    259c:	00000f45 	.word	0x00000f45
    25a0:	00002475 	.word	0x00002475

000025a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    25a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    25a6:	78d3      	ldrb	r3, [r2, #3]
    25a8:	2b00      	cmp	r3, #0
    25aa:	d11e      	bne.n	25ea <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    25ac:	7813      	ldrb	r3, [r2, #0]
    25ae:	2b80      	cmp	r3, #128	; 0x80
    25b0:	d004      	beq.n	25bc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    25b2:	061b      	lsls	r3, r3, #24
    25b4:	2480      	movs	r4, #128	; 0x80
    25b6:	0264      	lsls	r4, r4, #9
    25b8:	4323      	orrs	r3, r4
    25ba:	e000      	b.n	25be <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    25bc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25be:	7854      	ldrb	r4, [r2, #1]
    25c0:	2502      	movs	r5, #2
    25c2:	43ac      	bics	r4, r5
    25c4:	d10a      	bne.n	25dc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    25c6:	7894      	ldrb	r4, [r2, #2]
    25c8:	2c00      	cmp	r4, #0
    25ca:	d103      	bne.n	25d4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    25cc:	2480      	movs	r4, #128	; 0x80
    25ce:	02a4      	lsls	r4, r4, #10
    25d0:	4323      	orrs	r3, r4
    25d2:	e002      	b.n	25da <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    25d4:	24c0      	movs	r4, #192	; 0xc0
    25d6:	02e4      	lsls	r4, r4, #11
    25d8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    25da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25dc:	7854      	ldrb	r4, [r2, #1]
    25de:	3c01      	subs	r4, #1
    25e0:	2c01      	cmp	r4, #1
    25e2:	d812      	bhi.n	260a <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    25e4:	4c18      	ldr	r4, [pc, #96]	; (2648 <_system_pinmux_config+0xa4>)
    25e6:	4023      	ands	r3, r4
    25e8:	e00f      	b.n	260a <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    25ea:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    25ec:	040b      	lsls	r3, r1, #16
    25ee:	0c1b      	lsrs	r3, r3, #16
    25f0:	24a0      	movs	r4, #160	; 0xa0
    25f2:	05e4      	lsls	r4, r4, #23
    25f4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25f6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    25f8:	0c0b      	lsrs	r3, r1, #16
    25fa:	24d0      	movs	r4, #208	; 0xd0
    25fc:	0624      	lsls	r4, r4, #24
    25fe:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2600:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2602:	78d3      	ldrb	r3, [r2, #3]
    2604:	2b00      	cmp	r3, #0
    2606:	d018      	beq.n	263a <_system_pinmux_config+0x96>
    2608:	e01c      	b.n	2644 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    260a:	040c      	lsls	r4, r1, #16
    260c:	0c24      	lsrs	r4, r4, #16
    260e:	25a0      	movs	r5, #160	; 0xa0
    2610:	05ed      	lsls	r5, r5, #23
    2612:	432c      	orrs	r4, r5
    2614:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2616:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2618:	0c0c      	lsrs	r4, r1, #16
    261a:	25d0      	movs	r5, #208	; 0xd0
    261c:	062d      	lsls	r5, r5, #24
    261e:	432c      	orrs	r4, r5
    2620:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2622:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2624:	78d4      	ldrb	r4, [r2, #3]
    2626:	2c00      	cmp	r4, #0
    2628:	d10c      	bne.n	2644 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    262a:	035b      	lsls	r3, r3, #13
    262c:	d505      	bpl.n	263a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    262e:	7893      	ldrb	r3, [r2, #2]
    2630:	2b01      	cmp	r3, #1
    2632:	d101      	bne.n	2638 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    2634:	6181      	str	r1, [r0, #24]
    2636:	e000      	b.n	263a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2638:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    263a:	7853      	ldrb	r3, [r2, #1]
    263c:	3b01      	subs	r3, #1
    263e:	2b01      	cmp	r3, #1
    2640:	d800      	bhi.n	2644 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2642:	6081      	str	r1, [r0, #8]
		}
	}
}
    2644:	bd30      	pop	{r4, r5, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	fffbffff 	.word	0xfffbffff

0000264c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    264c:	b510      	push	{r4, lr}
    264e:	0003      	movs	r3, r0
    2650:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2652:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2654:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2656:	2900      	cmp	r1, #0
    2658:	d105      	bne.n	2666 <system_pinmux_pin_set_config+0x1a>
		return &(ports[port_index]->Group[group_index]);
    265a:	0958      	lsrs	r0, r3, #5
    265c:	01c0      	lsls	r0, r0, #7
    265e:	2182      	movs	r1, #130	; 0x82
    2660:	05c9      	lsls	r1, r1, #23
    2662:	468c      	mov	ip, r1
    2664:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    2666:	211f      	movs	r1, #31
    2668:	400b      	ands	r3, r1
    266a:	391e      	subs	r1, #30
    266c:	4099      	lsls	r1, r3
    266e:	4b01      	ldr	r3, [pc, #4]	; (2674 <system_pinmux_pin_set_config+0x28>)
    2670:	4798      	blx	r3
}
    2672:	bd10      	pop	{r4, pc}
    2674:	000025a5 	.word	0x000025a5

00002678 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			; (mov r8, r8)

0000267c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    267c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    267e:	4b05      	ldr	r3, [pc, #20]	; (2694 <system_init+0x18>)
    2680:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <system_init+0x1c>)
    2684:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2686:	4b05      	ldr	r3, [pc, #20]	; (269c <system_init+0x20>)
    2688:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    268a:	4b05      	ldr	r3, [pc, #20]	; (26a0 <system_init+0x24>)
    268c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    268e:	4b05      	ldr	r3, [pc, #20]	; (26a4 <system_init+0x28>)
    2690:	4798      	blx	r3
}
    2692:	bd10      	pop	{r4, pc}
    2694:	00002229 	.word	0x00002229
    2698:	00000f75 	.word	0x00000f75
    269c:	00000dd9 	.word	0x00000dd9
    26a0:	00002679 	.word	0x00002679
    26a4:	00002679 	.word	0x00002679

000026a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    26a8:	e7fe      	b.n	26a8 <Dummy_Handler>
    26aa:	46c0      	nop			; (mov r8, r8)

000026ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    26ac:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    26ae:	4b1b      	ldr	r3, [pc, #108]	; (271c <Reset_Handler+0x70>)
    26b0:	4a1b      	ldr	r2, [pc, #108]	; (2720 <Reset_Handler+0x74>)
    26b2:	429a      	cmp	r2, r3
    26b4:	d003      	beq.n	26be <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    26b6:	4b1b      	ldr	r3, [pc, #108]	; (2724 <Reset_Handler+0x78>)
    26b8:	4a18      	ldr	r2, [pc, #96]	; (271c <Reset_Handler+0x70>)
    26ba:	429a      	cmp	r2, r3
    26bc:	d304      	bcc.n	26c8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    26be:	4b1a      	ldr	r3, [pc, #104]	; (2728 <Reset_Handler+0x7c>)
    26c0:	4a1a      	ldr	r2, [pc, #104]	; (272c <Reset_Handler+0x80>)
    26c2:	429a      	cmp	r2, r3
    26c4:	d310      	bcc.n	26e8 <Reset_Handler+0x3c>
    26c6:	e01e      	b.n	2706 <Reset_Handler+0x5a>
    26c8:	4a19      	ldr	r2, [pc, #100]	; (2730 <Reset_Handler+0x84>)
    26ca:	4b16      	ldr	r3, [pc, #88]	; (2724 <Reset_Handler+0x78>)
    26cc:	3303      	adds	r3, #3
    26ce:	1a9b      	subs	r3, r3, r2
    26d0:	089b      	lsrs	r3, r3, #2
    26d2:	3301      	adds	r3, #1
    26d4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    26d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    26d8:	4810      	ldr	r0, [pc, #64]	; (271c <Reset_Handler+0x70>)
    26da:	4911      	ldr	r1, [pc, #68]	; (2720 <Reset_Handler+0x74>)
    26dc:	588c      	ldr	r4, [r1, r2]
    26de:	5084      	str	r4, [r0, r2]
    26e0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    26e2:	429a      	cmp	r2, r3
    26e4:	d1fa      	bne.n	26dc <Reset_Handler+0x30>
    26e6:	e7ea      	b.n	26be <Reset_Handler+0x12>
    26e8:	4a12      	ldr	r2, [pc, #72]	; (2734 <Reset_Handler+0x88>)
    26ea:	4b0f      	ldr	r3, [pc, #60]	; (2728 <Reset_Handler+0x7c>)
    26ec:	3303      	adds	r3, #3
    26ee:	1a9b      	subs	r3, r3, r2
    26f0:	089b      	lsrs	r3, r3, #2
    26f2:	3301      	adds	r3, #1
    26f4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    26f6:	2200      	movs	r2, #0
                *pDest++ = 0;
    26f8:	480c      	ldr	r0, [pc, #48]	; (272c <Reset_Handler+0x80>)
    26fa:	2100      	movs	r1, #0
    26fc:	1814      	adds	r4, r2, r0
    26fe:	6021      	str	r1, [r4, #0]
    2700:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2702:	429a      	cmp	r2, r3
    2704:	d1fa      	bne.n	26fc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2706:	4a0c      	ldr	r2, [pc, #48]	; (2738 <Reset_Handler+0x8c>)
    2708:	21ff      	movs	r1, #255	; 0xff
    270a:	4b0c      	ldr	r3, [pc, #48]	; (273c <Reset_Handler+0x90>)
    270c:	438b      	bics	r3, r1
    270e:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
    2710:	4b0b      	ldr	r3, [pc, #44]	; (2740 <Reset_Handler+0x94>)
    2712:	4798      	blx	r3

        /* Branch to main function */
        main();
    2714:	4b0b      	ldr	r3, [pc, #44]	; (2744 <Reset_Handler+0x98>)
    2716:	4798      	blx	r3
    2718:	e7fe      	b.n	2718 <Reset_Handler+0x6c>
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	20000000 	.word	0x20000000
    2720:	000052b0 	.word	0x000052b0
    2724:	20000098 	.word	0x20000098
    2728:	200006d8 	.word	0x200006d8
    272c:	20000098 	.word	0x20000098
    2730:	20000004 	.word	0x20000004
    2734:	2000009c 	.word	0x2000009c
    2738:	e000ed00 	.word	0xe000ed00
    273c:	00000000 	.word	0x00000000
    2740:	00003c4d 	.word	0x00003c4d
    2744:	00003415 	.word	0x00003415

00002748 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2748:	b5f0      	push	{r4, r5, r6, r7, lr}
    274a:	4647      	mov	r7, r8
    274c:	b480      	push	{r7}
    274e:	000c      	movs	r4, r1
    2750:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2752:	2800      	cmp	r0, #0
    2754:	d10d      	bne.n	2772 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    2756:	2a00      	cmp	r2, #0
    2758:	dd0e      	ble.n	2778 <_read+0x30>
    275a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    275c:	4e08      	ldr	r6, [pc, #32]	; (2780 <_read+0x38>)
    275e:	4d09      	ldr	r5, [pc, #36]	; (2784 <_read+0x3c>)
    2760:	6830      	ldr	r0, [r6, #0]
    2762:	0021      	movs	r1, r4
    2764:	682b      	ldr	r3, [r5, #0]
    2766:	4798      	blx	r3
		ptr++;
    2768:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    276a:	42a7      	cmp	r7, r4
    276c:	d1f8      	bne.n	2760 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    276e:	4640      	mov	r0, r8
    2770:	e003      	b.n	277a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2772:	2001      	movs	r0, #1
    2774:	4240      	negs	r0, r0
    2776:	e000      	b.n	277a <_read+0x32>
	}

	for (; len > 0; --len) {
    2778:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    277a:	bc04      	pop	{r2}
    277c:	4690      	mov	r8, r2
    277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2780:	20000654 	.word	0x20000654
    2784:	2000064c 	.word	0x2000064c

00002788 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2788:	b5f0      	push	{r4, r5, r6, r7, lr}
    278a:	4647      	mov	r7, r8
    278c:	b480      	push	{r7}
    278e:	000e      	movs	r6, r1
    2790:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2792:	3801      	subs	r0, #1
    2794:	2802      	cmp	r0, #2
    2796:	d811      	bhi.n	27bc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    2798:	2a00      	cmp	r2, #0
    279a:	d012      	beq.n	27c2 <_write+0x3a>
    279c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    279e:	4b0c      	ldr	r3, [pc, #48]	; (27d0 <_write+0x48>)
    27a0:	4698      	mov	r8, r3
    27a2:	4f0c      	ldr	r7, [pc, #48]	; (27d4 <_write+0x4c>)
    27a4:	4643      	mov	r3, r8
    27a6:	6818      	ldr	r0, [r3, #0]
    27a8:	5d31      	ldrb	r1, [r6, r4]
    27aa:	683b      	ldr	r3, [r7, #0]
    27ac:	4798      	blx	r3
    27ae:	2800      	cmp	r0, #0
    27b0:	db09      	blt.n	27c6 <_write+0x3e>
			return -1;
		}
		++nChars;
    27b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    27b4:	42a5      	cmp	r5, r4
    27b6:	d1f5      	bne.n	27a4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    27b8:	0020      	movs	r0, r4
    27ba:	e006      	b.n	27ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    27bc:	2001      	movs	r0, #1
    27be:	4240      	negs	r0, r0
    27c0:	e003      	b.n	27ca <_write+0x42>
	}

	for (; len != 0; --len) {
    27c2:	2000      	movs	r0, #0
    27c4:	e001      	b.n	27ca <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    27c6:	2001      	movs	r0, #1
    27c8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    27ca:	bc04      	pop	{r2}
    27cc:	4690      	mov	r8, r2
    27ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27d0:	20000654 	.word	0x20000654
    27d4:	20000650 	.word	0x20000650

000027d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    27d8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    27da:	4a06      	ldr	r2, [pc, #24]	; (27f4 <_sbrk+0x1c>)
    27dc:	6812      	ldr	r2, [r2, #0]
    27de:	2a00      	cmp	r2, #0
    27e0:	d102      	bne.n	27e8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    27e2:	4905      	ldr	r1, [pc, #20]	; (27f8 <_sbrk+0x20>)
    27e4:	4a03      	ldr	r2, [pc, #12]	; (27f4 <_sbrk+0x1c>)
    27e6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    27e8:	4a02      	ldr	r2, [pc, #8]	; (27f4 <_sbrk+0x1c>)
    27ea:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    27ec:	18c3      	adds	r3, r0, r3
    27ee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    27f0:	4770      	bx	lr
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	200004e4 	.word	0x200004e4
    27f8:	200026d8 	.word	0x200026d8

000027fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    27fc:	2001      	movs	r0, #1
    27fe:	4240      	negs	r0, r0
    2800:	4770      	bx	lr
    2802:	46c0      	nop			; (mov r8, r8)

00002804 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2804:	2380      	movs	r3, #128	; 0x80
    2806:	019b      	lsls	r3, r3, #6
    2808:	604b      	str	r3, [r1, #4]

	return 0;
}
    280a:	2000      	movs	r0, #0
    280c:	4770      	bx	lr
    280e:	46c0      	nop			; (mov r8, r8)

00002810 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2810:	2001      	movs	r0, #1
    2812:	4770      	bx	lr

00002814 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2814:	2000      	movs	r0, #0
    2816:	4770      	bx	lr

00002818 <setParameter>:
}

void setParameter(void)
{
	//to be done..
}
    2818:	4770      	bx	lr
    281a:	46c0      	nop			; (mov r8, r8)

0000281c <can_fd_send_extended_message>:
	can_enable_interrupt(&can_instance, CAN_RX_FIFO_1_NEW_MESSAGE);
}


static void can_fd_send_extended_message(uint32_t id_value, uint8_t *data)
{
    281c:	b510      	push	{r4, lr}
    281e:	b088      	sub	sp, #32
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    2820:	2300      	movs	r3, #0
    2822:	9301      	str	r3, [sp, #4]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    2824:	2388      	movs	r3, #136	; 0x88
    2826:	041b      	lsls	r3, r3, #16
    2828:	9302      	str	r3, [sp, #8]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
    282a:	9b01      	ldr	r3, [sp, #4]
    282c:	00c0      	lsls	r0, r0, #3
    282e:	08c0      	lsrs	r0, r0, #3
    2830:	2280      	movs	r2, #128	; 0x80
    2832:	05d2      	lsls	r2, r2, #23
    2834:	4313      	orrs	r3, r2
    2836:	4318      	orrs	r0, r3
    2838:	9001      	str	r0, [sp, #4]
	CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_EFC | CAN_TX_ELEMENT_T1_FDF |
    283a:	23bf      	movs	r3, #191	; 0xbf
    283c:	041b      	lsls	r3, r3, #16
    283e:	9302      	str	r3, [sp, #8]
    2840:	ab03      	add	r3, sp, #12
    2842:	a808      	add	r0, sp, #32
	CAN_TX_ELEMENT_T1_BRS |
	CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA64_Val);
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
		tx_element.data[i] = *data;
    2844:	780a      	ldrb	r2, [r1, #0]
    2846:	701a      	strb	r2, [r3, #0]
		data++;
    2848:	3101      	adds	r1, #1
    284a:	3301      	adds	r3, #1
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_EXTENDED_ID(id_value) |
	CAN_TX_ELEMENT_T0_XTD;
	tx_element.T1.reg = CAN_TX_ELEMENT_T1_EFC | CAN_TX_ELEMENT_T1_FDF |
	CAN_TX_ELEMENT_T1_BRS |
	CAN_TX_ELEMENT_T1_DLC(CAN_TX_ELEMENT_T1_DLC_DATA64_Val);
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    284c:	4283      	cmp	r3, r0
    284e:	d1f9      	bne.n	2844 <can_fd_send_extended_message+0x28>
		tx_element.data[i] = *data;
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
    2850:	4c07      	ldr	r4, [pc, #28]	; (2870 <can_fd_send_extended_message+0x54>)
    2852:	2200      	movs	r2, #0
    2854:	a901      	add	r1, sp, #4
    2856:	0020      	movs	r0, r4
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <can_fd_send_extended_message+0x58>)
    285a:	4798      	blx	r3
 *  \retval STATUS_BUSY The module is in configuration.
 */
static inline enum status_code can_tx_transfer_request(
		struct can_module *const module_inst, uint32_t trig_mask)
{
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    285c:	6823      	ldr	r3, [r4, #0]
    285e:	699a      	ldr	r2, [r3, #24]
    2860:	0792      	lsls	r2, r2, #30
    2862:	d402      	bmi.n	286a <can_fd_send_extended_message+0x4e>
		return STATUS_BUSY;
	}
	module_inst->hw->TXBAR.reg = trig_mask;
    2864:	2101      	movs	r1, #1
    2866:	22d0      	movs	r2, #208	; 0xd0
    2868:	5099      	str	r1, [r3, r2]
	CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
    286a:	b008      	add	sp, #32
    286c:	bd10      	pop	{r4, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	20000598 	.word	0x20000598
    2874:	00001475 	.word	0x00001475

00002878 <send_battery_data>:
	printf("charger_status %d \r\n", charger_status);
	port_pin_set_output_level(EXT1_PIN_6,charger_status);
}

void send_battery_data(void)
{	
    2878:	b530      	push	{r4, r5, lr}
    287a:	b089      	sub	sp, #36	; 0x24
	struct rtc_calendar_time current_time;
	rtc_calendar_get_time(&rtc_instance, &current_time);
    287c:	ac06      	add	r4, sp, #24
    287e:	0021      	movs	r1, r4
    2880:	481f      	ldr	r0, [pc, #124]	; (2900 <send_battery_data+0x88>)
    2882:	4b20      	ldr	r3, [pc, #128]	; (2904 <send_battery_data+0x8c>)
    2884:	4798      	blx	r3
	battery_data[0] = (uint8_t)((avg_charge_current_reading >> 8) & 0xff);
    2886:	4920      	ldr	r1, [pc, #128]	; (2908 <send_battery_data+0x90>)
    2888:	880a      	ldrh	r2, [r1, #0]
    288a:	4b20      	ldr	r3, [pc, #128]	; (290c <send_battery_data+0x94>)
    288c:	0a10      	lsrs	r0, r2, #8
    288e:	7018      	strb	r0, [r3, #0]
	battery_data[1] = (uint8_t)(avg_charge_current_reading & 0xff);
    2890:	705a      	strb	r2, [r3, #1]
 	battery_data[2] = (uint8_t)((avg_discharge_current_reading >> 8) & 0xff);
    2892:	4a1f      	ldr	r2, [pc, #124]	; (2910 <send_battery_data+0x98>)
    2894:	8810      	ldrh	r0, [r2, #0]
    2896:	0a05      	lsrs	r5, r0, #8
    2898:	709d      	strb	r5, [r3, #2]
	battery_data[3] = (uint8_t)(avg_discharge_current_reading & 0xff);
    289a:	70d8      	strb	r0, [r3, #3]
	battery_data[4] = (uint8_t)((temprerature_value >> 8) & 0xff);
    289c:	481d      	ldr	r0, [pc, #116]	; (2914 <send_battery_data+0x9c>)
    289e:	8800      	ldrh	r0, [r0, #0]
    28a0:	0a05      	lsrs	r5, r0, #8
    28a2:	711d      	strb	r5, [r3, #4]
	battery_data[5] = (uint8_t)(temprerature_value & 0xff);
    28a4:	7158      	strb	r0, [r3, #5]
	battery_data[6] = charge_remain_percentage;
    28a6:	481c      	ldr	r0, [pc, #112]	; (2918 <send_battery_data+0xa0>)
    28a8:	7800      	ldrb	r0, [r0, #0]
    28aa:	7198      	strb	r0, [r3, #6]
	battery_data[7] = battery_status;
    28ac:	481b      	ldr	r0, [pc, #108]	; (291c <send_battery_data+0xa4>)
    28ae:	7800      	ldrb	r0, [r0, #0]
    28b0:	71d8      	strb	r0, [r3, #7]
	battery_data[8] = charger_status;
    28b2:	481b      	ldr	r0, [pc, #108]	; (2920 <send_battery_data+0xa8>)
    28b4:	7800      	ldrb	r0, [r0, #0]
    28b6:	7218      	strb	r0, [r3, #8]
	battery_data[9] = (uint8_t)((current_time.year >> 8) & 0xff);
    28b8:	88e0      	ldrh	r0, [r4, #6]
    28ba:	0a05      	lsrs	r5, r0, #8
    28bc:	725d      	strb	r5, [r3, #9]
	battery_data[10] = (uint8_t)(current_time.year & 0xff);
    28be:	7298      	strb	r0, [r3, #10]
	battery_data[11] = current_time.month;
    28c0:	7960      	ldrb	r0, [r4, #5]
    28c2:	72d8      	strb	r0, [r3, #11]
	battery_data[12] = current_time.day;
    28c4:	7920      	ldrb	r0, [r4, #4]
    28c6:	7318      	strb	r0, [r3, #12]
	battery_data[13] = current_time.hour;
    28c8:	78a0      	ldrb	r0, [r4, #2]
    28ca:	7358      	strb	r0, [r3, #13]
	battery_data[14] = current_time.minute;
    28cc:	7860      	ldrb	r0, [r4, #1]
    28ce:	7398      	strb	r0, [r3, #14]
	battery_data[15] = current_time.second;
    28d0:	7820      	ldrb	r0, [r4, #0]
    28d2:	73d8      	strb	r0, [r3, #15]
	
	avg_charge_current_reading = 0;
    28d4:	2300      	movs	r3, #0
    28d6:	800b      	strh	r3, [r1, #0]
	avg_discharge_current_reading = 0;
    28d8:	8013      	strh	r3, [r2, #0]
	
	uint8_t tx_data[20];
	tx_data[0] = TX_TYPE_BATTERY_DATA;
    28da:	ab01      	add	r3, sp, #4
    28dc:	2210      	movs	r2, #16
    28de:	701a      	strb	r2, [r3, #0]
	tx_data[1] = BATTERY_DATA_LENGTH;
    28e0:	705a      	strb	r2, [r3, #1]
    28e2:	2300      	movs	r3, #0
	for (uint8_t i = 0; i<16; i++)
	{
		tx_data[i+2] = battery_data[i];
    28e4:	4809      	ldr	r0, [pc, #36]	; (290c <send_battery_data+0x94>)
    28e6:	aa01      	add	r2, sp, #4
    28e8:	18d2      	adds	r2, r2, r3
    28ea:	5c19      	ldrb	r1, [r3, r0]
    28ec:	7091      	strb	r1, [r2, #2]
    28ee:	3301      	adds	r3, #1
	avg_discharge_current_reading = 0;
	
	uint8_t tx_data[20];
	tx_data[0] = TX_TYPE_BATTERY_DATA;
	tx_data[1] = BATTERY_DATA_LENGTH;
	for (uint8_t i = 0; i<16; i++)
    28f0:	2b10      	cmp	r3, #16
    28f2:	d1f8      	bne.n	28e6 <send_battery_data+0x6e>
	{
		tx_data[i+2] = battery_data[i];
	}
	can_fd_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_0,tx_data);
    28f4:	a901      	add	r1, sp, #4
    28f6:	480b      	ldr	r0, [pc, #44]	; (2924 <send_battery_data+0xac>)
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <send_battery_data+0xb0>)
    28fa:	4798      	blx	r3
		//tx_data[i+3] = battery_data[i];
	//}
	//tx_data[19] = END_FLAG;
	//udi_cdc_write_buf(tx_data,20);
	
}
    28fc:	b009      	add	sp, #36	; 0x24
    28fe:	bd30      	pop	{r4, r5, pc}
    2900:	20000658 	.word	0x20000658
    2904:	0000088d 	.word	0x0000088d
    2908:	20000608 	.word	0x20000608
    290c:	2000053c 	.word	0x2000053c
    2910:	2000054c 	.word	0x2000054c
    2914:	200006ae 	.word	0x200006ae
    2918:	20000555 	.word	0x20000555
    291c:	200005f0 	.word	0x200005f0
    2920:	20000556 	.word	0x20000556
    2924:	100000a5 	.word	0x100000a5
    2928:	0000281d 	.word	0x0000281d

0000292c <send_board_time_data>:

void send_board_time_data(void)
{
    292c:	b510      	push	{r4, lr}
    292e:	b088      	sub	sp, #32
	struct rtc_calendar_time current_time;
	rtc_calendar_get_time(&rtc_instance, &current_time);
    2930:	ac06      	add	r4, sp, #24
    2932:	0021      	movs	r1, r4
    2934:	4812      	ldr	r0, [pc, #72]	; (2980 <send_board_time_data+0x54>)
    2936:	4b13      	ldr	r3, [pc, #76]	; (2984 <send_board_time_data+0x58>)
    2938:	4798      	blx	r3
	time_data[0] = (uint8_t)((current_time.year >> 8) & 0xff);
    293a:	88e2      	ldrh	r2, [r4, #6]
    293c:	4b12      	ldr	r3, [pc, #72]	; (2988 <send_board_time_data+0x5c>)
    293e:	0a11      	lsrs	r1, r2, #8
    2940:	7019      	strb	r1, [r3, #0]
	time_data[1] = (uint8_t)(current_time.year & 0xff);
    2942:	705a      	strb	r2, [r3, #1]
	time_data[2] = current_time.month;
    2944:	7962      	ldrb	r2, [r4, #5]
    2946:	709a      	strb	r2, [r3, #2]
	time_data[3] = current_time.day;
    2948:	7922      	ldrb	r2, [r4, #4]
    294a:	70da      	strb	r2, [r3, #3]
	time_data[4] = current_time.hour;
    294c:	78a2      	ldrb	r2, [r4, #2]
    294e:	711a      	strb	r2, [r3, #4]
	time_data[5] = current_time.minute;
    2950:	7862      	ldrb	r2, [r4, #1]
    2952:	715a      	strb	r2, [r3, #5]
	time_data[6] = current_time.second;
    2954:	7822      	ldrb	r2, [r4, #0]
    2956:	719a      	strb	r2, [r3, #6]
	
	
	uint8_t tx_data[20];
	tx_data[0] = TX_TYPE_TIME_DATA;
    2958:	ab01      	add	r3, sp, #4
    295a:	2211      	movs	r2, #17
    295c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = TIME_DATA_LENGTH;
    295e:	3a0a      	subs	r2, #10
    2960:	705a      	strb	r2, [r3, #1]
    2962:	2300      	movs	r3, #0
	for (uint8_t i = 0; i<sizeof(battery_data); i++)
	{
		tx_data[i+2] = time_data[i];
    2964:	4808      	ldr	r0, [pc, #32]	; (2988 <send_board_time_data+0x5c>)
    2966:	aa01      	add	r2, sp, #4
    2968:	18d2      	adds	r2, r2, r3
    296a:	5c19      	ldrb	r1, [r3, r0]
    296c:	7091      	strb	r1, [r2, #2]
    296e:	3301      	adds	r3, #1
	
	
	uint8_t tx_data[20];
	tx_data[0] = TX_TYPE_TIME_DATA;
	tx_data[1] = TIME_DATA_LENGTH;
	for (uint8_t i = 0; i<sizeof(battery_data); i++)
    2970:	2b10      	cmp	r3, #16
    2972:	d1f8      	bne.n	2966 <send_board_time_data+0x3a>
	{
		tx_data[i+2] = time_data[i];
	}
	can_fd_send_extended_message(CAN_RX_EXTENDED_FILTER_ID_0,tx_data);
    2974:	a901      	add	r1, sp, #4
    2976:	4805      	ldr	r0, [pc, #20]	; (298c <send_board_time_data+0x60>)
    2978:	4b05      	ldr	r3, [pc, #20]	; (2990 <send_board_time_data+0x64>)
    297a:	4798      	blx	r3
	//{
		//tx_data[i+3] = time_data[i];
	//}
	//tx_data[10] = END_FLAG;
	//udi_cdc_write_buf(tx_data,11);
}
    297c:	b008      	add	sp, #32
    297e:	bd10      	pop	{r4, pc}
    2980:	20000658 	.word	0x20000658
    2984:	0000088d 	.word	0x0000088d
    2988:	200005a0 	.word	0x200005a0
    298c:	100000a5 	.word	0x100000a5
    2990:	0000281d 	.word	0x0000281d

00002994 <setTime>:
{
	//to be done..
}

void setTime(void)
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b083      	sub	sp, #12
		struct rtc_calendar_time *const time)
{
	time->second = 0;
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    2998:	2300      	movs	r3, #0
    299a:	466a      	mov	r2, sp
    299c:	70d3      	strb	r3, [r2, #3]
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
	time.year   = (uint16_t)((commandData[0] << 8) + commandData[1]);
    299e:	480e      	ldr	r0, [pc, #56]	; (29d8 <setTime+0x44>)
    29a0:	7801      	ldrb	r1, [r0, #0]
    29a2:	0209      	lsls	r1, r1, #8
    29a4:	7843      	ldrb	r3, [r0, #1]
    29a6:	1859      	adds	r1, r3, r1
    29a8:	b289      	uxth	r1, r1
    29aa:	466b      	mov	r3, sp
    29ac:	80d1      	strh	r1, [r2, #6]
	time.month  = commandData[2];
    29ae:	7882      	ldrb	r2, [r0, #2]
    29b0:	715a      	strb	r2, [r3, #5]
	time.day    = commandData[3];
    29b2:	78c3      	ldrb	r3, [r0, #3]
    29b4:	466c      	mov	r4, sp
    29b6:	7123      	strb	r3, [r4, #4]
	time.hour   = commandData[4];
    29b8:	7904      	ldrb	r4, [r0, #4]
    29ba:	466d      	mov	r5, sp
    29bc:	70ac      	strb	r4, [r5, #2]
	time.minute = commandData[5];
    29be:	7944      	ldrb	r4, [r0, #5]
    29c0:	706c      	strb	r4, [r5, #1]
	time.second = commandData[6];
    29c2:	7980      	ldrb	r0, [r0, #6]
    29c4:	7028      	strb	r0, [r5, #0]
	printf( "year %d month %d day %d \r\n", time.year, time.month, time.day);
    29c6:	4805      	ldr	r0, [pc, #20]	; (29dc <setTime+0x48>)
    29c8:	4c05      	ldr	r4, [pc, #20]	; (29e0 <setTime+0x4c>)
    29ca:	47a0      	blx	r4
	rtc_calendar_set_time(&rtc_instance, &time);
    29cc:	4669      	mov	r1, sp
    29ce:	4805      	ldr	r0, [pc, #20]	; (29e4 <setTime+0x50>)
    29d0:	4b05      	ldr	r3, [pc, #20]	; (29e8 <setTime+0x54>)
    29d2:	4798      	blx	r3
}
    29d4:	b003      	add	sp, #12
    29d6:	bd30      	pop	{r4, r5, pc}
    29d8:	200005ac 	.word	0x200005ac
    29dc:	00004f58 	.word	0x00004f58
    29e0:	00003cbd 	.word	0x00003cbd
    29e4:	20000658 	.word	0x20000658
    29e8:	0000086d 	.word	0x0000086d

000029ec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    29ec:	b570      	push	{r4, r5, r6, lr}
    29ee:	b082      	sub	sp, #8
    29f0:	0005      	movs	r5, r0
    29f2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    29f4:	2200      	movs	r2, #0
    29f6:	466b      	mov	r3, sp
    29f8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    29fa:	4c06      	ldr	r4, [pc, #24]	; (2a14 <usart_serial_getchar+0x28>)
    29fc:	466b      	mov	r3, sp
    29fe:	1d99      	adds	r1, r3, #6
    2a00:	0028      	movs	r0, r5
    2a02:	47a0      	blx	r4
    2a04:	2800      	cmp	r0, #0
    2a06:	d1f9      	bne.n	29fc <usart_serial_getchar+0x10>

	*c = temp;
    2a08:	466b      	mov	r3, sp
    2a0a:	3306      	adds	r3, #6
    2a0c:	881b      	ldrh	r3, [r3, #0]
    2a0e:	7033      	strb	r3, [r6, #0]
}
    2a10:	b002      	add	sp, #8
    2a12:	bd70      	pop	{r4, r5, r6, pc}
    2a14:	00001db5 	.word	0x00001db5

00002a18 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2a18:	b570      	push	{r4, r5, r6, lr}
    2a1a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2a1c:	b28c      	uxth	r4, r1
    2a1e:	4e03      	ldr	r6, [pc, #12]	; (2a2c <usart_serial_putchar+0x14>)
    2a20:	0021      	movs	r1, r4
    2a22:	0028      	movs	r0, r5
    2a24:	47b0      	blx	r6
    2a26:	2800      	cmp	r0, #0
    2a28:	d1fa      	bne.n	2a20 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    2a2a:	bd70      	pop	{r4, r5, r6, pc}
    2a2c:	00001d89 	.word	0x00001d89

00002a30 <configure_port_pins>:

#define ADC_TEMP_SAMPLE_LENGTH 4

//GPIO setup
void configure_port_pins(void)
{
    2a30:	b570      	push	{r4, r5, r6, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2a32:	4c07      	ldr	r4, [pc, #28]	; (2a50 <configure_port_pins+0x20>)
    2a34:	2300      	movs	r3, #0
    2a36:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    2a38:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    2a3a:	7063      	strb	r3, [r4, #1]
	
	
	//set EXT1_PIN_5(PIN_PA20) as input for charger detect, 1 for charger present/0 for charge not present
	port_pin_set_config(EXT1_PIN_5, &config_port_pin);
    2a3c:	0021      	movs	r1, r4
    2a3e:	2014      	movs	r0, #20
    2a40:	4d04      	ldr	r5, [pc, #16]	; (2a54 <configure_port_pins+0x24>)
    2a42:	47a8      	blx	r5
	
	//set EXT1_PIN_6(PIN_PA21) as LED output, on for charger present/off for charger not present
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2a44:	2301      	movs	r3, #1
    2a46:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EXT1_PIN_6, &config_port_pin);
    2a48:	0021      	movs	r1, r4
    2a4a:	2015      	movs	r0, #21
    2a4c:	47a8      	blx	r5
}
    2a4e:	bd70      	pop	{r4, r5, r6, pc}
    2a50:	20000698 	.word	0x20000698
    2a54:	00001501 	.word	0x00001501

00002a58 <configure_adc>:

//! [setup ADC]
void configure_adc(void)
{
    2a58:	b530      	push	{r4, r5, lr}
    2a5a:	b08d      	sub	sp, #52	; 0x34
	//! [setup_config]
	struct adc_config config_adc;
	
	//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    2a5c:	ac01      	add	r4, sp, #4
    2a5e:	0020      	movs	r0, r4
    2a60:	4b19      	ldr	r3, [pc, #100]	; (2ac8 <configure_adc+0x70>)
    2a62:	4798      	blx	r3

	config_adc.clock_source = GCLK_GENERATOR_0;
    2a64:	2300      	movs	r3, #0
    2a66:	7023      	strb	r3, [r4, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    2a68:	3303      	adds	r3, #3
    2a6a:	70a3      	strb	r3, [r4, #2]
	config_adc.reference =  ADC_REFERENCE_INTVCC1;
    2a6c:	3b01      	subs	r3, #1
    2a6e:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8;
    2a70:	3306      	adds	r3, #6
    2a72:	7123      	strb	r3, [r4, #4]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    2a74:	23c0      	movs	r3, #192	; 0xc0
    2a76:	015b      	lsls	r3, r3, #5
    2a78:	80e3      	strh	r3, [r4, #6]
	config_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    2a7a:	2304      	movs	r3, #4
    2a7c:	7563      	strb	r3, [r4, #21]

	//! [setup_set_config]
	adc_init(&adc_instance, ADC1, &config_adc);
    2a7e:	4d13      	ldr	r5, [pc, #76]	; (2acc <configure_adc+0x74>)
    2a80:	0022      	movs	r2, r4
    2a82:	4913      	ldr	r1, [pc, #76]	; (2ad0 <configure_adc+0x78>)
    2a84:	0028      	movs	r0, r5
    2a86:	4b13      	ldr	r3, [pc, #76]	; (2ad4 <configure_adc+0x7c>)
    2a88:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2a8a:	682c      	ldr	r4, [r5, #0]
    2a8c:	8c23      	ldrh	r3, [r4, #32]
    2a8e:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2a90:	2b00      	cmp	r3, #0
    2a92:	d1fb      	bne.n	2a8c <configure_adc+0x34>
	}

#if ADC_CALLBACK_MODE == true
#   if (ADC_INST_NUM > 1)
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
    2a94:	0020      	movs	r0, r4
    2a96:	4b10      	ldr	r3, [pc, #64]	; (2ad8 <configure_adc+0x80>)
    2a98:	4798      	blx	r3
{
	static uint8_t adc_interrupt_vectors[ADC_INST_NUM] = {
		MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    2a9a:	4b10      	ldr	r3, [pc, #64]	; (2adc <configure_adc+0x84>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2a9c:	5c1b      	ldrb	r3, [r3, r0]
    2a9e:	221f      	movs	r2, #31
    2aa0:	401a      	ands	r2, r3
    2aa2:	2301      	movs	r3, #1
    2aa4:	4093      	lsls	r3, r2
    2aa6:	4a0e      	ldr	r2, [pc, #56]	; (2ae0 <configure_adc+0x88>)
    2aa8:	6013      	str	r3, [r2, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2aaa:	2307      	movs	r3, #7
    2aac:	7123      	strb	r3, [r4, #4]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2aae:	71a3      	strb	r3, [r4, #6]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2ab0:	7822      	ldrb	r2, [r4, #0]
    2ab2:	3b05      	subs	r3, #5
    2ab4:	4313      	orrs	r3, r2
    2ab6:	7023      	strb	r3, [r4, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2ab8:	4b04      	ldr	r3, [pc, #16]	; (2acc <configure_adc+0x74>)
    2aba:	681a      	ldr	r2, [r3, #0]

	if (adc_module->SYNCBUSY.reg) {
    2abc:	8c13      	ldrh	r3, [r2, #32]
    2abe:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d1fb      	bne.n	2abc <configure_adc+0x64>

	//ADC0->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
	//! [setup_enable]
	adc_enable(&adc_instance);
}
    2ac4:	b00d      	add	sp, #52	; 0x34
    2ac6:	bd30      	pop	{r4, r5, pc}
    2ac8:	00000149 	.word	0x00000149
    2acc:	200006b0 	.word	0x200006b0
    2ad0:	42004800 	.word	0x42004800
    2ad4:	0000018d 	.word	0x0000018d
    2ad8:	0000011d 	.word	0x0000011d
    2adc:	00004f54 	.word	0x00004f54
    2ae0:	e000e100 	.word	0xe000e100

00002ae4 <adc_sampling>:

void adc_sampling(void)
{
    2ae4:	b570      	push	{r4, r5, r6, lr}
	//uint8_t string1 = 0x0c;
	//uint8_t string2 = 0x0d;

	//************************************************************************
	if (0 == charger_status)//charger not connected
    2ae6:	4b58      	ldr	r3, [pc, #352]	; (2c48 <adc_sampling+0x164>)
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d143      	bne.n	2b76 <adc_sampling+0x92>
	{	charge_signal_adc_result = 0;
    2aee:	2200      	movs	r2, #0
    2af0:	4b56      	ldr	r3, [pc, #344]	; (2c4c <adc_sampling+0x168>)
    2af2:	801a      	strh	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2af4:	4b56      	ldr	r3, [pc, #344]	; (2c50 <adc_sampling+0x16c>)
    2af6:	6818      	ldr	r0, [r3, #0]
    2af8:	8c03      	ldrh	r3, [r0, #32]
    2afa:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2afc:	2b00      	cmp	r3, #0
    2afe:	d1fb      	bne.n	2af8 <adc_sampling+0x14>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2b00:	8903      	ldrh	r3, [r0, #8]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    2b02:	221f      	movs	r2, #31
    2b04:	4393      	bics	r3, r2
    2b06:	3a1b      	subs	r2, #27
    2b08:	4313      	orrs	r3, r2
    2b0a:	8103      	strh	r3, [r0, #8]
    2b0c:	8c03      	ldrh	r3, [r0, #32]
    2b0e:	b29b      	uxth	r3, r3
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    2b10:	2b00      	cmp	r3, #0
    2b12:	d1fb      	bne.n	2b0c <adc_sampling+0x28>
    2b14:	8c03      	ldrh	r3, [r0, #32]
    2b16:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d1fb      	bne.n	2b14 <adc_sampling+0x30>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2b1c:	7e02      	ldrb	r2, [r0, #24]
    2b1e:	3302      	adds	r3, #2
    2b20:	4313      	orrs	r3, r2
    2b22:	7603      	strb	r3, [r0, #24]
    2b24:	8c03      	ldrh	r3, [r0, #32]
    2b26:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d1fb      	bne.n	2b24 <adc_sampling+0x40>

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;
    2b2c:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b2e:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2b30:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2b32:	7983      	ldrb	r3, [r0, #6]
    2b34:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;
    2b36:	000a      	movs	r2, r1
    2b38:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b3a:	421d      	tst	r5, r3
    2b3c:	d000      	beq.n	2b40 <adc_sampling+0x5c>
		status_flags |= ADC_STATUS_WINDOW;
    2b3e:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2b40:	421c      	tst	r4, r3
    2b42:	d000      	beq.n	2b46 <adc_sampling+0x62>
		status_flags |= ADC_STATUS_OVERRUN;
    2b44:	432a      	orrs	r2, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2b46:	4211      	tst	r1, r2
    2b48:	d0f3      	beq.n	2b32 <adc_sampling+0x4e>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    2b4a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2b4c:	b289      	uxth	r1, r1
    2b4e:	4b41      	ldr	r3, [pc, #260]	; (2c54 <adc_sampling+0x170>)
    2b50:	8019      	strh	r1, [r3, #0]
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2b52:	2301      	movs	r3, #1
    2b54:	7183      	strb	r3, [r0, #6]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2b56:	7982      	ldrb	r2, [r0, #6]
    2b58:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;
    2b5a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b5c:	0754      	lsls	r4, r2, #29
    2b5e:	d501      	bpl.n	2b64 <adc_sampling+0x80>
		status_flags |= ADC_STATUS_WINDOW;
    2b60:	2402      	movs	r4, #2
    2b62:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2b64:	0792      	lsls	r2, r2, #30
    2b66:	d501      	bpl.n	2b6c <adc_sampling+0x88>
		status_flags |= ADC_STATUS_OVERRUN;
    2b68:	2204      	movs	r2, #4
    2b6a:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2b6c:	075b      	lsls	r3, r3, #29
    2b6e:	d546      	bpl.n	2bfe <adc_sampling+0x11a>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2b70:	2302      	movs	r3, #2
    2b72:	7183      	strb	r3, [r0, #6]
    2b74:	e043      	b.n	2bfe <adc_sampling+0x11a>
		//discharge_raw_result_signed = (int16_t)discharge_signal_adc_result;
		//adc_discharge_signal_voltage = ((float)discharge_raw_result_signed * (float)ADC_REFERENCE_INT1V_VALUE)/(float)ADC_8BIT_FULL_SCALE_VALUE;
	}
	else
	{
		discharge_signal_adc_result = 0;
    2b76:	2200      	movs	r2, #0
    2b78:	4b36      	ldr	r3, [pc, #216]	; (2c54 <adc_sampling+0x170>)
    2b7a:	801a      	strh	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2b7c:	4b34      	ldr	r3, [pc, #208]	; (2c50 <adc_sampling+0x16c>)
    2b7e:	6818      	ldr	r0, [r3, #0]
    2b80:	8c03      	ldrh	r3, [r0, #32]
    2b82:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2b84:	2b00      	cmp	r3, #0
    2b86:	d1fb      	bne.n	2b80 <adc_sampling+0x9c>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2b88:	8903      	ldrh	r3, [r0, #8]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    2b8a:	221f      	movs	r2, #31
    2b8c:	4393      	bics	r3, r2
    2b8e:	3a1a      	subs	r2, #26
    2b90:	4313      	orrs	r3, r2
    2b92:	8103      	strh	r3, [r0, #8]
    2b94:	8c03      	ldrh	r3, [r0, #32]
    2b96:	b29b      	uxth	r3, r3
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d1fb      	bne.n	2b94 <adc_sampling+0xb0>
    2b9c:	8c03      	ldrh	r3, [r0, #32]
    2b9e:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d1fb      	bne.n	2b9c <adc_sampling+0xb8>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2ba4:	7e02      	ldrb	r2, [r0, #24]
    2ba6:	3302      	adds	r3, #2
    2ba8:	4313      	orrs	r3, r2
    2baa:	7603      	strb	r3, [r0, #24]
    2bac:	8c03      	ldrh	r3, [r0, #32]
    2bae:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d1fb      	bne.n	2bac <adc_sampling+0xc8>

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;
    2bb4:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2bb6:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2bb8:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2bba:	7983      	ldrb	r3, [r0, #6]
    2bbc:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;
    2bbe:	000a      	movs	r2, r1
    2bc0:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2bc2:	421d      	tst	r5, r3
    2bc4:	d000      	beq.n	2bc8 <adc_sampling+0xe4>
		status_flags |= ADC_STATUS_WINDOW;
    2bc6:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2bc8:	421c      	tst	r4, r3
    2bca:	d000      	beq.n	2bce <adc_sampling+0xea>
		status_flags |= ADC_STATUS_OVERRUN;
    2bcc:	432a      	orrs	r2, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2bce:	4211      	tst	r1, r2
    2bd0:	d0f3      	beq.n	2bba <adc_sampling+0xd6>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    2bd2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2bd4:	b289      	uxth	r1, r1
    2bd6:	4b1d      	ldr	r3, [pc, #116]	; (2c4c <adc_sampling+0x168>)
    2bd8:	8019      	strh	r1, [r3, #0]
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2bda:	2301      	movs	r3, #1
    2bdc:	7183      	strb	r3, [r0, #6]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    2bde:	7982      	ldrb	r2, [r0, #6]
    2be0:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;
    2be2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2be4:	0754      	lsls	r4, r2, #29
    2be6:	d501      	bpl.n	2bec <adc_sampling+0x108>
		status_flags |= ADC_STATUS_WINDOW;
    2be8:	2402      	movs	r4, #2
    2bea:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2bec:	0792      	lsls	r2, r2, #30
    2bee:	d501      	bpl.n	2bf4 <adc_sampling+0x110>
		status_flags |= ADC_STATUS_OVERRUN;
    2bf0:	2204      	movs	r2, #4
    2bf2:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2bf4:	075b      	lsls	r3, r3, #29
    2bf6:	d514      	bpl.n	2c22 <adc_sampling+0x13e>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2bf8:	2302      	movs	r3, #2
    2bfa:	7183      	strb	r3, [r0, #6]
    2bfc:	e011      	b.n	2c22 <adc_sampling+0x13e>
		adc_start_conversion(&adc_instance);
		do {
		// Wait for conversion to be done and read out result
		} while (adc_read(&adc_instance, &discharge_signal_adc_result) == STATUS_BUSY);	
		
		printf("\n\r Discharge_signal_adc_result is: %d \r\n",discharge_signal_adc_result);
    2bfe:	4816      	ldr	r0, [pc, #88]	; (2c58 <adc_sampling+0x174>)
    2c00:	4b16      	ldr	r3, [pc, #88]	; (2c5c <adc_sampling+0x178>)
    2c02:	4798      	blx	r3
 		total_discharge_current += discharge_signal_adc_result;
    2c04:	4916      	ldr	r1, [pc, #88]	; (2c60 <adc_sampling+0x17c>)
    2c06:	4813      	ldr	r0, [pc, #76]	; (2c54 <adc_sampling+0x170>)
    2c08:	8802      	ldrh	r2, [r0, #0]
    2c0a:	2300      	movs	r3, #0
    2c0c:	680c      	ldr	r4, [r1, #0]
    2c0e:	684d      	ldr	r5, [r1, #4]
    2c10:	1912      	adds	r2, r2, r4
    2c12:	416b      	adcs	r3, r5
    2c14:	600a      	str	r2, [r1, #0]
    2c16:	604b      	str	r3, [r1, #4]
		discharge_sample_num ++;
    2c18:	4a12      	ldr	r2, [pc, #72]	; (2c64 <adc_sampling+0x180>)
    2c1a:	6813      	ldr	r3, [r2, #0]
    2c1c:	3301      	adds	r3, #1
    2c1e:	6013      	str	r3, [r2, #0]
    2c20:	e010      	b.n	2c44 <adc_sampling+0x160>
		adc_start_conversion(&adc_instance);
		do {
			// Wait for conversion to be done and read out result 
		} while (adc_read(&adc_instance, &charge_signal_adc_result) == STATUS_BUSY);
		
		printf("\n\r Charge_signal_adc_result is: %d \r\n",charge_signal_adc_result);
    2c22:	4811      	ldr	r0, [pc, #68]	; (2c68 <adc_sampling+0x184>)
    2c24:	4b0d      	ldr	r3, [pc, #52]	; (2c5c <adc_sampling+0x178>)
    2c26:	4798      	blx	r3
		total_charge_current += charge_signal_adc_result;
    2c28:	4910      	ldr	r1, [pc, #64]	; (2c6c <adc_sampling+0x188>)
    2c2a:	4808      	ldr	r0, [pc, #32]	; (2c4c <adc_sampling+0x168>)
    2c2c:	8802      	ldrh	r2, [r0, #0]
    2c2e:	2300      	movs	r3, #0
    2c30:	680c      	ldr	r4, [r1, #0]
    2c32:	684d      	ldr	r5, [r1, #4]
    2c34:	1912      	adds	r2, r2, r4
    2c36:	416b      	adcs	r3, r5
    2c38:	600a      	str	r2, [r1, #0]
    2c3a:	604b      	str	r3, [r1, #4]
		charge_sample_num++;
    2c3c:	4a0c      	ldr	r2, [pc, #48]	; (2c70 <adc_sampling+0x18c>)
    2c3e:	6813      	ldr	r3, [r2, #0]
    2c40:	3301      	adds	r3, #1
    2c42:	6013      	str	r3, [r2, #0]
		//udi_cdc_write_buf(&charge_signal_adc_result,2);
		//int16_t charge_raw_result_signed;
		//charge_raw_result_signed = (int16_t)charge_signal_adc_result;
		//adc_charge_signal_voltage = ((float)charge_raw_result_signed * (float)ADC_REFERENCE_INT1V_VALUE)/(float)ADC_8BIT_FULL_SCALE_VALUE;
	}
}
    2c44:	bd70      	pop	{r4, r5, r6, pc}
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	20000556 	.word	0x20000556
    2c4c:	20000694 	.word	0x20000694
    2c50:	200006b0 	.word	0x200006b0
    2c54:	200006ac 	.word	0x200006ac
    2c58:	00004f74 	.word	0x00004f74
    2c5c:	00003cbd 	.word	0x00003cbd
    2c60:	200005e8 	.word	0x200005e8
    2c64:	20000500 	.word	0x20000500
    2c68:	00004fa0 	.word	0x00004fa0
    2c6c:	200004f0 	.word	0x200004f0
    2c70:	200005a8 	.word	0x200005a8

00002c74 <battery_status_update>:

uint8_t battery_status_update(void)
{
	if (charger_status == 1)
    2c74:	4b17      	ldr	r3, [pc, #92]	; (2cd4 <battery_status_update+0x60>)
    2c76:	781b      	ldrb	r3, [r3, #0]
    2c78:	2b01      	cmp	r3, #1
    2c7a:	d115      	bne.n	2ca8 <battery_status_update+0x34>
	{
		if (charge_signal_adc_result > 0x00ff)
    2c7c:	4b16      	ldr	r3, [pc, #88]	; (2cd8 <battery_status_update+0x64>)
    2c7e:	881b      	ldrh	r3, [r3, #0]
    2c80:	2bff      	cmp	r3, #255	; 0xff
    2c82:	d906      	bls.n	2c92 <battery_status_update+0x1e>
		{
			battery_status = 1; //charging, battery is not full
    2c84:	2201      	movs	r2, #1
    2c86:	4b15      	ldr	r3, [pc, #84]	; (2cdc <battery_status_update+0x68>)
    2c88:	701a      	strb	r2, [r3, #0]
			
			//the followed discharge is not from 100% remain.
			discharge_from_full_flag = 0;
    2c8a:	2200      	movs	r2, #0
    2c8c:	4b14      	ldr	r3, [pc, #80]	; (2ce0 <battery_status_update+0x6c>)
    2c8e:	701a      	strb	r2, [r3, #0]
    2c90:	e01d      	b.n	2cce <battery_status_update+0x5a>
		}
		else if (charge_signal_adc_result < 0x20)
    2c92:	2b1f      	cmp	r3, #31
    2c94:	d81b      	bhi.n	2cce <battery_status_update+0x5a>
		{
			battery_status = 0;//no current in/out for battery, battery is full
    2c96:	2300      	movs	r3, #0
    2c98:	4a10      	ldr	r2, [pc, #64]	; (2cdc <battery_status_update+0x68>)
    2c9a:	7013      	strb	r3, [r2, #0]
			charge_signal_adc_result = 0;
    2c9c:	4a0e      	ldr	r2, [pc, #56]	; (2cd8 <battery_status_update+0x64>)
    2c9e:	8013      	strh	r3, [r2, #0]
			//the follow discharge will be from 100% remain, set the discharge_from_full_flag = 1
			discharge_from_full_flag = 1;
    2ca0:	2201      	movs	r2, #1
    2ca2:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <battery_status_update+0x6c>)
    2ca4:	701a      	strb	r2, [r3, #0]
    2ca6:	e012      	b.n	2cce <battery_status_update+0x5a>
		}
	}
	//need to add in self-discharge control logic and self-discharge to empty function
	else if (discharge_signal_adc_result > 0xff)
    2ca8:	4b0e      	ldr	r3, [pc, #56]	; (2ce4 <battery_status_update+0x70>)
    2caa:	881b      	ldrh	r3, [r3, #0]
    2cac:	2bff      	cmp	r3, #255	; 0xff
    2cae:	d906      	bls.n	2cbe <battery_status_update+0x4a>
	{
		battery_status = 2;    //discharging
    2cb0:	2202      	movs	r2, #2
    2cb2:	4b0a      	ldr	r3, [pc, #40]	; (2cdc <battery_status_update+0x68>)
    2cb4:	701a      	strb	r2, [r3, #0]
		charge_from_empty_flag = 0;
    2cb6:	2200      	movs	r2, #0
    2cb8:	4b0b      	ldr	r3, [pc, #44]	; (2ce8 <battery_status_update+0x74>)
    2cba:	701a      	strb	r2, [r3, #0]
    2cbc:	e007      	b.n	2cce <battery_status_update+0x5a>
	}
	else //battery is empty
	{
		battery_status = 0;
    2cbe:	2300      	movs	r3, #0
    2cc0:	4a06      	ldr	r2, [pc, #24]	; (2cdc <battery_status_update+0x68>)
    2cc2:	7013      	strb	r3, [r2, #0]
		discharge_signal_adc_result = 0;
    2cc4:	4a07      	ldr	r2, [pc, #28]	; (2ce4 <battery_status_update+0x70>)
    2cc6:	8013      	strh	r3, [r2, #0]
		charge_from_empty_flag = 1;	
    2cc8:	2201      	movs	r2, #1
    2cca:	4b07      	ldr	r3, [pc, #28]	; (2ce8 <battery_status_update+0x74>)
    2ccc:	701a      	strb	r2, [r3, #0]
	}
	return battery_status;
    2cce:	4b03      	ldr	r3, [pc, #12]	; (2cdc <battery_status_update+0x68>)
    2cd0:	7818      	ldrb	r0, [r3, #0]
}
    2cd2:	4770      	bx	lr
    2cd4:	20000556 	.word	0x20000556
    2cd8:	20000694 	.word	0x20000694
    2cdc:	200005f0 	.word	0x200005f0
    2ce0:	20000592 	.word	0x20000592
    2ce4:	200006ac 	.word	0x200006ac
    2ce8:	20000504 	.word	0x20000504

00002cec <charger_detection>:
	}
}

//charger detect function
void charger_detection(void)
{
    2cec:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    2cee:	2382      	movs	r3, #130	; 0x82
    2cf0:	05db      	lsls	r3, r3, #23
    2cf2:	6a19      	ldr	r1, [r3, #32]
    2cf4:	02c9      	lsls	r1, r1, #11
    2cf6:	0fc9      	lsrs	r1, r1, #31
	charger_status = port_pin_get_input_level(EXT1_PIN_5);
    2cf8:	4c09      	ldr	r4, [pc, #36]	; (2d20 <charger_detection+0x34>)
    2cfa:	7021      	strb	r1, [r4, #0]
	printf("charger_status %d \r\n", charger_status);
    2cfc:	4809      	ldr	r0, [pc, #36]	; (2d24 <charger_detection+0x38>)
    2cfe:	4b0a      	ldr	r3, [pc, #40]	; (2d28 <charger_detection+0x3c>)
    2d00:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2d02:	7823      	ldrb	r3, [r4, #0]
    2d04:	2b00      	cmp	r3, #0
    2d06:	d005      	beq.n	2d14 <charger_detection+0x28>
		port_base->OUTSET.reg = pin_mask;
    2d08:	2280      	movs	r2, #128	; 0x80
    2d0a:	0392      	lsls	r2, r2, #14
    2d0c:	2382      	movs	r3, #130	; 0x82
    2d0e:	05db      	lsls	r3, r3, #23
    2d10:	619a      	str	r2, [r3, #24]
    2d12:	e004      	b.n	2d1e <charger_detection+0x32>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d14:	2280      	movs	r2, #128	; 0x80
    2d16:	0392      	lsls	r2, r2, #14
    2d18:	2382      	movs	r3, #130	; 0x82
    2d1a:	05db      	lsls	r3, r3, #23
    2d1c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(EXT1_PIN_6,charger_status);
}
    2d1e:	bd10      	pop	{r4, pc}
    2d20:	20000556 	.word	0x20000556
    2d24:	00004fc8 	.word	0x00004fc8
    2d28:	00003cbd 	.word	0x00003cbd

00002d2c <ADC_event>:
	return battery_status;
}

//SYSTEM EVENT for ADC sampling and state detection
void ADC_event(struct events_resource *resource)
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	0004      	movs	r4, r0

	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
    2d30:	2101      	movs	r1, #1
    2d32:	4b0d      	ldr	r3, [pc, #52]	; (2d68 <ADC_event+0x3c>)
    2d34:	4798      	blx	r3
    2d36:	2800      	cmp	r0, #0
    2d38:	d014      	beq.n	2d64 <ADC_event+0x38>
		//port_pin_toggle_output_level(LED_0_PIN);
		charger_detection();
    2d3a:	4b0c      	ldr	r3, [pc, #48]	; (2d6c <ADC_event+0x40>)
    2d3c:	4798      	blx	r3
		adc_sampling();
    2d3e:	4b0c      	ldr	r3, [pc, #48]	; (2d70 <ADC_event+0x44>)
    2d40:	4798      	blx	r3
		battery_status_new = battery_status_update();
    2d42:	4b0c      	ldr	r3, [pc, #48]	; (2d74 <ADC_event+0x48>)
    2d44:	4798      	blx	r3
    2d46:	4b0c      	ldr	r3, [pc, #48]	; (2d78 <ADC_event+0x4c>)
    2d48:	7018      	strb	r0, [r3, #0]
		if (battery_status_new != battery_status_old) //if battery charging status changes, send data to pc to update
    2d4a:	4b0c      	ldr	r3, [pc, #48]	; (2d7c <ADC_event+0x50>)
    2d4c:	781b      	ldrb	r3, [r3, #0]
    2d4e:	4283      	cmp	r3, r0
    2d50:	d004      	beq.n	2d5c <ADC_event+0x30>
		{	
			dateReportFlag = 1;
    2d52:	2201      	movs	r2, #1
    2d54:	4b0a      	ldr	r3, [pc, #40]	; (2d80 <ADC_event+0x54>)
    2d56:	701a      	strb	r2, [r3, #0]
			battery_status_old = battery_status_new;
    2d58:	4b08      	ldr	r3, [pc, #32]	; (2d7c <ADC_event+0x50>)
    2d5a:	7018      	strb	r0, [r3, #0]
		}
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
    2d5c:	2101      	movs	r1, #1
    2d5e:	0020      	movs	r0, r4
    2d60:	4b08      	ldr	r3, [pc, #32]	; (2d84 <ADC_event+0x58>)
    2d62:	4798      	blx	r3
	}
}
    2d64:	bd10      	pop	{r4, pc}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	00000d2d 	.word	0x00000d2d
    2d6c:	00002ced 	.word	0x00002ced
    2d70:	00002ae5 	.word	0x00002ae5
    2d74:	00002c75 	.word	0x00002c75
    2d78:	200005f1 	.word	0x200005f1
    2d7c:	200005c4 	.word	0x200005c4
    2d80:	20000596 	.word	0x20000596
    2d84:	00000d61 	.word	0x00000d61

00002d88 <processCommandMsg>:
*	|1st Byte   |2nd Byte      |3rd Byte         | ..........
*   queryType command: commandDataLength and commandData are 0.
***************************************************************/
void processCommandMsg(void)
{	
	commandType = commandMsg[0]; //get commandType
    2d88:	4b14      	ldr	r3, [pc, #80]	; (2ddc <processCommandMsg+0x54>)
    2d8a:	7819      	ldrb	r1, [r3, #0]
    2d8c:	4a14      	ldr	r2, [pc, #80]	; (2de0 <processCommandMsg+0x58>)
    2d8e:	7011      	strb	r1, [r2, #0]
	commandIndex = commandMsg[1];//get commandIndex
    2d90:	7859      	ldrb	r1, [r3, #1]
    2d92:	4a14      	ldr	r2, [pc, #80]	; (2de4 <processCommandMsg+0x5c>)
    2d94:	7011      	strb	r1, [r2, #0]
	commandDataLength = commandMsg[2];//get commandDataLength
    2d96:	7899      	ldrb	r1, [r3, #2]
    2d98:	4b13      	ldr	r3, [pc, #76]	; (2de8 <processCommandMsg+0x60>)
    2d9a:	7019      	strb	r1, [r3, #0]
		
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
    2d9c:	2900      	cmp	r1, #0
    2d9e:	d005      	beq.n	2dac <processCommandMsg+0x24>
    2da0:	480e      	ldr	r0, [pc, #56]	; (2ddc <processCommandMsg+0x54>)
    2da2:	1cc3      	adds	r3, r0, #3
    2da4:	4a11      	ldr	r2, [pc, #68]	; (2dec <processCommandMsg+0x64>)
    2da6:	3103      	adds	r1, #3
    2da8:	1840      	adds	r0, r0, r1
    2daa:	e004      	b.n	2db6 <processCommandMsg+0x2e>
    2dac:	4b0b      	ldr	r3, [pc, #44]	; (2ddc <processCommandMsg+0x54>)
    2dae:	0019      	movs	r1, r3
    2db0:	3114      	adds	r1, #20
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
	{
		commandMsg[i] = 0;
    2db2:	2200      	movs	r2, #0
    2db4:	e006      	b.n	2dc4 <processCommandMsg+0x3c>
		
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
	{
		for (int i=0;i<commandDataLength;i++)
		{
			commandData[i] = commandMsg[i+3];
    2db6:	7819      	ldrb	r1, [r3, #0]
    2db8:	7011      	strb	r1, [r2, #0]
    2dba:	3301      	adds	r3, #1
    2dbc:	3201      	adds	r2, #1
	commandIndex = commandMsg[1];//get commandIndex
	commandDataLength = commandMsg[2];//get commandDataLength
		
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
	{
		for (int i=0;i<commandDataLength;i++)
    2dbe:	4283      	cmp	r3, r0
    2dc0:	d1f9      	bne.n	2db6 <processCommandMsg+0x2e>
    2dc2:	e7f3      	b.n	2dac <processCommandMsg+0x24>
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
	{
		commandMsg[i] = 0;
    2dc4:	701a      	strb	r2, [r3, #0]
    2dc6:	3301      	adds	r3, #1
		{
			commandData[i] = commandMsg[i+3];
		}
	}
	//reset commandMsg[] back to 0;
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
    2dc8:	428b      	cmp	r3, r1
    2dca:	d1fb      	bne.n	2dc4 <processCommandMsg+0x3c>
	{
		commandMsg[i] = 0;
	}
	canMsgInFlag = 0; //reset MsgIn flag
    2dcc:	2200      	movs	r2, #0
    2dce:	4b08      	ldr	r3, [pc, #32]	; (2df0 <processCommandMsg+0x68>)
    2dd0:	701a      	strb	r2, [r3, #0]
	//usbMsgInFlag = 0;//reset MsgIn flag
	commandReady = 1;//set commandReady to be executed
    2dd2:	3201      	adds	r2, #1
    2dd4:	4b07      	ldr	r3, [pc, #28]	; (2df4 <processCommandMsg+0x6c>)
    2dd6:	701a      	strb	r2, [r3, #0]
}
    2dd8:	4770      	bx	lr
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	200005f4 	.word	0x200005f4
    2de0:	20000554 	.word	0x20000554
    2de4:	2000059c 	.word	0x2000059c
    2de8:	200004f8 	.word	0x200004f8
    2dec:	200005ac 	.word	0x200005ac
    2df0:	200004e8 	.word	0x200004e8
    2df4:	2000054e 	.word	0x2000054e

00002df8 <execute_system_command>:




void execute_system_command()
{	
    2df8:	b510      	push	{r4, lr}
	system_busy_flag = 1;
    2dfa:	2201      	movs	r2, #1
    2dfc:	4b12      	ldr	r3, [pc, #72]	; (2e48 <execute_system_command+0x50>)
    2dfe:	701a      	strb	r2, [r3, #0]
	commandReady = 0;
    2e00:	2200      	movs	r2, #0
    2e02:	4b12      	ldr	r3, [pc, #72]	; (2e4c <execute_system_command+0x54>)
    2e04:	701a      	strb	r2, [r3, #0]
	printf("commandType == %d", commandType);
    2e06:	4c12      	ldr	r4, [pc, #72]	; (2e50 <execute_system_command+0x58>)
    2e08:	7821      	ldrb	r1, [r4, #0]
    2e0a:	4812      	ldr	r0, [pc, #72]	; (2e54 <execute_system_command+0x5c>)
    2e0c:	4b12      	ldr	r3, [pc, #72]	; (2e58 <execute_system_command+0x60>)
    2e0e:	4798      	blx	r3
	if(commandType == CMD_TYPE_REQUEST)
    2e10:	7823      	ldrb	r3, [r4, #0]
    2e12:	2b01      	cmp	r3, #1
    2e14:	d106      	bne.n	2e24 <execute_system_command+0x2c>
	{	
		requestAction[commandIndex]();		
    2e16:	4b11      	ldr	r3, [pc, #68]	; (2e5c <execute_system_command+0x64>)
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	009b      	lsls	r3, r3, #2
    2e1c:	4a10      	ldr	r2, [pc, #64]	; (2e60 <execute_system_command+0x68>)
    2e1e:	589b      	ldr	r3, [r3, r2]
    2e20:	4798      	blx	r3
    2e22:	e007      	b.n	2e34 <execute_system_command+0x3c>
	}else if (commandType == CMD_TYPE_SET)
    2e24:	2b02      	cmp	r3, #2
    2e26:	d105      	bne.n	2e34 <execute_system_command+0x3c>
	{
		setAction[commandIndex]();
    2e28:	4b0c      	ldr	r3, [pc, #48]	; (2e5c <execute_system_command+0x64>)
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	009b      	lsls	r3, r3, #2
    2e2e:	4a0d      	ldr	r2, [pc, #52]	; (2e64 <execute_system_command+0x6c>)
    2e30:	589b      	ldr	r3, [r3, r2]
    2e32:	4798      	blx	r3
	}
	
	commandType = 0; //reset commandType to 0
    2e34:	2300      	movs	r3, #0
    2e36:	4a06      	ldr	r2, [pc, #24]	; (2e50 <execute_system_command+0x58>)
    2e38:	7013      	strb	r3, [r2, #0]
	commandIndex = 0;//reset commandIndex to 0
    2e3a:	4a08      	ldr	r2, [pc, #32]	; (2e5c <execute_system_command+0x64>)
    2e3c:	7013      	strb	r3, [r2, #0]
	commandDataLength = 0;//reset commandDataLength to 0
    2e3e:	4a0a      	ldr	r2, [pc, #40]	; (2e68 <execute_system_command+0x70>)
    2e40:	7013      	strb	r3, [r2, #0]
	system_busy_flag = 0;
    2e42:	4a01      	ldr	r2, [pc, #4]	; (2e48 <execute_system_command+0x50>)
    2e44:	7013      	strb	r3, [r2, #0]
}
    2e46:	bd10      	pop	{r4, pc}
    2e48:	20000597 	.word	0x20000597
    2e4c:	2000054e 	.word	0x2000054e
    2e50:	20000554 	.word	0x20000554
    2e54:	00004fe0 	.word	0x00004fe0
    2e58:	00003cbd 	.word	0x00003cbd
    2e5c:	2000059c 	.word	0x2000059c
    2e60:	2000002c 	.word	0x2000002c
    2e64:	20000018 	.word	0x20000018
    2e68:	200004f8 	.word	0x200004f8

00002e6c <battery_charge_calculation>:

void battery_charge_calculation(uint8_t time)
{
    2e6c:	b570      	push	{r4, r5, r6, lr}
    2e6e:	0004      	movs	r4, r0
	printf("battery_charge_calculation\r\n");
    2e70:	4844      	ldr	r0, [pc, #272]	; (2f84 <battery_charge_calculation+0x118>)
    2e72:	4b45      	ldr	r3, [pc, #276]	; (2f88 <battery_charge_calculation+0x11c>)
    2e74:	4798      	blx	r3
	static uint16_t avg_discharge_current_reading_old;
	static int32_t delta_charge; //total electrical charge that been charged into battery plus discharged from battery in unit of mAsec. 

	int16_t diff = 0;
	
	if (charge_sample_num >0)
    2e76:	4b45      	ldr	r3, [pc, #276]	; (2f8c <battery_charge_calculation+0x120>)
    2e78:	681a      	ldr	r2, [r3, #0]
    2e7a:	2a00      	cmp	r2, #0
    2e7c:	d025      	beq.n	2eca <battery_charge_calculation+0x5e>
	{
		avg_charge_current_reading = (uint16_t)(total_charge_current / charge_sample_num);
    2e7e:	4d44      	ldr	r5, [pc, #272]	; (2f90 <battery_charge_calculation+0x124>)
    2e80:	2300      	movs	r3, #0
    2e82:	6828      	ldr	r0, [r5, #0]
    2e84:	6869      	ldr	r1, [r5, #4]
    2e86:	4e43      	ldr	r6, [pc, #268]	; (2f94 <battery_charge_calculation+0x128>)
    2e88:	47b0      	blx	r6
    2e8a:	b280      	uxth	r0, r0
    2e8c:	4b42      	ldr	r3, [pc, #264]	; (2f98 <battery_charge_calculation+0x12c>)
    2e8e:	8018      	strh	r0, [r3, #0]
		total_charge_current = 0;
    2e90:	2200      	movs	r2, #0
    2e92:	2300      	movs	r3, #0
    2e94:	602a      	str	r2, [r5, #0]
    2e96:	606b      	str	r3, [r5, #4]
		charge_sample_num = 0;
    2e98:	4b3c      	ldr	r3, [pc, #240]	; (2f8c <battery_charge_calculation+0x120>)
    2e9a:	601a      	str	r2, [r3, #0]
		diff = (int16_t)(avg_charge_current_reading - avg_charge_current_reading_old);
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    2e9c:	4b3f      	ldr	r3, [pc, #252]	; (2f9c <battery_charge_calculation+0x130>)
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	1ac3      	subs	r3, r0, r3
    2ea2:	3314      	adds	r3, #20
    2ea4:	b29b      	uxth	r3, r3
    2ea6:	2b28      	cmp	r3, #40	; 0x28
    2ea8:	d904      	bls.n	2eb4 <battery_charge_calculation+0x48>
		{
			dateReportFlag = 1;
    2eaa:	3201      	adds	r2, #1
    2eac:	4b3c      	ldr	r3, [pc, #240]	; (2fa0 <battery_charge_calculation+0x134>)
    2eae:	701a      	strb	r2, [r3, #0]
			avg_charge_current_reading_old = avg_charge_current_reading;
    2eb0:	4b3a      	ldr	r3, [pc, #232]	; (2f9c <battery_charge_calculation+0x130>)
    2eb2:	8018      	strh	r0, [r3, #0]
		}
		delta_charge += avg_charge_current_reading * 1000 * 10 / 4095 / 75 * time;
    2eb4:	4d3b      	ldr	r5, [pc, #236]	; (2fa4 <battery_charge_calculation+0x138>)
    2eb6:	4b3c      	ldr	r3, [pc, #240]	; (2fa8 <battery_charge_calculation+0x13c>)
    2eb8:	4358      	muls	r0, r3
    2eba:	493c      	ldr	r1, [pc, #240]	; (2fac <battery_charge_calculation+0x140>)
    2ebc:	4b3c      	ldr	r3, [pc, #240]	; (2fb0 <battery_charge_calculation+0x144>)
    2ebe:	4798      	blx	r3
    2ec0:	4360      	muls	r0, r4
    2ec2:	682b      	ldr	r3, [r5, #0]
    2ec4:	469c      	mov	ip, r3
    2ec6:	4460      	add	r0, ip
    2ec8:	6028      	str	r0, [r5, #0]
	}
	
	if (discharge_sample_num > 0)
    2eca:	4b3a      	ldr	r3, [pc, #232]	; (2fb4 <battery_charge_calculation+0x148>)
    2ecc:	681a      	ldr	r2, [r3, #0]
    2ece:	2a00      	cmp	r2, #0
    2ed0:	d025      	beq.n	2f1e <battery_charge_calculation+0xb2>
	{	
		avg_discharge_current_reading = (uint16_t)(total_discharge_current / discharge_sample_num);
    2ed2:	4d39      	ldr	r5, [pc, #228]	; (2fb8 <battery_charge_calculation+0x14c>)
    2ed4:	2300      	movs	r3, #0
    2ed6:	6828      	ldr	r0, [r5, #0]
    2ed8:	6869      	ldr	r1, [r5, #4]
    2eda:	4e2e      	ldr	r6, [pc, #184]	; (2f94 <battery_charge_calculation+0x128>)
    2edc:	47b0      	blx	r6
    2ede:	b280      	uxth	r0, r0
    2ee0:	4b36      	ldr	r3, [pc, #216]	; (2fbc <battery_charge_calculation+0x150>)
    2ee2:	8018      	strh	r0, [r3, #0]
		total_discharge_current = 0;
    2ee4:	2200      	movs	r2, #0
    2ee6:	2300      	movs	r3, #0
    2ee8:	602a      	str	r2, [r5, #0]
    2eea:	606b      	str	r3, [r5, #4]
		discharge_sample_num = 0;
    2eec:	4b31      	ldr	r3, [pc, #196]	; (2fb4 <battery_charge_calculation+0x148>)
    2eee:	601a      	str	r2, [r3, #0]
		diff = (int16_t)(avg_discharge_current_reading - avg_discharge_current_reading_old);
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    2ef0:	4b33      	ldr	r3, [pc, #204]	; (2fc0 <battery_charge_calculation+0x154>)
    2ef2:	881b      	ldrh	r3, [r3, #0]
    2ef4:	1ac3      	subs	r3, r0, r3
    2ef6:	3314      	adds	r3, #20
    2ef8:	b29b      	uxth	r3, r3
    2efa:	2b28      	cmp	r3, #40	; 0x28
    2efc:	d904      	bls.n	2f08 <battery_charge_calculation+0x9c>
		{
			dateReportFlag = 1;
    2efe:	3201      	adds	r2, #1
    2f00:	4b27      	ldr	r3, [pc, #156]	; (2fa0 <battery_charge_calculation+0x134>)
    2f02:	701a      	strb	r2, [r3, #0]
			avg_discharge_current_reading_old = avg_discharge_current_reading;
    2f04:	4b2e      	ldr	r3, [pc, #184]	; (2fc0 <battery_charge_calculation+0x154>)
    2f06:	8018      	strh	r0, [r3, #0]
		}
		delta_charge -= avg_discharge_current_reading * 1000 / 4095 / 5 * time;
    2f08:	4d26      	ldr	r5, [pc, #152]	; (2fa4 <battery_charge_calculation+0x138>)
    2f0a:	23fa      	movs	r3, #250	; 0xfa
    2f0c:	009b      	lsls	r3, r3, #2
    2f0e:	4358      	muls	r0, r3
    2f10:	492c      	ldr	r1, [pc, #176]	; (2fc4 <battery_charge_calculation+0x158>)
    2f12:	4b27      	ldr	r3, [pc, #156]	; (2fb0 <battery_charge_calculation+0x144>)
    2f14:	4798      	blx	r3
    2f16:	4344      	muls	r4, r0
    2f18:	682b      	ldr	r3, [r5, #0]
    2f1a:	1b1c      	subs	r4, r3, r4
    2f1c:	602c      	str	r4, [r5, #0]
	}
		
	if ((((uint32_t)(delta_charge) > battery_capcity) && (charge_from_empty_flag == 1) ) ||
    2f1e:	4b21      	ldr	r3, [pc, #132]	; (2fa4 <battery_charge_calculation+0x138>)
    2f20:	6818      	ldr	r0, [r3, #0]
    2f22:	4b29      	ldr	r3, [pc, #164]	; (2fc8 <battery_charge_calculation+0x15c>)
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	4298      	cmp	r0, r3
    2f28:	d903      	bls.n	2f32 <battery_charge_calculation+0xc6>
    2f2a:	4a28      	ldr	r2, [pc, #160]	; (2fcc <battery_charge_calculation+0x160>)
    2f2c:	7812      	ldrb	r2, [r2, #0]
    2f2e:	2a01      	cmp	r2, #1
    2f30:	d006      	beq.n	2f40 <battery_charge_calculation+0xd4>
    2f32:	4242      	negs	r2, r0
    2f34:	4293      	cmp	r3, r2
    2f36:	d208      	bcs.n	2f4a <battery_charge_calculation+0xde>
		(((uint32_t)(0 - delta_charge) > battery_capcity) && (discharge_from_full_flag == 1)))
    2f38:	4b25      	ldr	r3, [pc, #148]	; (2fd0 <battery_charge_calculation+0x164>)
    2f3a:	781b      	ldrb	r3, [r3, #0]
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d104      	bne.n	2f4a <battery_charge_calculation+0xde>
	{
		calibrated_battery_capacity = (uint32_t)(abs(delta_charge));
    2f40:	17c2      	asrs	r2, r0, #31
    2f42:	1883      	adds	r3, r0, r2
    2f44:	4053      	eors	r3, r2
    2f46:	4a23      	ldr	r2, [pc, #140]	; (2fd4 <battery_charge_calculation+0x168>)
    2f48:	6013      	str	r3, [r2, #0]
	}
	
	if (delta_charge > 0)
    2f4a:	2800      	cmp	r0, #0
    2f4c:	dd08      	ble.n	2f60 <battery_charge_calculation+0xf4>
	{
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
    2f4e:	2364      	movs	r3, #100	; 0x64
    2f50:	4358      	muls	r0, r3
    2f52:	4b20      	ldr	r3, [pc, #128]	; (2fd4 <battery_charge_calculation+0x168>)
    2f54:	6819      	ldr	r1, [r3, #0]
    2f56:	4b20      	ldr	r3, [pc, #128]	; (2fd8 <battery_charge_calculation+0x16c>)
    2f58:	4798      	blx	r3
    2f5a:	4b20      	ldr	r3, [pc, #128]	; (2fdc <battery_charge_calculation+0x170>)
    2f5c:	7018      	strb	r0, [r3, #0]
    2f5e:	e00f      	b.n	2f80 <battery_charge_calculation+0x114>
	}
	else
	{
		charge_remain_percentage = (calibrated_battery_capacity + delta_charge) * 100 / calibrated_battery_capacity;
    2f60:	4b1c      	ldr	r3, [pc, #112]	; (2fd4 <battery_charge_calculation+0x168>)
    2f62:	6819      	ldr	r1, [r3, #0]
    2f64:	1840      	adds	r0, r0, r1
    2f66:	2364      	movs	r3, #100	; 0x64
    2f68:	4358      	muls	r0, r3
    2f6a:	4b1b      	ldr	r3, [pc, #108]	; (2fd8 <battery_charge_calculation+0x16c>)
    2f6c:	4798      	blx	r3
    2f6e:	b240      	sxtb	r0, r0
		if (charge_remain_percentage < 1)
    2f70:	2800      	cmp	r0, #0
    2f72:	dd02      	ble.n	2f7a <battery_charge_calculation+0x10e>
	{
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
	}
	else
	{
		charge_remain_percentage = (calibrated_battery_capacity + delta_charge) * 100 / calibrated_battery_capacity;
    2f74:	4b19      	ldr	r3, [pc, #100]	; (2fdc <battery_charge_calculation+0x170>)
    2f76:	7018      	strb	r0, [r3, #0]
    2f78:	e002      	b.n	2f80 <battery_charge_calculation+0x114>
		if (charge_remain_percentage < 1)
		{
			charge_remain_percentage = 1;
    2f7a:	2201      	movs	r2, #1
    2f7c:	4b17      	ldr	r3, [pc, #92]	; (2fdc <battery_charge_calculation+0x170>)
    2f7e:	701a      	strb	r2, [r3, #0]
		}
	}
}
    2f80:	bd70      	pop	{r4, r5, r6, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	00004ff4 	.word	0x00004ff4
    2f88:	00003db5 	.word	0x00003db5
    2f8c:	200005a8 	.word	0x200005a8
    2f90:	200004f0 	.word	0x200004f0
    2f94:	000039e1 	.word	0x000039e1
    2f98:	20000608 	.word	0x20000608
    2f9c:	20000594 	.word	0x20000594
    2fa0:	20000596 	.word	0x20000596
    2fa4:	200005c0 	.word	0x200005c0
    2fa8:	00002710 	.word	0x00002710
    2fac:	0004afb5 	.word	0x0004afb5
    2fb0:	00003809 	.word	0x00003809
    2fb4:	20000500 	.word	0x20000500
    2fb8:	200005e8 	.word	0x200005e8
    2fbc:	2000054c 	.word	0x2000054c
    2fc0:	20000590 	.word	0x20000590
    2fc4:	00004ffb 	.word	0x00004ffb
    2fc8:	20000024 	.word	0x20000024
    2fcc:	20000504 	.word	0x20000504
    2fd0:	20000592 	.word	0x20000592
    2fd4:	20000020 	.word	0x20000020
    2fd8:	000036f5 	.word	0x000036f5
    2fdc:	20000555 	.word	0x20000555

00002fe0 <rtc_match_callback>:
	rtc_calendar_enable(&rtc_instance);
}
struct rtc_calendar_alarm_time alarm;

void rtc_match_callback(void)
{
    2fe0:	b570      	push	{r4, r5, r6, lr}
 * Start a new TSENS conversion.
 *
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;
    2fe2:	4a20      	ldr	r2, [pc, #128]	; (3064 <rtc_match_callback+0x84>)
    2fe4:	7851      	ldrb	r1, [r2, #1]
    2fe6:	2301      	movs	r3, #1
    2fe8:	430b      	orrs	r3, r1
    2fea:	7053      	strb	r3, [r2, #1]
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool tsens_is_syncing(void)
{
	if (TSENS->SYNCBUSY.reg) {
    2fec:	6893      	ldr	r3, [r2, #8]
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;

	while (tsens_is_syncing()) {
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d1fc      	bne.n	2fec <rtc_match_callback+0xc>
	static uint8_t second_count = 1;
	
	tsens_start_conversion();
	do {
		/* Wait for conversion to be done and read out temperature result */
	} while (tsens_read(&temp_result) != STATUS_OK);
    2ff2:	4d1d      	ldr	r5, [pc, #116]	; (3068 <rtc_match_callback+0x88>)
    2ff4:	4c1d      	ldr	r4, [pc, #116]	; (306c <rtc_match_callback+0x8c>)
    2ff6:	0028      	movs	r0, r5
    2ff8:	47a0      	blx	r4
    2ffa:	2800      	cmp	r0, #0
    2ffc:	d1fb      	bne.n	2ff6 <rtc_match_callback+0x16>
	printf("temperature :" );
    2ffe:	481c      	ldr	r0, [pc, #112]	; (3070 <rtc_match_callback+0x90>)
    3000:	4c1c      	ldr	r4, [pc, #112]	; (3074 <rtc_match_callback+0x94>)
    3002:	47a0      	blx	r4
	printf("%ld \r\n", temp_result);
    3004:	4b18      	ldr	r3, [pc, #96]	; (3068 <rtc_match_callback+0x88>)
    3006:	6819      	ldr	r1, [r3, #0]
    3008:	481b      	ldr	r0, [pc, #108]	; (3078 <rtc_match_callback+0x98>)
    300a:	47a0      	blx	r4
	
	if (dateReportFlag == 1)
    300c:	4b1b      	ldr	r3, [pc, #108]	; (307c <rtc_match_callback+0x9c>)
    300e:	781b      	ldrb	r3, [r3, #0]
    3010:	2b01      	cmp	r3, #1
    3012:	d10a      	bne.n	302a <rtc_match_callback+0x4a>
	{
		battery_charge_calculation(second_count);
    3014:	4c1a      	ldr	r4, [pc, #104]	; (3080 <rtc_match_callback+0xa0>)
    3016:	7820      	ldrb	r0, [r4, #0]
    3018:	4b1a      	ldr	r3, [pc, #104]	; (3084 <rtc_match_callback+0xa4>)
    301a:	4798      	blx	r3
		second_count = 1;
    301c:	2301      	movs	r3, #1
    301e:	7023      	strb	r3, [r4, #0]
		send_battery_data();
    3020:	4b19      	ldr	r3, [pc, #100]	; (3088 <rtc_match_callback+0xa8>)
    3022:	4798      	blx	r3
		//reset flags
		dateReportFlag = 0;
    3024:	2200      	movs	r2, #0
    3026:	4b15      	ldr	r3, [pc, #84]	; (307c <rtc_match_callback+0x9c>)
    3028:	701a      	strb	r2, [r3, #0]
	}
	
	
	/* Set new alarm in 5 seconds */
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    302a:	4c18      	ldr	r4, [pc, #96]	; (308c <rtc_match_callback+0xac>)
    302c:	2301      	movs	r3, #1
    302e:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 20;
	alarm.time.second = alarm.time.second % 60;
    3030:	7820      	ldrb	r0, [r4, #0]
    3032:	3014      	adds	r0, #20
    3034:	b2c0      	uxtb	r0, r0
    3036:	4d16      	ldr	r5, [pc, #88]	; (3090 <rtc_match_callback+0xb0>)
    3038:	213c      	movs	r1, #60	; 0x3c
    303a:	47a8      	blx	r5
    303c:	b2c8      	uxtb	r0, r1
    303e:	7020      	strb	r0, [r4, #0]
	
	//forced data reporting every 10 seconds
	if ((alarm.time.second % 10) == 0)
    3040:	210a      	movs	r1, #10
    3042:	47a8      	blx	r5
    3044:	b2c9      	uxtb	r1, r1
    3046:	2900      	cmp	r1, #0
    3048:	d102      	bne.n	3050 <rtc_match_callback+0x70>
	{
		dateReportFlag = 1;
    304a:	2201      	movs	r2, #1
    304c:	4b0b      	ldr	r3, [pc, #44]	; (307c <rtc_match_callback+0x9c>)
    304e:	701a      	strb	r2, [r3, #0]
	}
	
	second_count++;
    3050:	4a0b      	ldr	r2, [pc, #44]	; (3080 <rtc_match_callback+0xa0>)
    3052:	7813      	ldrb	r3, [r2, #0]
    3054:	3301      	adds	r3, #1
    3056:	7013      	strb	r3, [r2, #0]
	
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    3058:	2200      	movs	r2, #0
    305a:	490c      	ldr	r1, [pc, #48]	; (308c <rtc_match_callback+0xac>)
    305c:	480d      	ldr	r0, [pc, #52]	; (3094 <rtc_match_callback+0xb4>)
    305e:	4b0e      	ldr	r3, [pc, #56]	; (3098 <rtc_match_callback+0xb8>)
    3060:	4798      	blx	r3
	
}
    3062:	bd70      	pop	{r4, r5, r6, pc}
    3064:	40003000 	.word	0x40003000
    3068:	200006d0 	.word	0x200006d0
    306c:	00000b55 	.word	0x00000b55
    3070:	00005010 	.word	0x00005010
    3074:	00003cbd 	.word	0x00003cbd
    3078:	00005020 	.word	0x00005020
    307c:	20000596 	.word	0x20000596
    3080:	20000028 	.word	0x20000028
    3084:	00002e6d 	.word	0x00002e6d
    3088:	00002879 	.word	0x00002879
    308c:	2000069c 	.word	0x2000069c
    3090:	00003801 	.word	0x00003801
    3094:	20000658 	.word	0x20000658
    3098:	000008a5 	.word	0x000008a5

0000309c <CAN0_Handler>:
//! [can_init_setup]


//! [can_interrupt_handler]
void CAN0_Handler(void)
{
    309c:	b5f0      	push	{r4, r5, r6, r7, lr}
    309e:	464f      	mov	r7, r9
    30a0:	4646      	mov	r6, r8
    30a2:	b4c0      	push	{r6, r7}
    30a4:	b085      	sub	sp, #20
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    30a6:	4b8b      	ldr	r3, [pc, #556]	; (32d4 <CAN0_Handler+0x238>)
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);
    30ac:	9203      	str	r2, [sp, #12]

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    30ae:	9a03      	ldr	r2, [sp, #12]
    30b0:	0312      	lsls	r2, r2, #12
    30b2:	d566      	bpl.n	3182 <CAN0_Handler+0xe6>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    30b4:	2280      	movs	r2, #128	; 0x80
    30b6:	0312      	lsls	r2, r2, #12
    30b8:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    30ba:	2300      	movs	r3, #0
    30bc:	9302      	str	r3, [sp, #8]
    30be:	9b02      	ldr	r3, [sp, #8]
    30c0:	2b03      	cmp	r3, #3
    30c2:	d85e      	bhi.n	3182 <CAN0_Handler+0xe6>
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    30c4:	4b83      	ldr	r3, [pc, #524]	; (32d4 <CAN0_Handler+0x238>)
    30c6:	4699      	mov	r9, r3
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    30c8:	4698      	mov	r8, r3
			if (can_rx_get_buffer_status(&can_instance, i)) {
				rx_buffer_index = i;
				can_rx_clear_buffer_status(&can_instance, i);
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    30ca:	4f83      	ldr	r7, [pc, #524]	; (32d8 <CAN0_Handler+0x23c>)
	status = can_read_interrupt_status(&can_instance);

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
			if (can_rx_get_buffer_status(&can_instance, i)) {
    30cc:	9a02      	ldr	r2, [sp, #8]
 *  \retval false Rx Buffer not updated.
 */
static inline bool can_rx_get_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
    30ce:	2a1f      	cmp	r2, #31
    30d0:	d80a      	bhi.n	30e8 <CAN0_Handler+0x4c>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    30d2:	2398      	movs	r3, #152	; 0x98
    30d4:	4649      	mov	r1, r9
    30d6:	6809      	ldr	r1, [r1, #0]
    30d8:	58c9      	ldr	r1, [r1, r3]
    30da:	3b97      	subs	r3, #151	; 0x97
    30dc:	4093      	lsls	r3, r2
    30de:	400b      	ands	r3, r1
    30e0:	1e5a      	subs	r2, r3, #1
    30e2:	4193      	sbcs	r3, r2
    30e4:	b2db      	uxtb	r3, r3
    30e6:	e00a      	b.n	30fe <CAN0_Handler+0x62>
		} else {
			return false;
		}
	} else {
		index -= 32;
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    30e8:	239c      	movs	r3, #156	; 0x9c
    30ea:	4641      	mov	r1, r8
    30ec:	6809      	ldr	r1, [r1, #0]
    30ee:	58c9      	ldr	r1, [r1, r3]
    30f0:	3a20      	subs	r2, #32
    30f2:	3b9b      	subs	r3, #155	; 0x9b
    30f4:	4093      	lsls	r3, r2
    30f6:	400b      	ands	r3, r1
    30f8:	1e5a      	subs	r2, r3, #1
    30fa:	4193      	sbcs	r3, r2
    30fc:	b2db      	uxtb	r3, r3
    30fe:	2b00      	cmp	r3, #0
    3100:	d039      	beq.n	3176 <CAN0_Handler+0xda>
				rx_buffer_index = i;
    3102:	9b02      	ldr	r3, [sp, #8]
    3104:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
    3106:	9b02      	ldr	r3, [sp, #8]
 *
 */
static inline void can_rx_clear_buffer_status(
		struct can_module *const module_inst, uint32_t index)
{
	if (index < 32) {
    3108:	2b1f      	cmp	r3, #31
    310a:	d807      	bhi.n	311c <CAN0_Handler+0x80>
		module_inst->hw->NDAT1.reg = (1 << index);
    310c:	4a71      	ldr	r2, [pc, #452]	; (32d4 <CAN0_Handler+0x238>)
    310e:	6811      	ldr	r1, [r2, #0]
    3110:	2201      	movs	r2, #1
    3112:	409a      	lsls	r2, r3
    3114:	0013      	movs	r3, r2
    3116:	2298      	movs	r2, #152	; 0x98
    3118:	508b      	str	r3, [r1, r2]
    311a:	e007      	b.n	312c <CAN0_Handler+0x90>
	} else {
		index -= 32;
		module_inst->hw->NDAT2.reg = (1 << index);
    311c:	4a6d      	ldr	r2, [pc, #436]	; (32d4 <CAN0_Handler+0x238>)
    311e:	6811      	ldr	r1, [r2, #0]
    3120:	3b20      	subs	r3, #32
    3122:	2201      	movs	r2, #1
    3124:	409a      	lsls	r2, r3
    3126:	0013      	movs	r3, r2
    3128:	229c      	movs	r2, #156	; 0x9c
    312a:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    312c:	9a01      	ldr	r2, [sp, #4]
    312e:	0039      	movs	r1, r7
    3130:	4868      	ldr	r0, [pc, #416]	; (32d4 <CAN0_Handler+0x238>)
    3132:	4b6a      	ldr	r3, [pc, #424]	; (32dc <CAN0_Handler+0x240>)
    3134:	4798      	blx	r3
				rx_buffer_index);
				if (rx_element_buffer.R0.bit.XTD) {
    3136:	683b      	ldr	r3, [r7, #0]
    3138:	005b      	lsls	r3, r3, #1
    313a:	d503      	bpl.n	3144 <CAN0_Handler+0xa8>
					printf("\n\r Extended FD message received in Rx buffer. The received data is: \r\n");
    313c:	4868      	ldr	r0, [pc, #416]	; (32e0 <CAN0_Handler+0x244>)
    313e:	4b69      	ldr	r3, [pc, #420]	; (32e4 <CAN0_Handler+0x248>)
    3140:	4798      	blx	r3
    3142:	e002      	b.n	314a <CAN0_Handler+0xae>
					} else {
					printf("\n\r Standard FD message received in Rx buffer. The received data is: \r\n");
    3144:	4868      	ldr	r0, [pc, #416]	; (32e8 <CAN0_Handler+0x24c>)
    3146:	4b67      	ldr	r3, [pc, #412]	; (32e4 <CAN0_Handler+0x248>)
    3148:	4798      	blx	r3
				}
				for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    314a:	2300      	movs	r3, #0
    314c:	9302      	str	r3, [sp, #8]
    314e:	9b02      	ldr	r3, [sp, #8]
    3150:	2b13      	cmp	r3, #19
    3152:	d80d      	bhi.n	3170 <CAN0_Handler+0xd4>
					printf("  %d",rx_element_buffer.data[i]);
    3154:	4e60      	ldr	r6, [pc, #384]	; (32d8 <CAN0_Handler+0x23c>)
    3156:	4d65      	ldr	r5, [pc, #404]	; (32ec <CAN0_Handler+0x250>)
    3158:	4c65      	ldr	r4, [pc, #404]	; (32f0 <CAN0_Handler+0x254>)
    315a:	9b02      	ldr	r3, [sp, #8]
    315c:	18f3      	adds	r3, r6, r3
    315e:	7a19      	ldrb	r1, [r3, #8]
    3160:	0028      	movs	r0, r5
    3162:	47a0      	blx	r4
				if (rx_element_buffer.R0.bit.XTD) {
					printf("\n\r Extended FD message received in Rx buffer. The received data is: \r\n");
					} else {
					printf("\n\r Standard FD message received in Rx buffer. The received data is: \r\n");
				}
				for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3164:	9b02      	ldr	r3, [sp, #8]
    3166:	3301      	adds	r3, #1
    3168:	9302      	str	r3, [sp, #8]
    316a:	9b02      	ldr	r3, [sp, #8]
    316c:	2b13      	cmp	r3, #19
    316e:	d9f4      	bls.n	315a <CAN0_Handler+0xbe>
					printf("  %d",rx_element_buffer.data[i]);
				}
				printf("\r\n\r\n");
    3170:	4860      	ldr	r0, [pc, #384]	; (32f4 <CAN0_Handler+0x258>)
    3172:	4b5c      	ldr	r3, [pc, #368]	; (32e4 <CAN0_Handler+0x248>)
    3174:	4798      	blx	r3
	volatile uint32_t status, i, rx_buffer_index;
	status = can_read_interrupt_status(&can_instance);

	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
		can_clear_interrupt_status(&can_instance, CAN_RX_BUFFER_NEW_MESSAGE);
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    3176:	9b02      	ldr	r3, [sp, #8]
    3178:	3301      	adds	r3, #1
    317a:	9302      	str	r3, [sp, #8]
    317c:	9b02      	ldr	r3, [sp, #8]
    317e:	2b03      	cmp	r3, #3
    3180:	d9a4      	bls.n	30cc <CAN0_Handler+0x30>
				printf("\r\n\r\n");
			}
		}
	}

	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    3182:	9b03      	ldr	r3, [sp, #12]
    3184:	07db      	lsls	r3, r3, #31
    3186:	d553      	bpl.n	3230 <CAN0_Handler+0x194>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    3188:	4d52      	ldr	r5, [pc, #328]	; (32d4 <CAN0_Handler+0x238>)
    318a:	682b      	ldr	r3, [r5, #0]
    318c:	2201      	movs	r2, #1
    318e:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_0_NEW_MESSAGE);
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    3190:	4c59      	ldr	r4, [pc, #356]	; (32f8 <CAN0_Handler+0x25c>)
    3192:	6822      	ldr	r2, [r4, #0]
    3194:	4959      	ldr	r1, [pc, #356]	; (32fc <CAN0_Handler+0x260>)
    3196:	0028      	movs	r0, r5
    3198:	4b59      	ldr	r3, [pc, #356]	; (3300 <CAN0_Handler+0x264>)
    319a:	4798      	blx	r3
		standard_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
    319c:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    319e:	6829      	ldr	r1, [r5, #0]
    31a0:	223f      	movs	r2, #63	; 0x3f
    31a2:	4013      	ands	r3, r2
    31a4:	3269      	adds	r2, #105	; 0x69
    31a6:	508b      	str	r3, [r1, r2]
		standard_receive_index);
		standard_receive_index++;
    31a8:	6823      	ldr	r3, [r4, #0]
    31aa:	3301      	adds	r3, #1
    31ac:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    31ae:	6823      	ldr	r3, [r4, #0]
    31b0:	2b04      	cmp	r3, #4
    31b2:	d102      	bne.n	31ba <CAN0_Handler+0x11e>
			standard_receive_index = 0;
    31b4:	2200      	movs	r2, #0
    31b6:	4b50      	ldr	r3, [pc, #320]	; (32f8 <CAN0_Handler+0x25c>)
    31b8:	601a      	str	r2, [r3, #0]
		}
		if (rx_element_fifo_0.R1.bit.FDF) {
    31ba:	4b50      	ldr	r3, [pc, #320]	; (32fc <CAN0_Handler+0x260>)
    31bc:	685b      	ldr	r3, [r3, #4]
    31be:	029b      	lsls	r3, r3, #10
    31c0:	d516      	bpl.n	31f0 <CAN0_Handler+0x154>
			printf("\n\r Standard FD message received in FIFO 0. The received data is: \r\n");
    31c2:	4850      	ldr	r0, [pc, #320]	; (3304 <CAN0_Handler+0x268>)
    31c4:	4b47      	ldr	r3, [pc, #284]	; (32e4 <CAN0_Handler+0x248>)
    31c6:	4798      	blx	r3
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    31c8:	2300      	movs	r3, #0
    31ca:	9302      	str	r3, [sp, #8]
    31cc:	9b02      	ldr	r3, [sp, #8]
    31ce:	2b13      	cmp	r3, #19
    31d0:	d82b      	bhi.n	322a <CAN0_Handler+0x18e>
				printf("  %d",rx_element_fifo_0.data[i]);
    31d2:	4e4a      	ldr	r6, [pc, #296]	; (32fc <CAN0_Handler+0x260>)
    31d4:	4c45      	ldr	r4, [pc, #276]	; (32ec <CAN0_Handler+0x250>)
    31d6:	4d46      	ldr	r5, [pc, #280]	; (32f0 <CAN0_Handler+0x254>)
    31d8:	9b02      	ldr	r3, [sp, #8]
    31da:	18f3      	adds	r3, r6, r3
    31dc:	7a19      	ldrb	r1, [r3, #8]
    31de:	0020      	movs	r0, r4
    31e0:	47a8      	blx	r5
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
			standard_receive_index = 0;
		}
		if (rx_element_fifo_0.R1.bit.FDF) {
			printf("\n\r Standard FD message received in FIFO 0. The received data is: \r\n");
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    31e2:	9b02      	ldr	r3, [sp, #8]
    31e4:	3301      	adds	r3, #1
    31e6:	9302      	str	r3, [sp, #8]
    31e8:	9b02      	ldr	r3, [sp, #8]
    31ea:	2b13      	cmp	r3, #19
    31ec:	d9f4      	bls.n	31d8 <CAN0_Handler+0x13c>
    31ee:	e01c      	b.n	322a <CAN0_Handler+0x18e>
				printf("  %d",rx_element_fifo_0.data[i]);
			}
			} else {
			printf("\n\r Standard normal message received in FIFO 0. The received data is: \r\n");
    31f0:	4845      	ldr	r0, [pc, #276]	; (3308 <CAN0_Handler+0x26c>)
    31f2:	4b3c      	ldr	r3, [pc, #240]	; (32e4 <CAN0_Handler+0x248>)
    31f4:	4798      	blx	r3
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    31f6:	2300      	movs	r3, #0
    31f8:	9302      	str	r3, [sp, #8]
    31fa:	4b40      	ldr	r3, [pc, #256]	; (32fc <CAN0_Handler+0x260>)
    31fc:	685b      	ldr	r3, [r3, #4]
    31fe:	031b      	lsls	r3, r3, #12
    3200:	0f1b      	lsrs	r3, r3, #28
    3202:	9a02      	ldr	r2, [sp, #8]
    3204:	4293      	cmp	r3, r2
    3206:	d910      	bls.n	322a <CAN0_Handler+0x18e>
				printf("  %d",rx_element_fifo_0.data[i]);
    3208:	4d3c      	ldr	r5, [pc, #240]	; (32fc <CAN0_Handler+0x260>)
    320a:	4c38      	ldr	r4, [pc, #224]	; (32ec <CAN0_Handler+0x250>)
    320c:	4e38      	ldr	r6, [pc, #224]	; (32f0 <CAN0_Handler+0x254>)
    320e:	9b02      	ldr	r3, [sp, #8]
    3210:	18eb      	adds	r3, r5, r3
    3212:	7a19      	ldrb	r1, [r3, #8]
    3214:	0020      	movs	r0, r4
    3216:	47b0      	blx	r6
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
				printf("  %d",rx_element_fifo_0.data[i]);
			}
			} else {
			printf("\n\r Standard normal message received in FIFO 0. The received data is: \r\n");
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    3218:	9b02      	ldr	r3, [sp, #8]
    321a:	3301      	adds	r3, #1
    321c:	9302      	str	r3, [sp, #8]
    321e:	686b      	ldr	r3, [r5, #4]
    3220:	031b      	lsls	r3, r3, #12
    3222:	0f1b      	lsrs	r3, r3, #28
    3224:	9a02      	ldr	r2, [sp, #8]
    3226:	4293      	cmp	r3, r2
    3228:	d8f1      	bhi.n	320e <CAN0_Handler+0x172>
				printf("  %d",rx_element_fifo_0.data[i]);
			}
		}
		printf("\r\n\r\n");
    322a:	4832      	ldr	r0, [pc, #200]	; (32f4 <CAN0_Handler+0x258>)
    322c:	4b2d      	ldr	r3, [pc, #180]	; (32e4 <CAN0_Handler+0x248>)
    322e:	4798      	blx	r3
	}

	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
    3230:	9b03      	ldr	r3, [sp, #12]
    3232:	06db      	lsls	r3, r3, #27
    3234:	d53a      	bpl.n	32ac <CAN0_Handler+0x210>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    3236:	4d27      	ldr	r5, [pc, #156]	; (32d4 <CAN0_Handler+0x238>)
    3238:	682b      	ldr	r3, [r5, #0]
    323a:	2210      	movs	r2, #16
    323c:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_RX_FIFO_1_NEW_MESSAGE);
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
    323e:	4c33      	ldr	r4, [pc, #204]	; (330c <CAN0_Handler+0x270>)
    3240:	6822      	ldr	r2, [r4, #0]
    3242:	4933      	ldr	r1, [pc, #204]	; (3310 <CAN0_Handler+0x274>)
    3244:	0028      	movs	r0, r5
    3246:	4b33      	ldr	r3, [pc, #204]	; (3314 <CAN0_Handler+0x278>)
    3248:	4798      	blx	r3
		extended_receive_index);
		can_rx_fifo_acknowledge(&can_instance, 0,
    324a:	6823      	ldr	r3, [r4, #0]
 */
static inline void can_rx_fifo_acknowledge(
		struct can_module *const module_inst, bool fifo_number, uint32_t index)
{
	if (!fifo_number) {
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    324c:	6829      	ldr	r1, [r5, #0]
    324e:	223f      	movs	r2, #63	; 0x3f
    3250:	4013      	ands	r3, r2
    3252:	3269      	adds	r2, #105	; 0x69
    3254:	508b      	str	r3, [r1, r2]
		extended_receive_index);
		extended_receive_index++;
    3256:	6823      	ldr	r3, [r4, #0]
    3258:	3301      	adds	r3, #1
    325a:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
    325c:	6823      	ldr	r3, [r4, #0]
    325e:	2b04      	cmp	r3, #4
    3260:	d102      	bne.n	3268 <CAN0_Handler+0x1cc>
			extended_receive_index = 0;
    3262:	2200      	movs	r2, #0
    3264:	4b29      	ldr	r3, [pc, #164]	; (330c <CAN0_Handler+0x270>)
    3266:	601a      	str	r2, [r3, #0]
		}

		printf("\n\r Extended FD message received in FIFO 1. The received data is: \r\n");
    3268:	482b      	ldr	r0, [pc, #172]	; (3318 <CAN0_Handler+0x27c>)
    326a:	4b1e      	ldr	r3, [pc, #120]	; (32e4 <CAN0_Handler+0x248>)
    326c:	4798      	blx	r3
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    326e:	2300      	movs	r3, #0
    3270:	9302      	str	r3, [sp, #8]
    3272:	9b02      	ldr	r3, [sp, #8]
    3274:	2b13      	cmp	r3, #19
    3276:	d813      	bhi.n	32a0 <CAN0_Handler+0x204>
			commandMsg[i] = rx_element_fifo_1.data[i];
    3278:	4e28      	ldr	r6, [pc, #160]	; (331c <CAN0_Handler+0x280>)
    327a:	4d25      	ldr	r5, [pc, #148]	; (3310 <CAN0_Handler+0x274>)
			printf("  %d",rx_element_fifo_1.data[i]);
    327c:	4c1b      	ldr	r4, [pc, #108]	; (32ec <CAN0_Handler+0x250>)
			extended_receive_index = 0;
		}

		printf("\n\r Extended FD message received in FIFO 1. The received data is: \r\n");
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			commandMsg[i] = rx_element_fifo_1.data[i];
    327e:	9a02      	ldr	r2, [sp, #8]
    3280:	9b02      	ldr	r3, [sp, #8]
    3282:	18eb      	adds	r3, r5, r3
    3284:	7a1b      	ldrb	r3, [r3, #8]
    3286:	54b3      	strb	r3, [r6, r2]
			printf("  %d",rx_element_fifo_1.data[i]);
    3288:	9b02      	ldr	r3, [sp, #8]
    328a:	18eb      	adds	r3, r5, r3
    328c:	7a19      	ldrb	r1, [r3, #8]
    328e:	0020      	movs	r0, r4
    3290:	4b17      	ldr	r3, [pc, #92]	; (32f0 <CAN0_Handler+0x254>)
    3292:	4798      	blx	r3
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
			extended_receive_index = 0;
		}

		printf("\n\r Extended FD message received in FIFO 1. The received data is: \r\n");
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3294:	9b02      	ldr	r3, [sp, #8]
    3296:	3301      	adds	r3, #1
    3298:	9302      	str	r3, [sp, #8]
    329a:	9b02      	ldr	r3, [sp, #8]
    329c:	2b13      	cmp	r3, #19
    329e:	d9ee      	bls.n	327e <CAN0_Handler+0x1e2>
			commandMsg[i] = rx_element_fifo_1.data[i];
			printf("  %d",rx_element_fifo_1.data[i]);
		}
		canMsgInFlag = 1;
    32a0:	2201      	movs	r2, #1
    32a2:	4b1f      	ldr	r3, [pc, #124]	; (3320 <CAN0_Handler+0x284>)
    32a4:	701a      	strb	r2, [r3, #0]
		printf("\r\n\r\n");
    32a6:	4813      	ldr	r0, [pc, #76]	; (32f4 <CAN0_Handler+0x258>)
    32a8:	4b0e      	ldr	r3, [pc, #56]	; (32e4 <CAN0_Handler+0x248>)
    32aa:	4798      	blx	r3
	}

	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    32ac:	9b03      	ldr	r3, [sp, #12]
    32ae:	011b      	lsls	r3, r3, #4
    32b0:	d402      	bmi.n	32b8 <CAN0_Handler+0x21c>
	|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    32b2:	9b03      	ldr	r3, [sp, #12]
    32b4:	00db      	lsls	r3, r3, #3
    32b6:	d507      	bpl.n	32c8 <CAN0_Handler+0x22c>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    32b8:	4b06      	ldr	r3, [pc, #24]	; (32d4 <CAN0_Handler+0x238>)
    32ba:	681b      	ldr	r3, [r3, #0]
    32bc:	22c0      	movs	r2, #192	; 0xc0
    32be:	0552      	lsls	r2, r2, #21
    32c0:	651a      	str	r2, [r3, #80]	; 0x50
		can_clear_interrupt_status(&can_instance, CAN_PROTOCOL_ERROR_ARBITRATION
		| CAN_PROTOCOL_ERROR_DATA);
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    32c2:	4818      	ldr	r0, [pc, #96]	; (3324 <CAN0_Handler+0x288>)
    32c4:	4b07      	ldr	r3, [pc, #28]	; (32e4 <CAN0_Handler+0x248>)
    32c6:	4798      	blx	r3
	}
}
    32c8:	b005      	add	sp, #20
    32ca:	bc0c      	pop	{r2, r3}
    32cc:	4690      	mov	r8, r2
    32ce:	4699      	mov	r9, r3
    32d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	20000598 	.word	0x20000598
    32d8:	200005c8 	.word	0x200005c8
    32dc:	00001379 	.word	0x00001379
    32e0:	00005028 	.word	0x00005028
    32e4:	00003db5 	.word	0x00003db5
    32e8:	00005070 	.word	0x00005070
    32ec:	000050b8 	.word	0x000050b8
    32f0:	00003cbd 	.word	0x00003cbd
    32f4:	000050c0 	.word	0x000050c0
    32f8:	20000550 	.word	0x20000550
    32fc:	20000558 	.word	0x20000558
    3300:	000013cd 	.word	0x000013cd
    3304:	000050c4 	.word	0x000050c4
    3308:	00005108 	.word	0x00005108
    330c:	200004fc 	.word	0x200004fc
    3310:	20000574 	.word	0x20000574
    3314:	00001421 	.word	0x00001421
    3318:	00005150 	.word	0x00005150
    331c:	200005f4 	.word	0x200005f4
    3320:	200004e8 	.word	0x200004e8
    3324:	00005194 	.word	0x00005194

00003328 <configure_rtc_calendar>:
//! ******************************************* [SYSTEM EVENT END] *******************************************

//! ******************************************* [RTC CONFIG ] *******************************************

void configure_rtc_calendar(void)
{
    3328:	b510      	push	{r4, lr}
    332a:	b088      	sub	sp, #32
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    332c:	aa03      	add	r2, sp, #12
    332e:	23b0      	movs	r3, #176	; 0xb0
    3330:	011b      	lsls	r3, r3, #4
    3332:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3334:	2300      	movs	r3, #0
    3336:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3338:	21fa      	movs	r1, #250	; 0xfa
    333a:	00c9      	lsls	r1, r1, #3
    333c:	8091      	strh	r1, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    333e:	2401      	movs	r4, #1
    3340:	7194      	strb	r4, [r2, #6]
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    3342:	72d3      	strb	r3, [r2, #11]
	alarm.time.month = 1;
	alarm.time.day = 1;
	alarm.time.hour = 0;
	alarm.time.minute = 0;
	alarm.time.second = 0;
	config_rtc_calendar.clock_24h = true;
    3344:	70d4      	strb	r4, [r2, #3]
	config_rtc_calendar.alarm[0].time = alarm.time;
    3346:	7213      	strb	r3, [r2, #8]
    3348:	7253      	strb	r3, [r2, #9]
    334a:	7293      	strb	r3, [r2, #10]
    334c:	7314      	strb	r4, [r2, #12]
    334e:	7354      	strb	r4, [r2, #13]
    3350:	23fc      	movs	r3, #252	; 0xfc
    3352:	00db      	lsls	r3, r3, #3
    3354:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    3356:	7414      	strb	r4, [r2, #16]
	
	//! [init_rtc]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3358:	4914      	ldr	r1, [pc, #80]	; (33ac <configure_rtc_calendar+0x84>)
    335a:	4815      	ldr	r0, [pc, #84]	; (33b0 <configure_rtc_calendar+0x88>)
    335c:	4b15      	ldr	r3, [pc, #84]	; (33b4 <configure_rtc_calendar+0x8c>)
    335e:	4798      	blx	r3
	
	
	//[setup and initial RTC AND enable system event generate]
	struct rtc_calendar_events calendar_event;
	calendar_event.generate_event_on_periodic[6] = true;
    3360:	466b      	mov	r3, sp
    3362:	721c      	strb	r4, [r3, #8]
	Rtc *const rtc_module = module->hw;

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    3364:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    3366:	1e53      	subs	r3, r2, #1
    3368:	419a      	sbcs	r2, r3
    336a:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
    336c:	466b      	mov	r3, sp
    336e:	785b      	ldrb	r3, [r3, #1]
    3370:	2b00      	cmp	r3, #0
    3372:	d002      	beq.n	337a <configure_rtc_calendar+0x52>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
    3374:	2380      	movs	r3, #128	; 0x80
    3376:	005b      	lsls	r3, r3, #1
    3378:	431a      	orrs	r2, r3
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	uint32_t event_mask = 0;
    337a:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    337c:	2401      	movs	r4, #1
    337e:	20ff      	movs	r0, #255	; 0xff
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
    3380:	0019      	movs	r1, r3
    3382:	4469      	add	r1, sp
    3384:	7889      	ldrb	r1, [r1, #2]
    3386:	2900      	cmp	r1, #0
    3388:	d003      	beq.n	3392 <configure_rtc_calendar+0x6a>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    338a:	0021      	movs	r1, r4
    338c:	4099      	lsls	r1, r3
    338e:	4001      	ands	r1, r0
    3390:	430a      	orrs	r2, r1
    3392:	3301      	adds	r3, #1
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
		}
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
    3394:	2b08      	cmp	r3, #8
    3396:	d1f3      	bne.n	3380 <configure_rtc_calendar+0x58>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3398:	4805      	ldr	r0, [pc, #20]	; (33b0 <configure_rtc_calendar+0x88>)
    339a:	6803      	ldr	r3, [r0, #0]
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
    339c:	6859      	ldr	r1, [r3, #4]
    339e:	430a      	orrs	r2, r1
    33a0:	605a      	str	r2, [r3, #4]
	rtc_calendar_enable_events(&rtc_instance, &calendar_event);
	
	//! [enable]
	rtc_calendar_enable(&rtc_instance);
    33a2:	4b05      	ldr	r3, [pc, #20]	; (33b8 <configure_rtc_calendar+0x90>)
    33a4:	4798      	blx	r3
}
    33a6:	b008      	add	sp, #32
    33a8:	bd10      	pop	{r4, pc}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	40002400 	.word	0x40002400
    33b0:	20000658 	.word	0x20000658
    33b4:	000008e5 	.word	0x000008e5
    33b8:	00000765 	.word	0x00000765

000033bc <configure_rtc_callbacks>:
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
	
}

void configure_rtc_callbacks(void)
{
    33bc:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    33be:	4c05      	ldr	r4, [pc, #20]	; (33d4 <configure_rtc_callbacks+0x18>)
    33c0:	2208      	movs	r2, #8
    33c2:	4905      	ldr	r1, [pc, #20]	; (33d8 <configure_rtc_callbacks+0x1c>)
    33c4:	0020      	movs	r0, r4
    33c6:	4b05      	ldr	r3, [pc, #20]	; (33dc <configure_rtc_callbacks+0x20>)
    33c8:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    33ca:	2108      	movs	r1, #8
    33cc:	0020      	movs	r0, r4
    33ce:	4b04      	ldr	r3, [pc, #16]	; (33e0 <configure_rtc_callbacks+0x24>)
    33d0:	4798      	blx	r3
}
    33d2:	bd10      	pop	{r4, pc}
    33d4:	20000658 	.word	0x20000658
    33d8:	00002fe1 	.word	0x00002fe1
    33dc:	00000961 	.word	0x00000961
    33e0:	00000981 	.word	0x00000981

000033e4 <configure_tsens>:
/************************************************************************/
/* config temperature sensor                                            */
/************************************************************************/

void configure_tsens(void)
{
    33e4:	b500      	push	{lr}
    33e6:	b089      	sub	sp, #36	; 0x24
	struct tsens_config config_tsens;
	tsens_get_config_defaults(&config_tsens);
    33e8:	a801      	add	r0, sp, #4
    33ea:	4b07      	ldr	r3, [pc, #28]	; (3408 <configure_tsens+0x24>)
    33ec:	4798      	blx	r3
	tsens_init(&config_tsens);
    33ee:	a801      	add	r0, sp, #4
    33f0:	4b06      	ldr	r3, [pc, #24]	; (340c <configure_tsens+0x28>)
    33f2:	4798      	blx	r3
 * Enables an TSENS module that has previously been configured.

 */
static inline void tsens_enable(void)
{
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;
    33f4:	4a06      	ldr	r2, [pc, #24]	; (3410 <configure_tsens+0x2c>)
    33f6:	7811      	ldrb	r1, [r2, #0]
    33f8:	2302      	movs	r3, #2
    33fa:	430b      	orrs	r3, r1
    33fc:	7013      	strb	r3, [r2, #0]
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool tsens_is_syncing(void)
{
	if (TSENS->SYNCBUSY.reg) {
    33fe:	6893      	ldr	r3, [r2, #8]
 */
static inline void tsens_enable(void)
{
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;

	while (tsens_is_syncing()) {
    3400:	2b00      	cmp	r3, #0
    3402:	d1fc      	bne.n	33fe <configure_tsens+0x1a>
	tsens_enable();
}
    3404:	b009      	add	sp, #36	; 0x24
    3406:	bd00      	pop	{pc}
    3408:	00000b21 	.word	0x00000b21
    340c:	00000a69 	.word	0x00000a69
    3410:	40003000 	.word	0x40003000

00003414 <main>:


//! [setup]

int main(void)
{
    3414:	b5f0      	push	{r4, r5, r6, r7, lr}
    3416:	b099      	sub	sp, #100	; 0x64
	
	uint8_t key;

//! [setup_init]
	system_init();
    3418:	4b86      	ldr	r3, [pc, #536]	; (3634 <main+0x220>)
    341a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    341c:	2401      	movs	r4, #1
    341e:	4b86      	ldr	r3, [pc, #536]	; (3638 <main+0x224>)
    3420:	701c      	strb	r4, [r3, #0]
    3422:	f3bf 8f5f 	dmb	sy
    3426:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3428:	aa01      	add	r2, sp, #4
    342a:	2380      	movs	r3, #128	; 0x80
    342c:	05db      	lsls	r3, r3, #23
    342e:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3430:	2300      	movs	r3, #0
    3432:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    3434:	21ff      	movs	r1, #255	; 0xff
    3436:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3438:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    343a:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    343c:	2196      	movs	r1, #150	; 0x96
    343e:	0189      	lsls	r1, r1, #6
    3440:	6291      	str	r1, [r2, #40]	; 0x28
	config->receiver_enable  = true;
    3442:	212c      	movs	r1, #44	; 0x2c
    3444:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    3446:	3101      	adds	r1, #1
    3448:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    344a:	3101      	adds	r1, #1
    344c:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    344e:	3101      	adds	r1, #1
    3450:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    3452:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3454:	3105      	adds	r1, #5
    3456:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3458:	3101      	adds	r1, #1
    345a:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    345c:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    345e:	2100      	movs	r1, #0
    3460:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3462:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    3464:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    3466:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    3468:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    346a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    346c:	3324      	adds	r3, #36	; 0x24
    346e:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3470:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    3472:	3b11      	subs	r3, #17
    3474:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3476:	3313      	adds	r3, #19
    3478:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    347a:	3b01      	subs	r3, #1
    347c:	54d1      	strb	r1, [r2, r3]
{

	struct usart_config config_cdc;
	usart_get_config_defaults(&config_cdc);
	config_cdc.baudrate	 = 9600;
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    347e:	23c4      	movs	r3, #196	; 0xc4
    3480:	039b      	lsls	r3, r3, #14
    3482:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3484:	2301      	movs	r3, #1
    3486:	425b      	negs	r3, r3
    3488:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    348a:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    348c:	4b6b      	ldr	r3, [pc, #428]	; (363c <main+0x228>)
    348e:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3490:	4b6b      	ldr	r3, [pc, #428]	; (3640 <main+0x22c>)
    3492:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3494:	4d6b      	ldr	r5, [pc, #428]	; (3644 <main+0x230>)
    3496:	4b6c      	ldr	r3, [pc, #432]	; (3648 <main+0x234>)
    3498:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    349a:	496c      	ldr	r1, [pc, #432]	; (364c <main+0x238>)
    349c:	4b6c      	ldr	r3, [pc, #432]	; (3650 <main+0x23c>)
    349e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    34a0:	496c      	ldr	r1, [pc, #432]	; (3654 <main+0x240>)
    34a2:	4b6d      	ldr	r3, [pc, #436]	; (3658 <main+0x244>)
    34a4:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    34a6:	496d      	ldr	r1, [pc, #436]	; (365c <main+0x248>)
    34a8:	0028      	movs	r0, r5
    34aa:	4b6d      	ldr	r3, [pc, #436]	; (3660 <main+0x24c>)
    34ac:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    34ae:	4f6d      	ldr	r7, [pc, #436]	; (3664 <main+0x250>)
    34b0:	683b      	ldr	r3, [r7, #0]
    34b2:	6898      	ldr	r0, [r3, #8]
    34b4:	2100      	movs	r1, #0
    34b6:	4e6c      	ldr	r6, [pc, #432]	; (3668 <main+0x254>)
    34b8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    34ba:	683b      	ldr	r3, [r7, #0]
    34bc:	6858      	ldr	r0, [r3, #4]
    34be:	2100      	movs	r1, #0
    34c0:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    34c2:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34c4:	0030      	movs	r0, r6
    34c6:	4b69      	ldr	r3, [pc, #420]	; (366c <main+0x258>)
    34c8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34ca:	231f      	movs	r3, #31
    34cc:	4018      	ands	r0, r3
    34ce:	4084      	lsls	r4, r0
    34d0:	4b67      	ldr	r3, [pc, #412]	; (3670 <main+0x25c>)
    34d2:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    34d4:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    34d6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    34d8:	2a00      	cmp	r2, #0
    34da:	d1fc      	bne.n	34d6 <main+0xc2>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    34dc:	6832      	ldr	r2, [r6, #0]
    34de:	2302      	movs	r3, #2
    34e0:	4313      	orrs	r3, r2
    34e2:	6033      	str	r3, [r6, #0]

	struct events_resource example_event;
	struct events_hook hook;

//!	setup GPIO
	configure_port_pins();
    34e4:	4b63      	ldr	r3, [pc, #396]	; (3674 <main+0x260>)
    34e6:	4798      	blx	r3
static volatile uint32_t event_count = 0;
void event_counter(struct events_resource *resource);
static void configure_event_channel(struct events_resource *resource)
{
	struct events_config config;
	events_get_config_defaults(&config);
    34e8:	ac01      	add	r4, sp, #4
    34ea:	0020      	movs	r0, r4
    34ec:	4b62      	ldr	r3, [pc, #392]	; (3678 <main+0x264>)
    34ee:	4798      	blx	r3
	config.generator = CONF_EVENT_GENERATOR;
    34f0:	230c      	movs	r3, #12
    34f2:	70a3      	strb	r3, [r4, #2]
	config.edge_detect = EVENTS_EDGE_DETECT_RISING;
    34f4:	3b0b      	subs	r3, #11
    34f6:	7023      	strb	r3, [r4, #0]
	config.path = EVENTS_PATH_SYNCHRONOUS;
    34f8:	2300      	movs	r3, #0
    34fa:	7063      	strb	r3, [r4, #1]
	config.clock_source = GCLK_GENERATOR_0;
    34fc:	70e3      	strb	r3, [r4, #3]
	events_allocate(resource, &config);
    34fe:	0021      	movs	r1, r4
    3500:	a816      	add	r0, sp, #88	; 0x58
    3502:	4b5e      	ldr	r3, [pc, #376]	; (367c <main+0x268>)
    3504:	4798      	blx	r3
}

static void configure_event_user(struct events_resource *resource)
{
	events_attach_user(resource, CONF_EVENT_USER);
    3506:	2105      	movs	r1, #5
    3508:	a816      	add	r0, sp, #88	; 0x58
    350a:	4b5d      	ldr	r3, [pc, #372]	; (3680 <main+0x26c>)
    350c:	4798      	blx	r3
}

static void configure_event_interrupt(struct events_resource *resource,
struct events_hook *hook)
{
	events_create_hook(hook, ADC_event);
    350e:	495d      	ldr	r1, [pc, #372]	; (3684 <main+0x270>)
    3510:	a813      	add	r0, sp, #76	; 0x4c
    3512:	4b5d      	ldr	r3, [pc, #372]	; (3688 <main+0x274>)
    3514:	4798      	blx	r3
	events_add_hook(resource, hook);
    3516:	a913      	add	r1, sp, #76	; 0x4c
    3518:	a816      	add	r0, sp, #88	; 0x58
    351a:	4b5c      	ldr	r3, [pc, #368]	; (368c <main+0x278>)
    351c:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
    351e:	2101      	movs	r1, #1
    3520:	a816      	add	r0, sp, #88	; 0x58
    3522:	4b5b      	ldr	r3, [pc, #364]	; (3690 <main+0x27c>)
    3524:	4798      	blx	r3
	configure_event_channel(&example_event);
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	
	//setup RTC
	configure_rtc_calendar();
    3526:	4b5b      	ldr	r3, [pc, #364]	; (3694 <main+0x280>)
    3528:	4798      	blx	r3
	configure_rtc_callbacks();
    352a:	4b5b      	ldr	r3, [pc, #364]	; (3698 <main+0x284>)
    352c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    352e:	485b      	ldr	r0, [pc, #364]	; (369c <main+0x288>)
    3530:	4b5b      	ldr	r3, [pc, #364]	; (36a0 <main+0x28c>)
    3532:	4798      	blx	r3

//!config temperature sensor
	configure_tsens();
    3534:	4b5b      	ldr	r3, [pc, #364]	; (36a4 <main+0x290>)
    3536:	4798      	blx	r3
	
//! [configure_adc]
	configure_adc();
    3538:	4b5b      	ldr	r3, [pc, #364]	; (36a8 <main+0x294>)
    353a:	4798      	blx	r3
    353c:	2314      	movs	r3, #20
    353e:	3b01      	subs	r3, #1
//! [can_init_setup]
static void configure_can(void)
{
	uint32_t i;
	/* Initialize the memory. */
	for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3540:	2b00      	cmp	r3, #0
    3542:	d1fc      	bne.n	353e <main+0x12a>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3544:	2400      	movs	r4, #0
    3546:	466b      	mov	r3, sp
    3548:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    354a:	2501      	movs	r5, #1
    354c:	709d      	strb	r5, [r3, #2]
	config->powersave    = false;
    354e:	70dc      	strb	r4, [r3, #3]
	}

	/* Set up the CAN TX/RX pins */
	struct system_pinmux_config pin_config;
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    3550:	2706      	movs	r7, #6
    3552:	701f      	strb	r7, [r3, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    3554:	4669      	mov	r1, sp
    3556:	2018      	movs	r0, #24
    3558:	4e54      	ldr	r6, [pc, #336]	; (36ac <main+0x298>)
    355a:	47b0      	blx	r6
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    355c:	466b      	mov	r3, sp
    355e:	701f      	strb	r7, [r3, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    3560:	4669      	mov	r1, sp
    3562:	2019      	movs	r0, #25
    3564:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->clock_source = GCLK_GENERATOR_8;
    3566:	aa01      	add	r2, sp, #4
    3568:	2308      	movs	r3, #8
    356a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby = false;
    356c:	7054      	strb	r4, [r2, #1]
	config->watchdog_configuration = 0x00;
    356e:	7094      	strb	r4, [r2, #2]
	config->transmit_pause = true;
    3570:	70d5      	strb	r5, [r2, #3]
	config->edge_filtering = true;
    3572:	7115      	strb	r5, [r2, #4]
	config->protocol_exception_handling = true;
    3574:	7155      	strb	r5, [r2, #5]
	config->automatic_retransmission = true;
    3576:	7195      	strb	r5, [r2, #6]
	config->clock_stop_request = false;
    3578:	71d4      	strb	r4, [r2, #7]
	config->clock_stop_acknowledge = false;
    357a:	7214      	strb	r4, [r2, #8]
	config->timestamp_prescaler = 0;
    357c:	7254      	strb	r4, [r2, #9]
	config->timeout_period = 0xFFFF;
    357e:	3b09      	subs	r3, #9
    3580:	8153      	strh	r3, [r2, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    3582:	7314      	strb	r4, [r2, #12]
	config->timeout_enable = false;
    3584:	7354      	strb	r4, [r2, #13]
	config->tdc_enable = false;
    3586:	7394      	strb	r4, [r2, #14]
	config->delay_compensation_offset = 0;
    3588:	73d4      	strb	r4, [r2, #15]
	config->delay_compensation_filter_window_length = 0;
    358a:	7414      	strb	r4, [r2, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    358c:	3303      	adds	r3, #3
    358e:	7453      	strb	r3, [r2, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    3590:	7493      	strb	r3, [r2, #18]
	config->remote_frames_standard_reject = true;
    3592:	74d5      	strb	r5, [r2, #19]
	config->remote_frames_extended_reject = true;
    3594:	7515      	strb	r5, [r2, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    3596:	4b46      	ldr	r3, [pc, #280]	; (36b0 <main+0x29c>)
    3598:	6193      	str	r3, [r2, #24]
	config->rx_fifo_0_overwrite = true;
    359a:	7715      	strb	r5, [r2, #28]
	config->rx_fifo_0_watermark = 0;
    359c:	7754      	strb	r4, [r2, #29]
	config->rx_fifo_1_overwrite = true;
    359e:	7795      	strb	r5, [r2, #30]
	config->rx_fifo_1_watermark = 0;
    35a0:	77d4      	strb	r4, [r2, #31]
	config->tx_queue_mode = false;
    35a2:	2320      	movs	r3, #32
    35a4:	54d4      	strb	r4, [r2, r3]
	config->tx_event_fifo_watermark = 0;
    35a6:	3301      	adds	r3, #1
    35a8:	54d4      	strb	r4, [r2, r3]

	/* Initialize the module. */
	struct can_config config_can;
	can_get_config_defaults(&config_can);
	can_init(&can_instance, CAN_MODULE, &config_can);
    35aa:	4c42      	ldr	r4, [pc, #264]	; (36b4 <main+0x2a0>)
    35ac:	4942      	ldr	r1, [pc, #264]	; (36b8 <main+0x2a4>)
    35ae:	0020      	movs	r0, r4
    35b0:	4b42      	ldr	r3, [pc, #264]	; (36bc <main+0x2a8>)
    35b2:	4798      	blx	r3

	can_enable_fd_mode(&can_instance);
    35b4:	0020      	movs	r0, r4
    35b6:	4b42      	ldr	r3, [pc, #264]	; (36c0 <main+0x2ac>)
    35b8:	4798      	blx	r3
	can_start(&can_instance);
    35ba:	0020      	movs	r0, r4
    35bc:	4b41      	ldr	r3, [pc, #260]	; (36c4 <main+0x2b0>)
    35be:	4798      	blx	r3
    35c0:	2280      	movs	r2, #128	; 0x80
    35c2:	0212      	lsls	r2, r2, #8
    35c4:	4b2a      	ldr	r3, [pc, #168]	; (3670 <main+0x25c>)
    35c6:	601a      	str	r2, [r3, #0]
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    35c8:	6822      	ldr	r2, [r4, #0]
    35ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
    35cc:	21c0      	movs	r1, #192	; 0xc0
    35ce:	0549      	lsls	r1, r1, #21
    35d0:	430b      	orrs	r3, r1
    35d2:	6553      	str	r3, [r2, #84]	; 0x54

//! [display_user_menu]
	//display_menu();
//! [display_user_menu]

while (events_is_busy(&example_event)) {
    35d4:	4c3c      	ldr	r4, [pc, #240]	; (36c8 <main+0x2b4>)
    35d6:	a816      	add	r0, sp, #88	; 0x58
    35d8:	47a0      	blx	r4
    35da:	2800      	cmp	r0, #0
    35dc:	d1fb      	bne.n	35d6 <main+0x1c2>
 * \param[out] et_filter  Pointer to extended filter element struct to initialize to default values
 */
static inline void can_get_extended_message_filter_element_default(
		struct can_extended_message_filter_element *et_filter)
{
	et_filter->F0.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFID1(0) |
    35de:	2380      	movs	r3, #128	; 0x80
    35e0:	05db      	lsls	r3, r3, #23
    35e2:	9301      	str	r3, [sp, #4]
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC(
			CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F0_EFEC_STF1M_Val);
	et_filter->F1.reg = CAN_EXTENDED_MESSAGE_FILTER_ELEMENT_F1_EFID2_Msk |
    35e4:	4b39      	ldr	r3, [pc, #228]	; (36cc <main+0x2b8>)
    35e6:	9302      	str	r3, [sp, #8]
static void can_set_extended_filter_1(void)
{
	struct can_extended_message_filter_element et_filter;

	can_get_extended_message_filter_element_default(&et_filter);
	et_filter.F0.bit.EFID1 = CAN_RX_EXTENDED_FILTER_ID_1;
    35e8:	9b01      	ldr	r3, [sp, #4]
    35ea:	0f5b      	lsrs	r3, r3, #29
    35ec:	075b      	lsls	r3, r3, #29
    35ee:	4a38      	ldr	r2, [pc, #224]	; (36d0 <main+0x2bc>)
    35f0:	4313      	orrs	r3, r2
    35f2:	9301      	str	r3, [sp, #4]

	can_set_rx_extended_filter(&can_instance, &et_filter,
    35f4:	4c2f      	ldr	r4, [pc, #188]	; (36b4 <main+0x2a0>)
    35f6:	2201      	movs	r2, #1
    35f8:	a901      	add	r1, sp, #4
    35fa:	0020      	movs	r0, r4
    35fc:	4b35      	ldr	r3, [pc, #212]	; (36d4 <main+0x2c0>)
    35fe:	4798      	blx	r3
 * \param[in] source  Interrupt source type
 */
static inline void can_enable_interrupt(struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IE.reg |= source;
    3600:	6822      	ldr	r2, [r4, #0]
    3602:	6d51      	ldr	r1, [r2, #84]	; 0x54
    3604:	2310      	movs	r3, #16
    3606:	430b      	orrs	r3, r1
    3608:	6553      	str	r3, [r2, #84]	; 0x54
	can_set_extended_filter_1();
//! [main_loop]
	while(1) {
		
		
		if (1==canMsgInFlag){
    360a:	4d33      	ldr	r5, [pc, #204]	; (36d8 <main+0x2c4>)
			printf("Command Received!\r\n");
    360c:	4c33      	ldr	r4, [pc, #204]	; (36dc <main+0x2c8>)
    360e:	4e34      	ldr	r6, [pc, #208]	; (36e0 <main+0x2cc>)
	can_set_extended_filter_1();
//! [main_loop]
	while(1) {
		
		
		if (1==canMsgInFlag){
    3610:	782b      	ldrb	r3, [r5, #0]
    3612:	2b01      	cmp	r3, #1
    3614:	d103      	bne.n	361e <main+0x20a>
			printf("Command Received!\r\n");
    3616:	0020      	movs	r0, r4
    3618:	47b0      	blx	r6
			processCommandMsg();
    361a:	4b32      	ldr	r3, [pc, #200]	; (36e4 <main+0x2d0>)
    361c:	4798      	blx	r3
		}
		if ((0 == system_busy_flag) && (1 == commandReady))
    361e:	4b32      	ldr	r3, [pc, #200]	; (36e8 <main+0x2d4>)
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	2b00      	cmp	r3, #0
    3624:	d1f4      	bne.n	3610 <main+0x1fc>
    3626:	4b31      	ldr	r3, [pc, #196]	; (36ec <main+0x2d8>)
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	2b01      	cmp	r3, #1
    362c:	d1f0      	bne.n	3610 <main+0x1fc>
		{
			execute_system_command();
    362e:	4b30      	ldr	r3, [pc, #192]	; (36f0 <main+0x2dc>)
    3630:	4798      	blx	r3
    3632:	e7ed      	b.n	3610 <main+0x1fc>
    3634:	0000267d 	.word	0x0000267d
    3638:	20000014 	.word	0x20000014
    363c:	002a0003 	.word	0x002a0003
    3640:	002b0003 	.word	0x002b0003
    3644:	20000508 	.word	0x20000508
    3648:	20000654 	.word	0x20000654
    364c:	00002a19 	.word	0x00002a19
    3650:	20000650 	.word	0x20000650
    3654:	000029ed 	.word	0x000029ed
    3658:	2000064c 	.word	0x2000064c
    365c:	42001400 	.word	0x42001400
    3660:	000019f5 	.word	0x000019f5
    3664:	20000094 	.word	0x20000094
    3668:	00003dc9 	.word	0x00003dc9
    366c:	00001969 	.word	0x00001969
    3670:	e000e100 	.word	0xe000e100
    3674:	00002a31 	.word	0x00002a31
    3678:	00000df9 	.word	0x00000df9
    367c:	00000e0d 	.word	0x00000e0d
    3680:	00000ee5 	.word	0x00000ee5
    3684:	00002d2d 	.word	0x00002d2d
    3688:	00000cb9 	.word	0x00000cb9
    368c:	00000cc5 	.word	0x00000cc5
    3690:	00000cf9 	.word	0x00000cf9
    3694:	00003329 	.word	0x00003329
    3698:	000033bd 	.word	0x000033bd
    369c:	20000658 	.word	0x20000658
    36a0:	00000765 	.word	0x00000765
    36a4:	000033e5 	.word	0x000033e5
    36a8:	00002a59 	.word	0x00002a59
    36ac:	0000264d 	.word	0x0000264d
    36b0:	1fffffff 	.word	0x1fffffff
    36b4:	20000598 	.word	0x20000598
    36b8:	42001c00 	.word	0x42001c00
    36bc:	00000fe1 	.word	0x00000fe1
    36c0:	000012f9 	.word	0x000012f9
    36c4:	000012e1 	.word	0x000012e1
    36c8:	00000ecd 	.word	0x00000ecd
    36cc:	9fffffff 	.word	0x9fffffff
    36d0:	10000096 	.word	0x10000096
    36d4:	00001331 	.word	0x00001331
    36d8:	200004e8 	.word	0x200004e8
    36dc:	000051d8 	.word	0x000051d8
    36e0:	00003db5 	.word	0x00003db5
    36e4:	00002d89 	.word	0x00002d89
    36e8:	20000597 	.word	0x20000597
    36ec:	2000054e 	.word	0x2000054e
    36f0:	00002df9 	.word	0x00002df9

000036f4 <__aeabi_uidiv>:
    36f4:	2200      	movs	r2, #0
    36f6:	0843      	lsrs	r3, r0, #1
    36f8:	428b      	cmp	r3, r1
    36fa:	d374      	bcc.n	37e6 <__aeabi_uidiv+0xf2>
    36fc:	0903      	lsrs	r3, r0, #4
    36fe:	428b      	cmp	r3, r1
    3700:	d35f      	bcc.n	37c2 <__aeabi_uidiv+0xce>
    3702:	0a03      	lsrs	r3, r0, #8
    3704:	428b      	cmp	r3, r1
    3706:	d344      	bcc.n	3792 <__aeabi_uidiv+0x9e>
    3708:	0b03      	lsrs	r3, r0, #12
    370a:	428b      	cmp	r3, r1
    370c:	d328      	bcc.n	3760 <__aeabi_uidiv+0x6c>
    370e:	0c03      	lsrs	r3, r0, #16
    3710:	428b      	cmp	r3, r1
    3712:	d30d      	bcc.n	3730 <__aeabi_uidiv+0x3c>
    3714:	22ff      	movs	r2, #255	; 0xff
    3716:	0209      	lsls	r1, r1, #8
    3718:	ba12      	rev	r2, r2
    371a:	0c03      	lsrs	r3, r0, #16
    371c:	428b      	cmp	r3, r1
    371e:	d302      	bcc.n	3726 <__aeabi_uidiv+0x32>
    3720:	1212      	asrs	r2, r2, #8
    3722:	0209      	lsls	r1, r1, #8
    3724:	d065      	beq.n	37f2 <__aeabi_uidiv+0xfe>
    3726:	0b03      	lsrs	r3, r0, #12
    3728:	428b      	cmp	r3, r1
    372a:	d319      	bcc.n	3760 <__aeabi_uidiv+0x6c>
    372c:	e000      	b.n	3730 <__aeabi_uidiv+0x3c>
    372e:	0a09      	lsrs	r1, r1, #8
    3730:	0bc3      	lsrs	r3, r0, #15
    3732:	428b      	cmp	r3, r1
    3734:	d301      	bcc.n	373a <__aeabi_uidiv+0x46>
    3736:	03cb      	lsls	r3, r1, #15
    3738:	1ac0      	subs	r0, r0, r3
    373a:	4152      	adcs	r2, r2
    373c:	0b83      	lsrs	r3, r0, #14
    373e:	428b      	cmp	r3, r1
    3740:	d301      	bcc.n	3746 <__aeabi_uidiv+0x52>
    3742:	038b      	lsls	r3, r1, #14
    3744:	1ac0      	subs	r0, r0, r3
    3746:	4152      	adcs	r2, r2
    3748:	0b43      	lsrs	r3, r0, #13
    374a:	428b      	cmp	r3, r1
    374c:	d301      	bcc.n	3752 <__aeabi_uidiv+0x5e>
    374e:	034b      	lsls	r3, r1, #13
    3750:	1ac0      	subs	r0, r0, r3
    3752:	4152      	adcs	r2, r2
    3754:	0b03      	lsrs	r3, r0, #12
    3756:	428b      	cmp	r3, r1
    3758:	d301      	bcc.n	375e <__aeabi_uidiv+0x6a>
    375a:	030b      	lsls	r3, r1, #12
    375c:	1ac0      	subs	r0, r0, r3
    375e:	4152      	adcs	r2, r2
    3760:	0ac3      	lsrs	r3, r0, #11
    3762:	428b      	cmp	r3, r1
    3764:	d301      	bcc.n	376a <__aeabi_uidiv+0x76>
    3766:	02cb      	lsls	r3, r1, #11
    3768:	1ac0      	subs	r0, r0, r3
    376a:	4152      	adcs	r2, r2
    376c:	0a83      	lsrs	r3, r0, #10
    376e:	428b      	cmp	r3, r1
    3770:	d301      	bcc.n	3776 <__aeabi_uidiv+0x82>
    3772:	028b      	lsls	r3, r1, #10
    3774:	1ac0      	subs	r0, r0, r3
    3776:	4152      	adcs	r2, r2
    3778:	0a43      	lsrs	r3, r0, #9
    377a:	428b      	cmp	r3, r1
    377c:	d301      	bcc.n	3782 <__aeabi_uidiv+0x8e>
    377e:	024b      	lsls	r3, r1, #9
    3780:	1ac0      	subs	r0, r0, r3
    3782:	4152      	adcs	r2, r2
    3784:	0a03      	lsrs	r3, r0, #8
    3786:	428b      	cmp	r3, r1
    3788:	d301      	bcc.n	378e <__aeabi_uidiv+0x9a>
    378a:	020b      	lsls	r3, r1, #8
    378c:	1ac0      	subs	r0, r0, r3
    378e:	4152      	adcs	r2, r2
    3790:	d2cd      	bcs.n	372e <__aeabi_uidiv+0x3a>
    3792:	09c3      	lsrs	r3, r0, #7
    3794:	428b      	cmp	r3, r1
    3796:	d301      	bcc.n	379c <__aeabi_uidiv+0xa8>
    3798:	01cb      	lsls	r3, r1, #7
    379a:	1ac0      	subs	r0, r0, r3
    379c:	4152      	adcs	r2, r2
    379e:	0983      	lsrs	r3, r0, #6
    37a0:	428b      	cmp	r3, r1
    37a2:	d301      	bcc.n	37a8 <__aeabi_uidiv+0xb4>
    37a4:	018b      	lsls	r3, r1, #6
    37a6:	1ac0      	subs	r0, r0, r3
    37a8:	4152      	adcs	r2, r2
    37aa:	0943      	lsrs	r3, r0, #5
    37ac:	428b      	cmp	r3, r1
    37ae:	d301      	bcc.n	37b4 <__aeabi_uidiv+0xc0>
    37b0:	014b      	lsls	r3, r1, #5
    37b2:	1ac0      	subs	r0, r0, r3
    37b4:	4152      	adcs	r2, r2
    37b6:	0903      	lsrs	r3, r0, #4
    37b8:	428b      	cmp	r3, r1
    37ba:	d301      	bcc.n	37c0 <__aeabi_uidiv+0xcc>
    37bc:	010b      	lsls	r3, r1, #4
    37be:	1ac0      	subs	r0, r0, r3
    37c0:	4152      	adcs	r2, r2
    37c2:	08c3      	lsrs	r3, r0, #3
    37c4:	428b      	cmp	r3, r1
    37c6:	d301      	bcc.n	37cc <__aeabi_uidiv+0xd8>
    37c8:	00cb      	lsls	r3, r1, #3
    37ca:	1ac0      	subs	r0, r0, r3
    37cc:	4152      	adcs	r2, r2
    37ce:	0883      	lsrs	r3, r0, #2
    37d0:	428b      	cmp	r3, r1
    37d2:	d301      	bcc.n	37d8 <__aeabi_uidiv+0xe4>
    37d4:	008b      	lsls	r3, r1, #2
    37d6:	1ac0      	subs	r0, r0, r3
    37d8:	4152      	adcs	r2, r2
    37da:	0843      	lsrs	r3, r0, #1
    37dc:	428b      	cmp	r3, r1
    37de:	d301      	bcc.n	37e4 <__aeabi_uidiv+0xf0>
    37e0:	004b      	lsls	r3, r1, #1
    37e2:	1ac0      	subs	r0, r0, r3
    37e4:	4152      	adcs	r2, r2
    37e6:	1a41      	subs	r1, r0, r1
    37e8:	d200      	bcs.n	37ec <__aeabi_uidiv+0xf8>
    37ea:	4601      	mov	r1, r0
    37ec:	4152      	adcs	r2, r2
    37ee:	4610      	mov	r0, r2
    37f0:	4770      	bx	lr
    37f2:	e7ff      	b.n	37f4 <__aeabi_uidiv+0x100>
    37f4:	b501      	push	{r0, lr}
    37f6:	2000      	movs	r0, #0
    37f8:	f000 f8f0 	bl	39dc <__aeabi_idiv0>
    37fc:	bd02      	pop	{r1, pc}
    37fe:	46c0      	nop			; (mov r8, r8)

00003800 <__aeabi_uidivmod>:
    3800:	2900      	cmp	r1, #0
    3802:	d0f7      	beq.n	37f4 <__aeabi_uidiv+0x100>
    3804:	e776      	b.n	36f4 <__aeabi_uidiv>
    3806:	4770      	bx	lr

00003808 <__aeabi_idiv>:
    3808:	4603      	mov	r3, r0
    380a:	430b      	orrs	r3, r1
    380c:	d47f      	bmi.n	390e <__aeabi_idiv+0x106>
    380e:	2200      	movs	r2, #0
    3810:	0843      	lsrs	r3, r0, #1
    3812:	428b      	cmp	r3, r1
    3814:	d374      	bcc.n	3900 <__aeabi_idiv+0xf8>
    3816:	0903      	lsrs	r3, r0, #4
    3818:	428b      	cmp	r3, r1
    381a:	d35f      	bcc.n	38dc <__aeabi_idiv+0xd4>
    381c:	0a03      	lsrs	r3, r0, #8
    381e:	428b      	cmp	r3, r1
    3820:	d344      	bcc.n	38ac <__aeabi_idiv+0xa4>
    3822:	0b03      	lsrs	r3, r0, #12
    3824:	428b      	cmp	r3, r1
    3826:	d328      	bcc.n	387a <__aeabi_idiv+0x72>
    3828:	0c03      	lsrs	r3, r0, #16
    382a:	428b      	cmp	r3, r1
    382c:	d30d      	bcc.n	384a <__aeabi_idiv+0x42>
    382e:	22ff      	movs	r2, #255	; 0xff
    3830:	0209      	lsls	r1, r1, #8
    3832:	ba12      	rev	r2, r2
    3834:	0c03      	lsrs	r3, r0, #16
    3836:	428b      	cmp	r3, r1
    3838:	d302      	bcc.n	3840 <__aeabi_idiv+0x38>
    383a:	1212      	asrs	r2, r2, #8
    383c:	0209      	lsls	r1, r1, #8
    383e:	d065      	beq.n	390c <__aeabi_idiv+0x104>
    3840:	0b03      	lsrs	r3, r0, #12
    3842:	428b      	cmp	r3, r1
    3844:	d319      	bcc.n	387a <__aeabi_idiv+0x72>
    3846:	e000      	b.n	384a <__aeabi_idiv+0x42>
    3848:	0a09      	lsrs	r1, r1, #8
    384a:	0bc3      	lsrs	r3, r0, #15
    384c:	428b      	cmp	r3, r1
    384e:	d301      	bcc.n	3854 <__aeabi_idiv+0x4c>
    3850:	03cb      	lsls	r3, r1, #15
    3852:	1ac0      	subs	r0, r0, r3
    3854:	4152      	adcs	r2, r2
    3856:	0b83      	lsrs	r3, r0, #14
    3858:	428b      	cmp	r3, r1
    385a:	d301      	bcc.n	3860 <__aeabi_idiv+0x58>
    385c:	038b      	lsls	r3, r1, #14
    385e:	1ac0      	subs	r0, r0, r3
    3860:	4152      	adcs	r2, r2
    3862:	0b43      	lsrs	r3, r0, #13
    3864:	428b      	cmp	r3, r1
    3866:	d301      	bcc.n	386c <__aeabi_idiv+0x64>
    3868:	034b      	lsls	r3, r1, #13
    386a:	1ac0      	subs	r0, r0, r3
    386c:	4152      	adcs	r2, r2
    386e:	0b03      	lsrs	r3, r0, #12
    3870:	428b      	cmp	r3, r1
    3872:	d301      	bcc.n	3878 <__aeabi_idiv+0x70>
    3874:	030b      	lsls	r3, r1, #12
    3876:	1ac0      	subs	r0, r0, r3
    3878:	4152      	adcs	r2, r2
    387a:	0ac3      	lsrs	r3, r0, #11
    387c:	428b      	cmp	r3, r1
    387e:	d301      	bcc.n	3884 <__aeabi_idiv+0x7c>
    3880:	02cb      	lsls	r3, r1, #11
    3882:	1ac0      	subs	r0, r0, r3
    3884:	4152      	adcs	r2, r2
    3886:	0a83      	lsrs	r3, r0, #10
    3888:	428b      	cmp	r3, r1
    388a:	d301      	bcc.n	3890 <__aeabi_idiv+0x88>
    388c:	028b      	lsls	r3, r1, #10
    388e:	1ac0      	subs	r0, r0, r3
    3890:	4152      	adcs	r2, r2
    3892:	0a43      	lsrs	r3, r0, #9
    3894:	428b      	cmp	r3, r1
    3896:	d301      	bcc.n	389c <__aeabi_idiv+0x94>
    3898:	024b      	lsls	r3, r1, #9
    389a:	1ac0      	subs	r0, r0, r3
    389c:	4152      	adcs	r2, r2
    389e:	0a03      	lsrs	r3, r0, #8
    38a0:	428b      	cmp	r3, r1
    38a2:	d301      	bcc.n	38a8 <__aeabi_idiv+0xa0>
    38a4:	020b      	lsls	r3, r1, #8
    38a6:	1ac0      	subs	r0, r0, r3
    38a8:	4152      	adcs	r2, r2
    38aa:	d2cd      	bcs.n	3848 <__aeabi_idiv+0x40>
    38ac:	09c3      	lsrs	r3, r0, #7
    38ae:	428b      	cmp	r3, r1
    38b0:	d301      	bcc.n	38b6 <__aeabi_idiv+0xae>
    38b2:	01cb      	lsls	r3, r1, #7
    38b4:	1ac0      	subs	r0, r0, r3
    38b6:	4152      	adcs	r2, r2
    38b8:	0983      	lsrs	r3, r0, #6
    38ba:	428b      	cmp	r3, r1
    38bc:	d301      	bcc.n	38c2 <__aeabi_idiv+0xba>
    38be:	018b      	lsls	r3, r1, #6
    38c0:	1ac0      	subs	r0, r0, r3
    38c2:	4152      	adcs	r2, r2
    38c4:	0943      	lsrs	r3, r0, #5
    38c6:	428b      	cmp	r3, r1
    38c8:	d301      	bcc.n	38ce <__aeabi_idiv+0xc6>
    38ca:	014b      	lsls	r3, r1, #5
    38cc:	1ac0      	subs	r0, r0, r3
    38ce:	4152      	adcs	r2, r2
    38d0:	0903      	lsrs	r3, r0, #4
    38d2:	428b      	cmp	r3, r1
    38d4:	d301      	bcc.n	38da <__aeabi_idiv+0xd2>
    38d6:	010b      	lsls	r3, r1, #4
    38d8:	1ac0      	subs	r0, r0, r3
    38da:	4152      	adcs	r2, r2
    38dc:	08c3      	lsrs	r3, r0, #3
    38de:	428b      	cmp	r3, r1
    38e0:	d301      	bcc.n	38e6 <__aeabi_idiv+0xde>
    38e2:	00cb      	lsls	r3, r1, #3
    38e4:	1ac0      	subs	r0, r0, r3
    38e6:	4152      	adcs	r2, r2
    38e8:	0883      	lsrs	r3, r0, #2
    38ea:	428b      	cmp	r3, r1
    38ec:	d301      	bcc.n	38f2 <__aeabi_idiv+0xea>
    38ee:	008b      	lsls	r3, r1, #2
    38f0:	1ac0      	subs	r0, r0, r3
    38f2:	4152      	adcs	r2, r2
    38f4:	0843      	lsrs	r3, r0, #1
    38f6:	428b      	cmp	r3, r1
    38f8:	d301      	bcc.n	38fe <__aeabi_idiv+0xf6>
    38fa:	004b      	lsls	r3, r1, #1
    38fc:	1ac0      	subs	r0, r0, r3
    38fe:	4152      	adcs	r2, r2
    3900:	1a41      	subs	r1, r0, r1
    3902:	d200      	bcs.n	3906 <__aeabi_idiv+0xfe>
    3904:	4601      	mov	r1, r0
    3906:	4152      	adcs	r2, r2
    3908:	4610      	mov	r0, r2
    390a:	4770      	bx	lr
    390c:	e05d      	b.n	39ca <__aeabi_idiv+0x1c2>
    390e:	0fca      	lsrs	r2, r1, #31
    3910:	d000      	beq.n	3914 <__aeabi_idiv+0x10c>
    3912:	4249      	negs	r1, r1
    3914:	1003      	asrs	r3, r0, #32
    3916:	d300      	bcc.n	391a <__aeabi_idiv+0x112>
    3918:	4240      	negs	r0, r0
    391a:	4053      	eors	r3, r2
    391c:	2200      	movs	r2, #0
    391e:	469c      	mov	ip, r3
    3920:	0903      	lsrs	r3, r0, #4
    3922:	428b      	cmp	r3, r1
    3924:	d32d      	bcc.n	3982 <__aeabi_idiv+0x17a>
    3926:	0a03      	lsrs	r3, r0, #8
    3928:	428b      	cmp	r3, r1
    392a:	d312      	bcc.n	3952 <__aeabi_idiv+0x14a>
    392c:	22fc      	movs	r2, #252	; 0xfc
    392e:	0189      	lsls	r1, r1, #6
    3930:	ba12      	rev	r2, r2
    3932:	0a03      	lsrs	r3, r0, #8
    3934:	428b      	cmp	r3, r1
    3936:	d30c      	bcc.n	3952 <__aeabi_idiv+0x14a>
    3938:	0189      	lsls	r1, r1, #6
    393a:	1192      	asrs	r2, r2, #6
    393c:	428b      	cmp	r3, r1
    393e:	d308      	bcc.n	3952 <__aeabi_idiv+0x14a>
    3940:	0189      	lsls	r1, r1, #6
    3942:	1192      	asrs	r2, r2, #6
    3944:	428b      	cmp	r3, r1
    3946:	d304      	bcc.n	3952 <__aeabi_idiv+0x14a>
    3948:	0189      	lsls	r1, r1, #6
    394a:	d03a      	beq.n	39c2 <__aeabi_idiv+0x1ba>
    394c:	1192      	asrs	r2, r2, #6
    394e:	e000      	b.n	3952 <__aeabi_idiv+0x14a>
    3950:	0989      	lsrs	r1, r1, #6
    3952:	09c3      	lsrs	r3, r0, #7
    3954:	428b      	cmp	r3, r1
    3956:	d301      	bcc.n	395c <__aeabi_idiv+0x154>
    3958:	01cb      	lsls	r3, r1, #7
    395a:	1ac0      	subs	r0, r0, r3
    395c:	4152      	adcs	r2, r2
    395e:	0983      	lsrs	r3, r0, #6
    3960:	428b      	cmp	r3, r1
    3962:	d301      	bcc.n	3968 <__aeabi_idiv+0x160>
    3964:	018b      	lsls	r3, r1, #6
    3966:	1ac0      	subs	r0, r0, r3
    3968:	4152      	adcs	r2, r2
    396a:	0943      	lsrs	r3, r0, #5
    396c:	428b      	cmp	r3, r1
    396e:	d301      	bcc.n	3974 <__aeabi_idiv+0x16c>
    3970:	014b      	lsls	r3, r1, #5
    3972:	1ac0      	subs	r0, r0, r3
    3974:	4152      	adcs	r2, r2
    3976:	0903      	lsrs	r3, r0, #4
    3978:	428b      	cmp	r3, r1
    397a:	d301      	bcc.n	3980 <__aeabi_idiv+0x178>
    397c:	010b      	lsls	r3, r1, #4
    397e:	1ac0      	subs	r0, r0, r3
    3980:	4152      	adcs	r2, r2
    3982:	08c3      	lsrs	r3, r0, #3
    3984:	428b      	cmp	r3, r1
    3986:	d301      	bcc.n	398c <__aeabi_idiv+0x184>
    3988:	00cb      	lsls	r3, r1, #3
    398a:	1ac0      	subs	r0, r0, r3
    398c:	4152      	adcs	r2, r2
    398e:	0883      	lsrs	r3, r0, #2
    3990:	428b      	cmp	r3, r1
    3992:	d301      	bcc.n	3998 <__aeabi_idiv+0x190>
    3994:	008b      	lsls	r3, r1, #2
    3996:	1ac0      	subs	r0, r0, r3
    3998:	4152      	adcs	r2, r2
    399a:	d2d9      	bcs.n	3950 <__aeabi_idiv+0x148>
    399c:	0843      	lsrs	r3, r0, #1
    399e:	428b      	cmp	r3, r1
    39a0:	d301      	bcc.n	39a6 <__aeabi_idiv+0x19e>
    39a2:	004b      	lsls	r3, r1, #1
    39a4:	1ac0      	subs	r0, r0, r3
    39a6:	4152      	adcs	r2, r2
    39a8:	1a41      	subs	r1, r0, r1
    39aa:	d200      	bcs.n	39ae <__aeabi_idiv+0x1a6>
    39ac:	4601      	mov	r1, r0
    39ae:	4663      	mov	r3, ip
    39b0:	4152      	adcs	r2, r2
    39b2:	105b      	asrs	r3, r3, #1
    39b4:	4610      	mov	r0, r2
    39b6:	d301      	bcc.n	39bc <__aeabi_idiv+0x1b4>
    39b8:	4240      	negs	r0, r0
    39ba:	2b00      	cmp	r3, #0
    39bc:	d500      	bpl.n	39c0 <__aeabi_idiv+0x1b8>
    39be:	4249      	negs	r1, r1
    39c0:	4770      	bx	lr
    39c2:	4663      	mov	r3, ip
    39c4:	105b      	asrs	r3, r3, #1
    39c6:	d300      	bcc.n	39ca <__aeabi_idiv+0x1c2>
    39c8:	4240      	negs	r0, r0
    39ca:	b501      	push	{r0, lr}
    39cc:	2000      	movs	r0, #0
    39ce:	f000 f805 	bl	39dc <__aeabi_idiv0>
    39d2:	bd02      	pop	{r1, pc}

000039d4 <__aeabi_idivmod>:
    39d4:	2900      	cmp	r1, #0
    39d6:	d0f8      	beq.n	39ca <__aeabi_idiv+0x1c2>
    39d8:	e716      	b.n	3808 <__aeabi_idiv>
    39da:	4770      	bx	lr

000039dc <__aeabi_idiv0>:
    39dc:	4770      	bx	lr
    39de:	46c0      	nop			; (mov r8, r8)

000039e0 <__aeabi_uldivmod>:
    39e0:	2b00      	cmp	r3, #0
    39e2:	d111      	bne.n	3a08 <__aeabi_uldivmod+0x28>
    39e4:	2a00      	cmp	r2, #0
    39e6:	d10f      	bne.n	3a08 <__aeabi_uldivmod+0x28>
    39e8:	2900      	cmp	r1, #0
    39ea:	d100      	bne.n	39ee <__aeabi_uldivmod+0xe>
    39ec:	2800      	cmp	r0, #0
    39ee:	d002      	beq.n	39f6 <__aeabi_uldivmod+0x16>
    39f0:	2100      	movs	r1, #0
    39f2:	43c9      	mvns	r1, r1
    39f4:	1c08      	adds	r0, r1, #0
    39f6:	b407      	push	{r0, r1, r2}
    39f8:	4802      	ldr	r0, [pc, #8]	; (3a04 <__aeabi_uldivmod+0x24>)
    39fa:	a102      	add	r1, pc, #8	; (adr r1, 3a04 <__aeabi_uldivmod+0x24>)
    39fc:	1840      	adds	r0, r0, r1
    39fe:	9002      	str	r0, [sp, #8]
    3a00:	bd03      	pop	{r0, r1, pc}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	ffffffd9 	.word	0xffffffd9
    3a08:	b403      	push	{r0, r1}
    3a0a:	4668      	mov	r0, sp
    3a0c:	b501      	push	{r0, lr}
    3a0e:	9802      	ldr	r0, [sp, #8]
    3a10:	f000 f832 	bl	3a78 <__udivmoddi4>
    3a14:	9b01      	ldr	r3, [sp, #4]
    3a16:	469e      	mov	lr, r3
    3a18:	b002      	add	sp, #8
    3a1a:	bc0c      	pop	{r2, r3}
    3a1c:	4770      	bx	lr
    3a1e:	46c0      	nop			; (mov r8, r8)

00003a20 <__aeabi_lmul>:
    3a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a22:	464f      	mov	r7, r9
    3a24:	4646      	mov	r6, r8
    3a26:	b4c0      	push	{r6, r7}
    3a28:	0416      	lsls	r6, r2, #16
    3a2a:	0c36      	lsrs	r6, r6, #16
    3a2c:	4699      	mov	r9, r3
    3a2e:	0033      	movs	r3, r6
    3a30:	0405      	lsls	r5, r0, #16
    3a32:	0c2c      	lsrs	r4, r5, #16
    3a34:	0c07      	lsrs	r7, r0, #16
    3a36:	0c15      	lsrs	r5, r2, #16
    3a38:	4363      	muls	r3, r4
    3a3a:	437e      	muls	r6, r7
    3a3c:	436f      	muls	r7, r5
    3a3e:	4365      	muls	r5, r4
    3a40:	0c1c      	lsrs	r4, r3, #16
    3a42:	19ad      	adds	r5, r5, r6
    3a44:	1964      	adds	r4, r4, r5
    3a46:	469c      	mov	ip, r3
    3a48:	42a6      	cmp	r6, r4
    3a4a:	d903      	bls.n	3a54 <__aeabi_lmul+0x34>
    3a4c:	2380      	movs	r3, #128	; 0x80
    3a4e:	025b      	lsls	r3, r3, #9
    3a50:	4698      	mov	r8, r3
    3a52:	4447      	add	r7, r8
    3a54:	4663      	mov	r3, ip
    3a56:	0c25      	lsrs	r5, r4, #16
    3a58:	19ef      	adds	r7, r5, r7
    3a5a:	041d      	lsls	r5, r3, #16
    3a5c:	464b      	mov	r3, r9
    3a5e:	434a      	muls	r2, r1
    3a60:	4343      	muls	r3, r0
    3a62:	0c2d      	lsrs	r5, r5, #16
    3a64:	0424      	lsls	r4, r4, #16
    3a66:	1964      	adds	r4, r4, r5
    3a68:	1899      	adds	r1, r3, r2
    3a6a:	19c9      	adds	r1, r1, r7
    3a6c:	0020      	movs	r0, r4
    3a6e:	bc0c      	pop	{r2, r3}
    3a70:	4690      	mov	r8, r2
    3a72:	4699      	mov	r9, r3
    3a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a76:	46c0      	nop			; (mov r8, r8)

00003a78 <__udivmoddi4>:
    3a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7a:	464d      	mov	r5, r9
    3a7c:	4656      	mov	r6, sl
    3a7e:	4644      	mov	r4, r8
    3a80:	465f      	mov	r7, fp
    3a82:	b4f0      	push	{r4, r5, r6, r7}
    3a84:	4692      	mov	sl, r2
    3a86:	b083      	sub	sp, #12
    3a88:	0004      	movs	r4, r0
    3a8a:	000d      	movs	r5, r1
    3a8c:	4699      	mov	r9, r3
    3a8e:	428b      	cmp	r3, r1
    3a90:	d82f      	bhi.n	3af2 <__udivmoddi4+0x7a>
    3a92:	d02c      	beq.n	3aee <__udivmoddi4+0x76>
    3a94:	4649      	mov	r1, r9
    3a96:	4650      	mov	r0, sl
    3a98:	f000 f8ae 	bl	3bf8 <__clzdi2>
    3a9c:	0029      	movs	r1, r5
    3a9e:	0006      	movs	r6, r0
    3aa0:	0020      	movs	r0, r4
    3aa2:	f000 f8a9 	bl	3bf8 <__clzdi2>
    3aa6:	1a33      	subs	r3, r6, r0
    3aa8:	4698      	mov	r8, r3
    3aaa:	3b20      	subs	r3, #32
    3aac:	469b      	mov	fp, r3
    3aae:	d500      	bpl.n	3ab2 <__udivmoddi4+0x3a>
    3ab0:	e074      	b.n	3b9c <__udivmoddi4+0x124>
    3ab2:	4653      	mov	r3, sl
    3ab4:	465a      	mov	r2, fp
    3ab6:	4093      	lsls	r3, r2
    3ab8:	001f      	movs	r7, r3
    3aba:	4653      	mov	r3, sl
    3abc:	4642      	mov	r2, r8
    3abe:	4093      	lsls	r3, r2
    3ac0:	001e      	movs	r6, r3
    3ac2:	42af      	cmp	r7, r5
    3ac4:	d829      	bhi.n	3b1a <__udivmoddi4+0xa2>
    3ac6:	d026      	beq.n	3b16 <__udivmoddi4+0x9e>
    3ac8:	465b      	mov	r3, fp
    3aca:	1ba4      	subs	r4, r4, r6
    3acc:	41bd      	sbcs	r5, r7
    3ace:	2b00      	cmp	r3, #0
    3ad0:	da00      	bge.n	3ad4 <__udivmoddi4+0x5c>
    3ad2:	e079      	b.n	3bc8 <__udivmoddi4+0x150>
    3ad4:	2200      	movs	r2, #0
    3ad6:	2300      	movs	r3, #0
    3ad8:	9200      	str	r2, [sp, #0]
    3ada:	9301      	str	r3, [sp, #4]
    3adc:	2301      	movs	r3, #1
    3ade:	465a      	mov	r2, fp
    3ae0:	4093      	lsls	r3, r2
    3ae2:	9301      	str	r3, [sp, #4]
    3ae4:	2301      	movs	r3, #1
    3ae6:	4642      	mov	r2, r8
    3ae8:	4093      	lsls	r3, r2
    3aea:	9300      	str	r3, [sp, #0]
    3aec:	e019      	b.n	3b22 <__udivmoddi4+0xaa>
    3aee:	4282      	cmp	r2, r0
    3af0:	d9d0      	bls.n	3a94 <__udivmoddi4+0x1c>
    3af2:	2200      	movs	r2, #0
    3af4:	2300      	movs	r3, #0
    3af6:	9200      	str	r2, [sp, #0]
    3af8:	9301      	str	r3, [sp, #4]
    3afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3afc:	2b00      	cmp	r3, #0
    3afe:	d001      	beq.n	3b04 <__udivmoddi4+0x8c>
    3b00:	601c      	str	r4, [r3, #0]
    3b02:	605d      	str	r5, [r3, #4]
    3b04:	9800      	ldr	r0, [sp, #0]
    3b06:	9901      	ldr	r1, [sp, #4]
    3b08:	b003      	add	sp, #12
    3b0a:	bc3c      	pop	{r2, r3, r4, r5}
    3b0c:	4690      	mov	r8, r2
    3b0e:	4699      	mov	r9, r3
    3b10:	46a2      	mov	sl, r4
    3b12:	46ab      	mov	fp, r5
    3b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b16:	42a3      	cmp	r3, r4
    3b18:	d9d6      	bls.n	3ac8 <__udivmoddi4+0x50>
    3b1a:	2200      	movs	r2, #0
    3b1c:	2300      	movs	r3, #0
    3b1e:	9200      	str	r2, [sp, #0]
    3b20:	9301      	str	r3, [sp, #4]
    3b22:	4643      	mov	r3, r8
    3b24:	2b00      	cmp	r3, #0
    3b26:	d0e8      	beq.n	3afa <__udivmoddi4+0x82>
    3b28:	07fb      	lsls	r3, r7, #31
    3b2a:	0872      	lsrs	r2, r6, #1
    3b2c:	431a      	orrs	r2, r3
    3b2e:	4646      	mov	r6, r8
    3b30:	087b      	lsrs	r3, r7, #1
    3b32:	e00e      	b.n	3b52 <__udivmoddi4+0xda>
    3b34:	42ab      	cmp	r3, r5
    3b36:	d101      	bne.n	3b3c <__udivmoddi4+0xc4>
    3b38:	42a2      	cmp	r2, r4
    3b3a:	d80c      	bhi.n	3b56 <__udivmoddi4+0xde>
    3b3c:	1aa4      	subs	r4, r4, r2
    3b3e:	419d      	sbcs	r5, r3
    3b40:	2001      	movs	r0, #1
    3b42:	1924      	adds	r4, r4, r4
    3b44:	416d      	adcs	r5, r5
    3b46:	2100      	movs	r1, #0
    3b48:	3e01      	subs	r6, #1
    3b4a:	1824      	adds	r4, r4, r0
    3b4c:	414d      	adcs	r5, r1
    3b4e:	2e00      	cmp	r6, #0
    3b50:	d006      	beq.n	3b60 <__udivmoddi4+0xe8>
    3b52:	42ab      	cmp	r3, r5
    3b54:	d9ee      	bls.n	3b34 <__udivmoddi4+0xbc>
    3b56:	3e01      	subs	r6, #1
    3b58:	1924      	adds	r4, r4, r4
    3b5a:	416d      	adcs	r5, r5
    3b5c:	2e00      	cmp	r6, #0
    3b5e:	d1f8      	bne.n	3b52 <__udivmoddi4+0xda>
    3b60:	465b      	mov	r3, fp
    3b62:	9800      	ldr	r0, [sp, #0]
    3b64:	9901      	ldr	r1, [sp, #4]
    3b66:	1900      	adds	r0, r0, r4
    3b68:	4169      	adcs	r1, r5
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	db22      	blt.n	3bb4 <__udivmoddi4+0x13c>
    3b6e:	002b      	movs	r3, r5
    3b70:	465a      	mov	r2, fp
    3b72:	40d3      	lsrs	r3, r2
    3b74:	002a      	movs	r2, r5
    3b76:	4644      	mov	r4, r8
    3b78:	40e2      	lsrs	r2, r4
    3b7a:	001c      	movs	r4, r3
    3b7c:	465b      	mov	r3, fp
    3b7e:	0015      	movs	r5, r2
    3b80:	2b00      	cmp	r3, #0
    3b82:	db2c      	blt.n	3bde <__udivmoddi4+0x166>
    3b84:	0026      	movs	r6, r4
    3b86:	409e      	lsls	r6, r3
    3b88:	0033      	movs	r3, r6
    3b8a:	0026      	movs	r6, r4
    3b8c:	4647      	mov	r7, r8
    3b8e:	40be      	lsls	r6, r7
    3b90:	0032      	movs	r2, r6
    3b92:	1a80      	subs	r0, r0, r2
    3b94:	4199      	sbcs	r1, r3
    3b96:	9000      	str	r0, [sp, #0]
    3b98:	9101      	str	r1, [sp, #4]
    3b9a:	e7ae      	b.n	3afa <__udivmoddi4+0x82>
    3b9c:	4642      	mov	r2, r8
    3b9e:	2320      	movs	r3, #32
    3ba0:	1a9b      	subs	r3, r3, r2
    3ba2:	4652      	mov	r2, sl
    3ba4:	40da      	lsrs	r2, r3
    3ba6:	4641      	mov	r1, r8
    3ba8:	0013      	movs	r3, r2
    3baa:	464a      	mov	r2, r9
    3bac:	408a      	lsls	r2, r1
    3bae:	0017      	movs	r7, r2
    3bb0:	431f      	orrs	r7, r3
    3bb2:	e782      	b.n	3aba <__udivmoddi4+0x42>
    3bb4:	4642      	mov	r2, r8
    3bb6:	2320      	movs	r3, #32
    3bb8:	1a9b      	subs	r3, r3, r2
    3bba:	002a      	movs	r2, r5
    3bbc:	4646      	mov	r6, r8
    3bbe:	409a      	lsls	r2, r3
    3bc0:	0023      	movs	r3, r4
    3bc2:	40f3      	lsrs	r3, r6
    3bc4:	4313      	orrs	r3, r2
    3bc6:	e7d5      	b.n	3b74 <__udivmoddi4+0xfc>
    3bc8:	4642      	mov	r2, r8
    3bca:	2320      	movs	r3, #32
    3bcc:	2100      	movs	r1, #0
    3bce:	1a9b      	subs	r3, r3, r2
    3bd0:	2200      	movs	r2, #0
    3bd2:	9100      	str	r1, [sp, #0]
    3bd4:	9201      	str	r2, [sp, #4]
    3bd6:	2201      	movs	r2, #1
    3bd8:	40da      	lsrs	r2, r3
    3bda:	9201      	str	r2, [sp, #4]
    3bdc:	e782      	b.n	3ae4 <__udivmoddi4+0x6c>
    3bde:	4642      	mov	r2, r8
    3be0:	2320      	movs	r3, #32
    3be2:	0026      	movs	r6, r4
    3be4:	1a9b      	subs	r3, r3, r2
    3be6:	40de      	lsrs	r6, r3
    3be8:	002f      	movs	r7, r5
    3bea:	46b4      	mov	ip, r6
    3bec:	4097      	lsls	r7, r2
    3bee:	4666      	mov	r6, ip
    3bf0:	003b      	movs	r3, r7
    3bf2:	4333      	orrs	r3, r6
    3bf4:	e7c9      	b.n	3b8a <__udivmoddi4+0x112>
    3bf6:	46c0      	nop			; (mov r8, r8)

00003bf8 <__clzdi2>:
    3bf8:	b510      	push	{r4, lr}
    3bfa:	2900      	cmp	r1, #0
    3bfc:	d103      	bne.n	3c06 <__clzdi2+0xe>
    3bfe:	f000 f807 	bl	3c10 <__clzsi2>
    3c02:	3020      	adds	r0, #32
    3c04:	e002      	b.n	3c0c <__clzdi2+0x14>
    3c06:	1c08      	adds	r0, r1, #0
    3c08:	f000 f802 	bl	3c10 <__clzsi2>
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)

00003c10 <__clzsi2>:
    3c10:	211c      	movs	r1, #28
    3c12:	2301      	movs	r3, #1
    3c14:	041b      	lsls	r3, r3, #16
    3c16:	4298      	cmp	r0, r3
    3c18:	d301      	bcc.n	3c1e <__clzsi2+0xe>
    3c1a:	0c00      	lsrs	r0, r0, #16
    3c1c:	3910      	subs	r1, #16
    3c1e:	0a1b      	lsrs	r3, r3, #8
    3c20:	4298      	cmp	r0, r3
    3c22:	d301      	bcc.n	3c28 <__clzsi2+0x18>
    3c24:	0a00      	lsrs	r0, r0, #8
    3c26:	3908      	subs	r1, #8
    3c28:	091b      	lsrs	r3, r3, #4
    3c2a:	4298      	cmp	r0, r3
    3c2c:	d301      	bcc.n	3c32 <__clzsi2+0x22>
    3c2e:	0900      	lsrs	r0, r0, #4
    3c30:	3904      	subs	r1, #4
    3c32:	a202      	add	r2, pc, #8	; (adr r2, 3c3c <__clzsi2+0x2c>)
    3c34:	5c10      	ldrb	r0, [r2, r0]
    3c36:	1840      	adds	r0, r0, r1
    3c38:	4770      	bx	lr
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	02020304 	.word	0x02020304
    3c40:	01010101 	.word	0x01010101
	...

00003c4c <__libc_init_array>:
    3c4c:	4b0e      	ldr	r3, [pc, #56]	; (3c88 <__libc_init_array+0x3c>)
    3c4e:	b570      	push	{r4, r5, r6, lr}
    3c50:	2500      	movs	r5, #0
    3c52:	001e      	movs	r6, r3
    3c54:	4c0d      	ldr	r4, [pc, #52]	; (3c8c <__libc_init_array+0x40>)
    3c56:	1ae4      	subs	r4, r4, r3
    3c58:	10a4      	asrs	r4, r4, #2
    3c5a:	42a5      	cmp	r5, r4
    3c5c:	d004      	beq.n	3c68 <__libc_init_array+0x1c>
    3c5e:	00ab      	lsls	r3, r5, #2
    3c60:	58f3      	ldr	r3, [r6, r3]
    3c62:	4798      	blx	r3
    3c64:	3501      	adds	r5, #1
    3c66:	e7f8      	b.n	3c5a <__libc_init_array+0xe>
    3c68:	f001 fb0e 	bl	5288 <_init>
    3c6c:	4b08      	ldr	r3, [pc, #32]	; (3c90 <__libc_init_array+0x44>)
    3c6e:	2500      	movs	r5, #0
    3c70:	001e      	movs	r6, r3
    3c72:	4c08      	ldr	r4, [pc, #32]	; (3c94 <__libc_init_array+0x48>)
    3c74:	1ae4      	subs	r4, r4, r3
    3c76:	10a4      	asrs	r4, r4, #2
    3c78:	42a5      	cmp	r5, r4
    3c7a:	d004      	beq.n	3c86 <__libc_init_array+0x3a>
    3c7c:	00ab      	lsls	r3, r5, #2
    3c7e:	58f3      	ldr	r3, [r6, r3]
    3c80:	4798      	blx	r3
    3c82:	3501      	adds	r5, #1
    3c84:	e7f8      	b.n	3c78 <__libc_init_array+0x2c>
    3c86:	bd70      	pop	{r4, r5, r6, pc}
    3c88:	00005294 	.word	0x00005294
    3c8c:	00005294 	.word	0x00005294
    3c90:	00005294 	.word	0x00005294
    3c94:	00005298 	.word	0x00005298

00003c98 <memcpy>:
    3c98:	2300      	movs	r3, #0
    3c9a:	b510      	push	{r4, lr}
    3c9c:	429a      	cmp	r2, r3
    3c9e:	d003      	beq.n	3ca8 <memcpy+0x10>
    3ca0:	5ccc      	ldrb	r4, [r1, r3]
    3ca2:	54c4      	strb	r4, [r0, r3]
    3ca4:	3301      	adds	r3, #1
    3ca6:	e7f9      	b.n	3c9c <memcpy+0x4>
    3ca8:	bd10      	pop	{r4, pc}

00003caa <memset>:
    3caa:	0003      	movs	r3, r0
    3cac:	1882      	adds	r2, r0, r2
    3cae:	4293      	cmp	r3, r2
    3cb0:	d002      	beq.n	3cb8 <memset+0xe>
    3cb2:	7019      	strb	r1, [r3, #0]
    3cb4:	3301      	adds	r3, #1
    3cb6:	e7fa      	b.n	3cae <memset+0x4>
    3cb8:	4770      	bx	lr
	...

00003cbc <iprintf>:
    3cbc:	b40f      	push	{r0, r1, r2, r3}
    3cbe:	4b0b      	ldr	r3, [pc, #44]	; (3cec <iprintf+0x30>)
    3cc0:	b513      	push	{r0, r1, r4, lr}
    3cc2:	681c      	ldr	r4, [r3, #0]
    3cc4:	2c00      	cmp	r4, #0
    3cc6:	d005      	beq.n	3cd4 <iprintf+0x18>
    3cc8:	69a3      	ldr	r3, [r4, #24]
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d102      	bne.n	3cd4 <iprintf+0x18>
    3cce:	0020      	movs	r0, r4
    3cd0:	f000 faf6 	bl	42c0 <__sinit>
    3cd4:	ab05      	add	r3, sp, #20
    3cd6:	9a04      	ldr	r2, [sp, #16]
    3cd8:	68a1      	ldr	r1, [r4, #8]
    3cda:	0020      	movs	r0, r4
    3cdc:	9301      	str	r3, [sp, #4]
    3cde:	f000 fcb5 	bl	464c <_vfiprintf_r>
    3ce2:	bc16      	pop	{r1, r2, r4}
    3ce4:	bc08      	pop	{r3}
    3ce6:	b004      	add	sp, #16
    3ce8:	4718      	bx	r3
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	20000094 	.word	0x20000094

00003cf0 <_puts_r>:
    3cf0:	b570      	push	{r4, r5, r6, lr}
    3cf2:	0005      	movs	r5, r0
    3cf4:	000e      	movs	r6, r1
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d004      	beq.n	3d04 <_puts_r+0x14>
    3cfa:	6983      	ldr	r3, [r0, #24]
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	d101      	bne.n	3d04 <_puts_r+0x14>
    3d00:	f000 fade 	bl	42c0 <__sinit>
    3d04:	69ab      	ldr	r3, [r5, #24]
    3d06:	68ac      	ldr	r4, [r5, #8]
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d102      	bne.n	3d12 <_puts_r+0x22>
    3d0c:	0028      	movs	r0, r5
    3d0e:	f000 fad7 	bl	42c0 <__sinit>
    3d12:	4b25      	ldr	r3, [pc, #148]	; (3da8 <_puts_r+0xb8>)
    3d14:	429c      	cmp	r4, r3
    3d16:	d101      	bne.n	3d1c <_puts_r+0x2c>
    3d18:	686c      	ldr	r4, [r5, #4]
    3d1a:	e008      	b.n	3d2e <_puts_r+0x3e>
    3d1c:	4b23      	ldr	r3, [pc, #140]	; (3dac <_puts_r+0xbc>)
    3d1e:	429c      	cmp	r4, r3
    3d20:	d101      	bne.n	3d26 <_puts_r+0x36>
    3d22:	68ac      	ldr	r4, [r5, #8]
    3d24:	e003      	b.n	3d2e <_puts_r+0x3e>
    3d26:	4b22      	ldr	r3, [pc, #136]	; (3db0 <_puts_r+0xc0>)
    3d28:	429c      	cmp	r4, r3
    3d2a:	d100      	bne.n	3d2e <_puts_r+0x3e>
    3d2c:	68ec      	ldr	r4, [r5, #12]
    3d2e:	89a3      	ldrh	r3, [r4, #12]
    3d30:	071b      	lsls	r3, r3, #28
    3d32:	d502      	bpl.n	3d3a <_puts_r+0x4a>
    3d34:	6923      	ldr	r3, [r4, #16]
    3d36:	2b00      	cmp	r3, #0
    3d38:	d111      	bne.n	3d5e <_puts_r+0x6e>
    3d3a:	0021      	movs	r1, r4
    3d3c:	0028      	movs	r0, r5
    3d3e:	f000 f955 	bl	3fec <__swsetup_r>
    3d42:	2800      	cmp	r0, #0
    3d44:	d00b      	beq.n	3d5e <_puts_r+0x6e>
    3d46:	2001      	movs	r0, #1
    3d48:	4240      	negs	r0, r0
    3d4a:	e02b      	b.n	3da4 <_puts_r+0xb4>
    3d4c:	3b01      	subs	r3, #1
    3d4e:	3601      	adds	r6, #1
    3d50:	60a3      	str	r3, [r4, #8]
    3d52:	2b00      	cmp	r3, #0
    3d54:	db08      	blt.n	3d68 <_puts_r+0x78>
    3d56:	6823      	ldr	r3, [r4, #0]
    3d58:	1c5a      	adds	r2, r3, #1
    3d5a:	6022      	str	r2, [r4, #0]
    3d5c:	7019      	strb	r1, [r3, #0]
    3d5e:	7831      	ldrb	r1, [r6, #0]
    3d60:	68a3      	ldr	r3, [r4, #8]
    3d62:	2900      	cmp	r1, #0
    3d64:	d1f2      	bne.n	3d4c <_puts_r+0x5c>
    3d66:	e00b      	b.n	3d80 <_puts_r+0x90>
    3d68:	69a2      	ldr	r2, [r4, #24]
    3d6a:	4293      	cmp	r3, r2
    3d6c:	db01      	blt.n	3d72 <_puts_r+0x82>
    3d6e:	290a      	cmp	r1, #10
    3d70:	d1f1      	bne.n	3d56 <_puts_r+0x66>
    3d72:	0022      	movs	r2, r4
    3d74:	0028      	movs	r0, r5
    3d76:	f000 f8e1 	bl	3f3c <__swbuf_r>
    3d7a:	1c43      	adds	r3, r0, #1
    3d7c:	d1ef      	bne.n	3d5e <_puts_r+0x6e>
    3d7e:	e7e2      	b.n	3d46 <_puts_r+0x56>
    3d80:	3b01      	subs	r3, #1
    3d82:	60a3      	str	r3, [r4, #8]
    3d84:	2b00      	cmp	r3, #0
    3d86:	da08      	bge.n	3d9a <_puts_r+0xaa>
    3d88:	0022      	movs	r2, r4
    3d8a:	310a      	adds	r1, #10
    3d8c:	0028      	movs	r0, r5
    3d8e:	f000 f8d5 	bl	3f3c <__swbuf_r>
    3d92:	1c43      	adds	r3, r0, #1
    3d94:	d0d7      	beq.n	3d46 <_puts_r+0x56>
    3d96:	200a      	movs	r0, #10
    3d98:	e004      	b.n	3da4 <_puts_r+0xb4>
    3d9a:	200a      	movs	r0, #10
    3d9c:	6823      	ldr	r3, [r4, #0]
    3d9e:	1c5a      	adds	r2, r3, #1
    3da0:	6022      	str	r2, [r4, #0]
    3da2:	7018      	strb	r0, [r3, #0]
    3da4:	bd70      	pop	{r4, r5, r6, pc}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	000051f4 	.word	0x000051f4
    3dac:	00005214 	.word	0x00005214
    3db0:	00005234 	.word	0x00005234

00003db4 <puts>:
    3db4:	b510      	push	{r4, lr}
    3db6:	4b03      	ldr	r3, [pc, #12]	; (3dc4 <puts+0x10>)
    3db8:	0001      	movs	r1, r0
    3dba:	6818      	ldr	r0, [r3, #0]
    3dbc:	f7ff ff98 	bl	3cf0 <_puts_r>
    3dc0:	bd10      	pop	{r4, pc}
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	20000094 	.word	0x20000094

00003dc8 <setbuf>:
    3dc8:	424a      	negs	r2, r1
    3dca:	414a      	adcs	r2, r1
    3dcc:	2380      	movs	r3, #128	; 0x80
    3dce:	b510      	push	{r4, lr}
    3dd0:	0052      	lsls	r2, r2, #1
    3dd2:	00db      	lsls	r3, r3, #3
    3dd4:	f000 f802 	bl	3ddc <setvbuf>
    3dd8:	bd10      	pop	{r4, pc}
	...

00003ddc <setvbuf>:
    3ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dde:	001d      	movs	r5, r3
    3de0:	4b51      	ldr	r3, [pc, #324]	; (3f28 <setvbuf+0x14c>)
    3de2:	b085      	sub	sp, #20
    3de4:	681e      	ldr	r6, [r3, #0]
    3de6:	0004      	movs	r4, r0
    3de8:	000f      	movs	r7, r1
    3dea:	9200      	str	r2, [sp, #0]
    3dec:	2e00      	cmp	r6, #0
    3dee:	d005      	beq.n	3dfc <setvbuf+0x20>
    3df0:	69b3      	ldr	r3, [r6, #24]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d102      	bne.n	3dfc <setvbuf+0x20>
    3df6:	0030      	movs	r0, r6
    3df8:	f000 fa62 	bl	42c0 <__sinit>
    3dfc:	4b4b      	ldr	r3, [pc, #300]	; (3f2c <setvbuf+0x150>)
    3dfe:	429c      	cmp	r4, r3
    3e00:	d101      	bne.n	3e06 <setvbuf+0x2a>
    3e02:	6874      	ldr	r4, [r6, #4]
    3e04:	e008      	b.n	3e18 <setvbuf+0x3c>
    3e06:	4b4a      	ldr	r3, [pc, #296]	; (3f30 <setvbuf+0x154>)
    3e08:	429c      	cmp	r4, r3
    3e0a:	d101      	bne.n	3e10 <setvbuf+0x34>
    3e0c:	68b4      	ldr	r4, [r6, #8]
    3e0e:	e003      	b.n	3e18 <setvbuf+0x3c>
    3e10:	4b48      	ldr	r3, [pc, #288]	; (3f34 <setvbuf+0x158>)
    3e12:	429c      	cmp	r4, r3
    3e14:	d100      	bne.n	3e18 <setvbuf+0x3c>
    3e16:	68f4      	ldr	r4, [r6, #12]
    3e18:	9b00      	ldr	r3, [sp, #0]
    3e1a:	2b02      	cmp	r3, #2
    3e1c:	d005      	beq.n	3e2a <setvbuf+0x4e>
    3e1e:	2b01      	cmp	r3, #1
    3e20:	d900      	bls.n	3e24 <setvbuf+0x48>
    3e22:	e07c      	b.n	3f1e <setvbuf+0x142>
    3e24:	2d00      	cmp	r5, #0
    3e26:	da00      	bge.n	3e2a <setvbuf+0x4e>
    3e28:	e079      	b.n	3f1e <setvbuf+0x142>
    3e2a:	0021      	movs	r1, r4
    3e2c:	0030      	movs	r0, r6
    3e2e:	f000 f9d9 	bl	41e4 <_fflush_r>
    3e32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e34:	2900      	cmp	r1, #0
    3e36:	d008      	beq.n	3e4a <setvbuf+0x6e>
    3e38:	0023      	movs	r3, r4
    3e3a:	3344      	adds	r3, #68	; 0x44
    3e3c:	4299      	cmp	r1, r3
    3e3e:	d002      	beq.n	3e46 <setvbuf+0x6a>
    3e40:	0030      	movs	r0, r6
    3e42:	f000 fb3f 	bl	44c4 <_free_r>
    3e46:	2300      	movs	r3, #0
    3e48:	6363      	str	r3, [r4, #52]	; 0x34
    3e4a:	2300      	movs	r3, #0
    3e4c:	61a3      	str	r3, [r4, #24]
    3e4e:	6063      	str	r3, [r4, #4]
    3e50:	89a3      	ldrh	r3, [r4, #12]
    3e52:	061b      	lsls	r3, r3, #24
    3e54:	d503      	bpl.n	3e5e <setvbuf+0x82>
    3e56:	6921      	ldr	r1, [r4, #16]
    3e58:	0030      	movs	r0, r6
    3e5a:	f000 fb33 	bl	44c4 <_free_r>
    3e5e:	89a2      	ldrh	r2, [r4, #12]
    3e60:	4b35      	ldr	r3, [pc, #212]	; (3f38 <setvbuf+0x15c>)
    3e62:	4013      	ands	r3, r2
    3e64:	81a3      	strh	r3, [r4, #12]
    3e66:	9b00      	ldr	r3, [sp, #0]
    3e68:	2b02      	cmp	r3, #2
    3e6a:	d021      	beq.n	3eb0 <setvbuf+0xd4>
    3e6c:	ab03      	add	r3, sp, #12
    3e6e:	aa02      	add	r2, sp, #8
    3e70:	0021      	movs	r1, r4
    3e72:	0030      	movs	r0, r6
    3e74:	f000 fab8 	bl	43e8 <__swhatbuf_r>
    3e78:	89a3      	ldrh	r3, [r4, #12]
    3e7a:	4318      	orrs	r0, r3
    3e7c:	81a0      	strh	r0, [r4, #12]
    3e7e:	2d00      	cmp	r5, #0
    3e80:	d101      	bne.n	3e86 <setvbuf+0xaa>
    3e82:	9d02      	ldr	r5, [sp, #8]
    3e84:	e001      	b.n	3e8a <setvbuf+0xae>
    3e86:	2f00      	cmp	r7, #0
    3e88:	d125      	bne.n	3ed6 <setvbuf+0xfa>
    3e8a:	0028      	movs	r0, r5
    3e8c:	f000 fb10 	bl	44b0 <malloc>
    3e90:	9501      	str	r5, [sp, #4]
    3e92:	1e07      	subs	r7, r0, #0
    3e94:	d11a      	bne.n	3ecc <setvbuf+0xf0>
    3e96:	9b02      	ldr	r3, [sp, #8]
    3e98:	9301      	str	r3, [sp, #4]
    3e9a:	42ab      	cmp	r3, r5
    3e9c:	d102      	bne.n	3ea4 <setvbuf+0xc8>
    3e9e:	2001      	movs	r0, #1
    3ea0:	4240      	negs	r0, r0
    3ea2:	e006      	b.n	3eb2 <setvbuf+0xd6>
    3ea4:	9801      	ldr	r0, [sp, #4]
    3ea6:	f000 fb03 	bl	44b0 <malloc>
    3eaa:	1e07      	subs	r7, r0, #0
    3eac:	d10e      	bne.n	3ecc <setvbuf+0xf0>
    3eae:	e7f6      	b.n	3e9e <setvbuf+0xc2>
    3eb0:	2000      	movs	r0, #0
    3eb2:	2202      	movs	r2, #2
    3eb4:	89a3      	ldrh	r3, [r4, #12]
    3eb6:	4313      	orrs	r3, r2
    3eb8:	81a3      	strh	r3, [r4, #12]
    3eba:	2300      	movs	r3, #0
    3ebc:	60a3      	str	r3, [r4, #8]
    3ebe:	0023      	movs	r3, r4
    3ec0:	3347      	adds	r3, #71	; 0x47
    3ec2:	6023      	str	r3, [r4, #0]
    3ec4:	6123      	str	r3, [r4, #16]
    3ec6:	2301      	movs	r3, #1
    3ec8:	6163      	str	r3, [r4, #20]
    3eca:	e02a      	b.n	3f22 <setvbuf+0x146>
    3ecc:	2280      	movs	r2, #128	; 0x80
    3ece:	89a3      	ldrh	r3, [r4, #12]
    3ed0:	9d01      	ldr	r5, [sp, #4]
    3ed2:	4313      	orrs	r3, r2
    3ed4:	81a3      	strh	r3, [r4, #12]
    3ed6:	69b3      	ldr	r3, [r6, #24]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d102      	bne.n	3ee2 <setvbuf+0x106>
    3edc:	0030      	movs	r0, r6
    3ede:	f000 f9ef 	bl	42c0 <__sinit>
    3ee2:	9b00      	ldr	r3, [sp, #0]
    3ee4:	2b01      	cmp	r3, #1
    3ee6:	d103      	bne.n	3ef0 <setvbuf+0x114>
    3ee8:	89a3      	ldrh	r3, [r4, #12]
    3eea:	9a00      	ldr	r2, [sp, #0]
    3eec:	431a      	orrs	r2, r3
    3eee:	81a2      	strh	r2, [r4, #12]
    3ef0:	2308      	movs	r3, #8
    3ef2:	89a2      	ldrh	r2, [r4, #12]
    3ef4:	6027      	str	r7, [r4, #0]
    3ef6:	4013      	ands	r3, r2
    3ef8:	6127      	str	r7, [r4, #16]
    3efa:	6165      	str	r5, [r4, #20]
    3efc:	1e18      	subs	r0, r3, #0
    3efe:	d00c      	beq.n	3f1a <setvbuf+0x13e>
    3f00:	2301      	movs	r3, #1
    3f02:	401a      	ands	r2, r3
    3f04:	2300      	movs	r3, #0
    3f06:	1e10      	subs	r0, r2, #0
    3f08:	4298      	cmp	r0, r3
    3f0a:	d004      	beq.n	3f16 <setvbuf+0x13a>
    3f0c:	426d      	negs	r5, r5
    3f0e:	60a3      	str	r3, [r4, #8]
    3f10:	61a5      	str	r5, [r4, #24]
    3f12:	0018      	movs	r0, r3
    3f14:	e005      	b.n	3f22 <setvbuf+0x146>
    3f16:	60a5      	str	r5, [r4, #8]
    3f18:	e003      	b.n	3f22 <setvbuf+0x146>
    3f1a:	60a3      	str	r3, [r4, #8]
    3f1c:	e001      	b.n	3f22 <setvbuf+0x146>
    3f1e:	2001      	movs	r0, #1
    3f20:	4240      	negs	r0, r0
    3f22:	b005      	add	sp, #20
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	20000094 	.word	0x20000094
    3f2c:	000051f4 	.word	0x000051f4
    3f30:	00005214 	.word	0x00005214
    3f34:	00005234 	.word	0x00005234
    3f38:	fffff35c 	.word	0xfffff35c

00003f3c <__swbuf_r>:
    3f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f3e:	0005      	movs	r5, r0
    3f40:	000f      	movs	r7, r1
    3f42:	0014      	movs	r4, r2
    3f44:	2800      	cmp	r0, #0
    3f46:	d004      	beq.n	3f52 <__swbuf_r+0x16>
    3f48:	6983      	ldr	r3, [r0, #24]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d101      	bne.n	3f52 <__swbuf_r+0x16>
    3f4e:	f000 f9b7 	bl	42c0 <__sinit>
    3f52:	4b23      	ldr	r3, [pc, #140]	; (3fe0 <__swbuf_r+0xa4>)
    3f54:	429c      	cmp	r4, r3
    3f56:	d101      	bne.n	3f5c <__swbuf_r+0x20>
    3f58:	686c      	ldr	r4, [r5, #4]
    3f5a:	e008      	b.n	3f6e <__swbuf_r+0x32>
    3f5c:	4b21      	ldr	r3, [pc, #132]	; (3fe4 <__swbuf_r+0xa8>)
    3f5e:	429c      	cmp	r4, r3
    3f60:	d101      	bne.n	3f66 <__swbuf_r+0x2a>
    3f62:	68ac      	ldr	r4, [r5, #8]
    3f64:	e003      	b.n	3f6e <__swbuf_r+0x32>
    3f66:	4b20      	ldr	r3, [pc, #128]	; (3fe8 <__swbuf_r+0xac>)
    3f68:	429c      	cmp	r4, r3
    3f6a:	d100      	bne.n	3f6e <__swbuf_r+0x32>
    3f6c:	68ec      	ldr	r4, [r5, #12]
    3f6e:	69a3      	ldr	r3, [r4, #24]
    3f70:	60a3      	str	r3, [r4, #8]
    3f72:	89a3      	ldrh	r3, [r4, #12]
    3f74:	071b      	lsls	r3, r3, #28
    3f76:	d50a      	bpl.n	3f8e <__swbuf_r+0x52>
    3f78:	6923      	ldr	r3, [r4, #16]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d007      	beq.n	3f8e <__swbuf_r+0x52>
    3f7e:	6823      	ldr	r3, [r4, #0]
    3f80:	6922      	ldr	r2, [r4, #16]
    3f82:	b2fe      	uxtb	r6, r7
    3f84:	1a98      	subs	r0, r3, r2
    3f86:	6963      	ldr	r3, [r4, #20]
    3f88:	4298      	cmp	r0, r3
    3f8a:	db0f      	blt.n	3fac <__swbuf_r+0x70>
    3f8c:	e008      	b.n	3fa0 <__swbuf_r+0x64>
    3f8e:	0021      	movs	r1, r4
    3f90:	0028      	movs	r0, r5
    3f92:	f000 f82b 	bl	3fec <__swsetup_r>
    3f96:	2800      	cmp	r0, #0
    3f98:	d0f1      	beq.n	3f7e <__swbuf_r+0x42>
    3f9a:	2001      	movs	r0, #1
    3f9c:	4240      	negs	r0, r0
    3f9e:	e01d      	b.n	3fdc <__swbuf_r+0xa0>
    3fa0:	0021      	movs	r1, r4
    3fa2:	0028      	movs	r0, r5
    3fa4:	f000 f91e 	bl	41e4 <_fflush_r>
    3fa8:	2800      	cmp	r0, #0
    3faa:	d1f6      	bne.n	3f9a <__swbuf_r+0x5e>
    3fac:	68a3      	ldr	r3, [r4, #8]
    3fae:	3001      	adds	r0, #1
    3fb0:	3b01      	subs	r3, #1
    3fb2:	60a3      	str	r3, [r4, #8]
    3fb4:	6823      	ldr	r3, [r4, #0]
    3fb6:	1c5a      	adds	r2, r3, #1
    3fb8:	6022      	str	r2, [r4, #0]
    3fba:	701f      	strb	r7, [r3, #0]
    3fbc:	6963      	ldr	r3, [r4, #20]
    3fbe:	4298      	cmp	r0, r3
    3fc0:	d005      	beq.n	3fce <__swbuf_r+0x92>
    3fc2:	89a3      	ldrh	r3, [r4, #12]
    3fc4:	0030      	movs	r0, r6
    3fc6:	07db      	lsls	r3, r3, #31
    3fc8:	d508      	bpl.n	3fdc <__swbuf_r+0xa0>
    3fca:	2e0a      	cmp	r6, #10
    3fcc:	d106      	bne.n	3fdc <__swbuf_r+0xa0>
    3fce:	0021      	movs	r1, r4
    3fd0:	0028      	movs	r0, r5
    3fd2:	f000 f907 	bl	41e4 <_fflush_r>
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d1df      	bne.n	3f9a <__swbuf_r+0x5e>
    3fda:	0030      	movs	r0, r6
    3fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	000051f4 	.word	0x000051f4
    3fe4:	00005214 	.word	0x00005214
    3fe8:	00005234 	.word	0x00005234

00003fec <__swsetup_r>:
    3fec:	4b36      	ldr	r3, [pc, #216]	; (40c8 <__swsetup_r+0xdc>)
    3fee:	b570      	push	{r4, r5, r6, lr}
    3ff0:	681d      	ldr	r5, [r3, #0]
    3ff2:	0006      	movs	r6, r0
    3ff4:	000c      	movs	r4, r1
    3ff6:	2d00      	cmp	r5, #0
    3ff8:	d005      	beq.n	4006 <__swsetup_r+0x1a>
    3ffa:	69ab      	ldr	r3, [r5, #24]
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d102      	bne.n	4006 <__swsetup_r+0x1a>
    4000:	0028      	movs	r0, r5
    4002:	f000 f95d 	bl	42c0 <__sinit>
    4006:	4b31      	ldr	r3, [pc, #196]	; (40cc <__swsetup_r+0xe0>)
    4008:	429c      	cmp	r4, r3
    400a:	d101      	bne.n	4010 <__swsetup_r+0x24>
    400c:	686c      	ldr	r4, [r5, #4]
    400e:	e008      	b.n	4022 <__swsetup_r+0x36>
    4010:	4b2f      	ldr	r3, [pc, #188]	; (40d0 <__swsetup_r+0xe4>)
    4012:	429c      	cmp	r4, r3
    4014:	d101      	bne.n	401a <__swsetup_r+0x2e>
    4016:	68ac      	ldr	r4, [r5, #8]
    4018:	e003      	b.n	4022 <__swsetup_r+0x36>
    401a:	4b2e      	ldr	r3, [pc, #184]	; (40d4 <__swsetup_r+0xe8>)
    401c:	429c      	cmp	r4, r3
    401e:	d100      	bne.n	4022 <__swsetup_r+0x36>
    4020:	68ec      	ldr	r4, [r5, #12]
    4022:	220c      	movs	r2, #12
    4024:	5ea3      	ldrsh	r3, [r4, r2]
    4026:	b29a      	uxth	r2, r3
    4028:	0711      	lsls	r1, r2, #28
    402a:	d423      	bmi.n	4074 <__swsetup_r+0x88>
    402c:	06d1      	lsls	r1, r2, #27
    402e:	d407      	bmi.n	4040 <__swsetup_r+0x54>
    4030:	2209      	movs	r2, #9
    4032:	2001      	movs	r0, #1
    4034:	6032      	str	r2, [r6, #0]
    4036:	3237      	adds	r2, #55	; 0x37
    4038:	4313      	orrs	r3, r2
    403a:	81a3      	strh	r3, [r4, #12]
    403c:	4240      	negs	r0, r0
    403e:	e042      	b.n	40c6 <__swsetup_r+0xda>
    4040:	0753      	lsls	r3, r2, #29
    4042:	d513      	bpl.n	406c <__swsetup_r+0x80>
    4044:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4046:	2900      	cmp	r1, #0
    4048:	d008      	beq.n	405c <__swsetup_r+0x70>
    404a:	0023      	movs	r3, r4
    404c:	3344      	adds	r3, #68	; 0x44
    404e:	4299      	cmp	r1, r3
    4050:	d002      	beq.n	4058 <__swsetup_r+0x6c>
    4052:	0030      	movs	r0, r6
    4054:	f000 fa36 	bl	44c4 <_free_r>
    4058:	2300      	movs	r3, #0
    405a:	6363      	str	r3, [r4, #52]	; 0x34
    405c:	2224      	movs	r2, #36	; 0x24
    405e:	89a3      	ldrh	r3, [r4, #12]
    4060:	4393      	bics	r3, r2
    4062:	81a3      	strh	r3, [r4, #12]
    4064:	2300      	movs	r3, #0
    4066:	6063      	str	r3, [r4, #4]
    4068:	6923      	ldr	r3, [r4, #16]
    406a:	6023      	str	r3, [r4, #0]
    406c:	2208      	movs	r2, #8
    406e:	89a3      	ldrh	r3, [r4, #12]
    4070:	4313      	orrs	r3, r2
    4072:	81a3      	strh	r3, [r4, #12]
    4074:	6923      	ldr	r3, [r4, #16]
    4076:	2b00      	cmp	r3, #0
    4078:	d10b      	bne.n	4092 <__swsetup_r+0xa6>
    407a:	23a0      	movs	r3, #160	; 0xa0
    407c:	89a2      	ldrh	r2, [r4, #12]
    407e:	009b      	lsls	r3, r3, #2
    4080:	4013      	ands	r3, r2
    4082:	2280      	movs	r2, #128	; 0x80
    4084:	0092      	lsls	r2, r2, #2
    4086:	4293      	cmp	r3, r2
    4088:	d003      	beq.n	4092 <__swsetup_r+0xa6>
    408a:	0021      	movs	r1, r4
    408c:	0030      	movs	r0, r6
    408e:	f000 f9d1 	bl	4434 <__smakebuf_r>
    4092:	2301      	movs	r3, #1
    4094:	89a2      	ldrh	r2, [r4, #12]
    4096:	4013      	ands	r3, r2
    4098:	d005      	beq.n	40a6 <__swsetup_r+0xba>
    409a:	2300      	movs	r3, #0
    409c:	60a3      	str	r3, [r4, #8]
    409e:	6963      	ldr	r3, [r4, #20]
    40a0:	425b      	negs	r3, r3
    40a2:	61a3      	str	r3, [r4, #24]
    40a4:	e003      	b.n	40ae <__swsetup_r+0xc2>
    40a6:	0792      	lsls	r2, r2, #30
    40a8:	d400      	bmi.n	40ac <__swsetup_r+0xc0>
    40aa:	6963      	ldr	r3, [r4, #20]
    40ac:	60a3      	str	r3, [r4, #8]
    40ae:	2000      	movs	r0, #0
    40b0:	6923      	ldr	r3, [r4, #16]
    40b2:	4283      	cmp	r3, r0
    40b4:	d107      	bne.n	40c6 <__swsetup_r+0xda>
    40b6:	220c      	movs	r2, #12
    40b8:	5ea3      	ldrsh	r3, [r4, r2]
    40ba:	061a      	lsls	r2, r3, #24
    40bc:	d503      	bpl.n	40c6 <__swsetup_r+0xda>
    40be:	2240      	movs	r2, #64	; 0x40
    40c0:	4313      	orrs	r3, r2
    40c2:	81a3      	strh	r3, [r4, #12]
    40c4:	3801      	subs	r0, #1
    40c6:	bd70      	pop	{r4, r5, r6, pc}
    40c8:	20000094 	.word	0x20000094
    40cc:	000051f4 	.word	0x000051f4
    40d0:	00005214 	.word	0x00005214
    40d4:	00005234 	.word	0x00005234

000040d8 <__sflush_r>:
    40d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40da:	898a      	ldrh	r2, [r1, #12]
    40dc:	0005      	movs	r5, r0
    40de:	000c      	movs	r4, r1
    40e0:	0713      	lsls	r3, r2, #28
    40e2:	d45a      	bmi.n	419a <__sflush_r+0xc2>
    40e4:	684b      	ldr	r3, [r1, #4]
    40e6:	2b00      	cmp	r3, #0
    40e8:	dc02      	bgt.n	40f0 <__sflush_r+0x18>
    40ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    40ec:	2b00      	cmp	r3, #0
    40ee:	dd19      	ble.n	4124 <__sflush_r+0x4c>
    40f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    40f2:	2f00      	cmp	r7, #0
    40f4:	d016      	beq.n	4124 <__sflush_r+0x4c>
    40f6:	2300      	movs	r3, #0
    40f8:	682e      	ldr	r6, [r5, #0]
    40fa:	602b      	str	r3, [r5, #0]
    40fc:	2380      	movs	r3, #128	; 0x80
    40fe:	015b      	lsls	r3, r3, #5
    4100:	401a      	ands	r2, r3
    4102:	d001      	beq.n	4108 <__sflush_r+0x30>
    4104:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4106:	e014      	b.n	4132 <__sflush_r+0x5a>
    4108:	2301      	movs	r3, #1
    410a:	6a21      	ldr	r1, [r4, #32]
    410c:	0028      	movs	r0, r5
    410e:	47b8      	blx	r7
    4110:	1c43      	adds	r3, r0, #1
    4112:	d10e      	bne.n	4132 <__sflush_r+0x5a>
    4114:	682b      	ldr	r3, [r5, #0]
    4116:	2b00      	cmp	r3, #0
    4118:	d00b      	beq.n	4132 <__sflush_r+0x5a>
    411a:	2b1d      	cmp	r3, #29
    411c:	d001      	beq.n	4122 <__sflush_r+0x4a>
    411e:	2b16      	cmp	r3, #22
    4120:	d102      	bne.n	4128 <__sflush_r+0x50>
    4122:	602e      	str	r6, [r5, #0]
    4124:	2000      	movs	r0, #0
    4126:	e05a      	b.n	41de <__sflush_r+0x106>
    4128:	2240      	movs	r2, #64	; 0x40
    412a:	89a3      	ldrh	r3, [r4, #12]
    412c:	4313      	orrs	r3, r2
    412e:	81a3      	strh	r3, [r4, #12]
    4130:	e055      	b.n	41de <__sflush_r+0x106>
    4132:	89a3      	ldrh	r3, [r4, #12]
    4134:	075b      	lsls	r3, r3, #29
    4136:	d506      	bpl.n	4146 <__sflush_r+0x6e>
    4138:	6863      	ldr	r3, [r4, #4]
    413a:	1ac0      	subs	r0, r0, r3
    413c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    413e:	2b00      	cmp	r3, #0
    4140:	d001      	beq.n	4146 <__sflush_r+0x6e>
    4142:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4144:	1ac0      	subs	r0, r0, r3
    4146:	2300      	movs	r3, #0
    4148:	0002      	movs	r2, r0
    414a:	6a21      	ldr	r1, [r4, #32]
    414c:	0028      	movs	r0, r5
    414e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4150:	47b8      	blx	r7
    4152:	89a3      	ldrh	r3, [r4, #12]
    4154:	1c42      	adds	r2, r0, #1
    4156:	d106      	bne.n	4166 <__sflush_r+0x8e>
    4158:	6829      	ldr	r1, [r5, #0]
    415a:	291d      	cmp	r1, #29
    415c:	d83a      	bhi.n	41d4 <__sflush_r+0xfc>
    415e:	4a20      	ldr	r2, [pc, #128]	; (41e0 <__sflush_r+0x108>)
    4160:	40ca      	lsrs	r2, r1
    4162:	07d2      	lsls	r2, r2, #31
    4164:	d536      	bpl.n	41d4 <__sflush_r+0xfc>
    4166:	2200      	movs	r2, #0
    4168:	6062      	str	r2, [r4, #4]
    416a:	6922      	ldr	r2, [r4, #16]
    416c:	6022      	str	r2, [r4, #0]
    416e:	04db      	lsls	r3, r3, #19
    4170:	d505      	bpl.n	417e <__sflush_r+0xa6>
    4172:	1c43      	adds	r3, r0, #1
    4174:	d102      	bne.n	417c <__sflush_r+0xa4>
    4176:	682b      	ldr	r3, [r5, #0]
    4178:	2b00      	cmp	r3, #0
    417a:	d100      	bne.n	417e <__sflush_r+0xa6>
    417c:	6560      	str	r0, [r4, #84]	; 0x54
    417e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4180:	602e      	str	r6, [r5, #0]
    4182:	2900      	cmp	r1, #0
    4184:	d0ce      	beq.n	4124 <__sflush_r+0x4c>
    4186:	0023      	movs	r3, r4
    4188:	3344      	adds	r3, #68	; 0x44
    418a:	4299      	cmp	r1, r3
    418c:	d002      	beq.n	4194 <__sflush_r+0xbc>
    418e:	0028      	movs	r0, r5
    4190:	f000 f998 	bl	44c4 <_free_r>
    4194:	2000      	movs	r0, #0
    4196:	6360      	str	r0, [r4, #52]	; 0x34
    4198:	e021      	b.n	41de <__sflush_r+0x106>
    419a:	690f      	ldr	r7, [r1, #16]
    419c:	2f00      	cmp	r7, #0
    419e:	d0c1      	beq.n	4124 <__sflush_r+0x4c>
    41a0:	680b      	ldr	r3, [r1, #0]
    41a2:	600f      	str	r7, [r1, #0]
    41a4:	1bdb      	subs	r3, r3, r7
    41a6:	9301      	str	r3, [sp, #4]
    41a8:	2300      	movs	r3, #0
    41aa:	0792      	lsls	r2, r2, #30
    41ac:	d100      	bne.n	41b0 <__sflush_r+0xd8>
    41ae:	694b      	ldr	r3, [r1, #20]
    41b0:	60a3      	str	r3, [r4, #8]
    41b2:	e003      	b.n	41bc <__sflush_r+0xe4>
    41b4:	9b01      	ldr	r3, [sp, #4]
    41b6:	183f      	adds	r7, r7, r0
    41b8:	1a1b      	subs	r3, r3, r0
    41ba:	9301      	str	r3, [sp, #4]
    41bc:	9b01      	ldr	r3, [sp, #4]
    41be:	2b00      	cmp	r3, #0
    41c0:	ddb0      	ble.n	4124 <__sflush_r+0x4c>
    41c2:	9b01      	ldr	r3, [sp, #4]
    41c4:	003a      	movs	r2, r7
    41c6:	6a21      	ldr	r1, [r4, #32]
    41c8:	0028      	movs	r0, r5
    41ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    41cc:	47b0      	blx	r6
    41ce:	2800      	cmp	r0, #0
    41d0:	dcf0      	bgt.n	41b4 <__sflush_r+0xdc>
    41d2:	89a3      	ldrh	r3, [r4, #12]
    41d4:	2240      	movs	r2, #64	; 0x40
    41d6:	2001      	movs	r0, #1
    41d8:	4313      	orrs	r3, r2
    41da:	81a3      	strh	r3, [r4, #12]
    41dc:	4240      	negs	r0, r0
    41de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    41e0:	20400001 	.word	0x20400001

000041e4 <_fflush_r>:
    41e4:	690b      	ldr	r3, [r1, #16]
    41e6:	b570      	push	{r4, r5, r6, lr}
    41e8:	0005      	movs	r5, r0
    41ea:	000c      	movs	r4, r1
    41ec:	2b00      	cmp	r3, #0
    41ee:	d101      	bne.n	41f4 <_fflush_r+0x10>
    41f0:	2000      	movs	r0, #0
    41f2:	e01c      	b.n	422e <_fflush_r+0x4a>
    41f4:	2800      	cmp	r0, #0
    41f6:	d004      	beq.n	4202 <_fflush_r+0x1e>
    41f8:	6983      	ldr	r3, [r0, #24]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d101      	bne.n	4202 <_fflush_r+0x1e>
    41fe:	f000 f85f 	bl	42c0 <__sinit>
    4202:	4b0b      	ldr	r3, [pc, #44]	; (4230 <_fflush_r+0x4c>)
    4204:	429c      	cmp	r4, r3
    4206:	d101      	bne.n	420c <_fflush_r+0x28>
    4208:	686c      	ldr	r4, [r5, #4]
    420a:	e008      	b.n	421e <_fflush_r+0x3a>
    420c:	4b09      	ldr	r3, [pc, #36]	; (4234 <_fflush_r+0x50>)
    420e:	429c      	cmp	r4, r3
    4210:	d101      	bne.n	4216 <_fflush_r+0x32>
    4212:	68ac      	ldr	r4, [r5, #8]
    4214:	e003      	b.n	421e <_fflush_r+0x3a>
    4216:	4b08      	ldr	r3, [pc, #32]	; (4238 <_fflush_r+0x54>)
    4218:	429c      	cmp	r4, r3
    421a:	d100      	bne.n	421e <_fflush_r+0x3a>
    421c:	68ec      	ldr	r4, [r5, #12]
    421e:	220c      	movs	r2, #12
    4220:	5ea3      	ldrsh	r3, [r4, r2]
    4222:	2b00      	cmp	r3, #0
    4224:	d0e4      	beq.n	41f0 <_fflush_r+0xc>
    4226:	0021      	movs	r1, r4
    4228:	0028      	movs	r0, r5
    422a:	f7ff ff55 	bl	40d8 <__sflush_r>
    422e:	bd70      	pop	{r4, r5, r6, pc}
    4230:	000051f4 	.word	0x000051f4
    4234:	00005214 	.word	0x00005214
    4238:	00005234 	.word	0x00005234

0000423c <_cleanup_r>:
    423c:	b510      	push	{r4, lr}
    423e:	4902      	ldr	r1, [pc, #8]	; (4248 <_cleanup_r+0xc>)
    4240:	f000 f8b0 	bl	43a4 <_fwalk_reent>
    4244:	bd10      	pop	{r4, pc}
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	000041e5 	.word	0x000041e5

0000424c <std.isra.0>:
    424c:	2300      	movs	r3, #0
    424e:	b510      	push	{r4, lr}
    4250:	0004      	movs	r4, r0
    4252:	6003      	str	r3, [r0, #0]
    4254:	6043      	str	r3, [r0, #4]
    4256:	6083      	str	r3, [r0, #8]
    4258:	8181      	strh	r1, [r0, #12]
    425a:	6643      	str	r3, [r0, #100]	; 0x64
    425c:	81c2      	strh	r2, [r0, #14]
    425e:	6103      	str	r3, [r0, #16]
    4260:	6143      	str	r3, [r0, #20]
    4262:	6183      	str	r3, [r0, #24]
    4264:	0019      	movs	r1, r3
    4266:	2208      	movs	r2, #8
    4268:	305c      	adds	r0, #92	; 0x5c
    426a:	f7ff fd1e 	bl	3caa <memset>
    426e:	4b05      	ldr	r3, [pc, #20]	; (4284 <std.isra.0+0x38>)
    4270:	6224      	str	r4, [r4, #32]
    4272:	6263      	str	r3, [r4, #36]	; 0x24
    4274:	4b04      	ldr	r3, [pc, #16]	; (4288 <std.isra.0+0x3c>)
    4276:	62a3      	str	r3, [r4, #40]	; 0x28
    4278:	4b04      	ldr	r3, [pc, #16]	; (428c <std.isra.0+0x40>)
    427a:	62e3      	str	r3, [r4, #44]	; 0x2c
    427c:	4b04      	ldr	r3, [pc, #16]	; (4290 <std.isra.0+0x44>)
    427e:	6323      	str	r3, [r4, #48]	; 0x30
    4280:	bd10      	pop	{r4, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	00004bc9 	.word	0x00004bc9
    4288:	00004bf1 	.word	0x00004bf1
    428c:	00004c29 	.word	0x00004c29
    4290:	00004c55 	.word	0x00004c55

00004294 <__sfmoreglue>:
    4294:	b570      	push	{r4, r5, r6, lr}
    4296:	2568      	movs	r5, #104	; 0x68
    4298:	1e4b      	subs	r3, r1, #1
    429a:	435d      	muls	r5, r3
    429c:	000e      	movs	r6, r1
    429e:	0029      	movs	r1, r5
    42a0:	3174      	adds	r1, #116	; 0x74
    42a2:	f000 f955 	bl	4550 <_malloc_r>
    42a6:	1e04      	subs	r4, r0, #0
    42a8:	d008      	beq.n	42bc <__sfmoreglue+0x28>
    42aa:	2100      	movs	r1, #0
    42ac:	002a      	movs	r2, r5
    42ae:	6001      	str	r1, [r0, #0]
    42b0:	6046      	str	r6, [r0, #4]
    42b2:	300c      	adds	r0, #12
    42b4:	60a0      	str	r0, [r4, #8]
    42b6:	3268      	adds	r2, #104	; 0x68
    42b8:	f7ff fcf7 	bl	3caa <memset>
    42bc:	0020      	movs	r0, r4
    42be:	bd70      	pop	{r4, r5, r6, pc}

000042c0 <__sinit>:
    42c0:	6983      	ldr	r3, [r0, #24]
    42c2:	b513      	push	{r0, r1, r4, lr}
    42c4:	0004      	movs	r4, r0
    42c6:	2b00      	cmp	r3, #0
    42c8:	d128      	bne.n	431c <__sinit+0x5c>
    42ca:	6483      	str	r3, [r0, #72]	; 0x48
    42cc:	64c3      	str	r3, [r0, #76]	; 0x4c
    42ce:	6503      	str	r3, [r0, #80]	; 0x50
    42d0:	4b13      	ldr	r3, [pc, #76]	; (4320 <__sinit+0x60>)
    42d2:	4a14      	ldr	r2, [pc, #80]	; (4324 <__sinit+0x64>)
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	6282      	str	r2, [r0, #40]	; 0x28
    42d8:	9301      	str	r3, [sp, #4]
    42da:	4298      	cmp	r0, r3
    42dc:	d101      	bne.n	42e2 <__sinit+0x22>
    42de:	2301      	movs	r3, #1
    42e0:	6183      	str	r3, [r0, #24]
    42e2:	0020      	movs	r0, r4
    42e4:	f000 f820 	bl	4328 <__sfp>
    42e8:	6060      	str	r0, [r4, #4]
    42ea:	0020      	movs	r0, r4
    42ec:	f000 f81c 	bl	4328 <__sfp>
    42f0:	60a0      	str	r0, [r4, #8]
    42f2:	0020      	movs	r0, r4
    42f4:	f000 f818 	bl	4328 <__sfp>
    42f8:	2200      	movs	r2, #0
    42fa:	60e0      	str	r0, [r4, #12]
    42fc:	2104      	movs	r1, #4
    42fe:	6860      	ldr	r0, [r4, #4]
    4300:	f7ff ffa4 	bl	424c <std.isra.0>
    4304:	2201      	movs	r2, #1
    4306:	2109      	movs	r1, #9
    4308:	68a0      	ldr	r0, [r4, #8]
    430a:	f7ff ff9f 	bl	424c <std.isra.0>
    430e:	2202      	movs	r2, #2
    4310:	2112      	movs	r1, #18
    4312:	68e0      	ldr	r0, [r4, #12]
    4314:	f7ff ff9a 	bl	424c <std.isra.0>
    4318:	2301      	movs	r3, #1
    431a:	61a3      	str	r3, [r4, #24]
    431c:	bd13      	pop	{r0, r1, r4, pc}
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	000051f0 	.word	0x000051f0
    4324:	0000423d 	.word	0x0000423d

00004328 <__sfp>:
    4328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432a:	4b1d      	ldr	r3, [pc, #116]	; (43a0 <__sfp+0x78>)
    432c:	0006      	movs	r6, r0
    432e:	681d      	ldr	r5, [r3, #0]
    4330:	69ab      	ldr	r3, [r5, #24]
    4332:	2b00      	cmp	r3, #0
    4334:	d102      	bne.n	433c <__sfp+0x14>
    4336:	0028      	movs	r0, r5
    4338:	f7ff ffc2 	bl	42c0 <__sinit>
    433c:	3548      	adds	r5, #72	; 0x48
    433e:	68ac      	ldr	r4, [r5, #8]
    4340:	686b      	ldr	r3, [r5, #4]
    4342:	3b01      	subs	r3, #1
    4344:	d405      	bmi.n	4352 <__sfp+0x2a>
    4346:	220c      	movs	r2, #12
    4348:	5ea7      	ldrsh	r7, [r4, r2]
    434a:	2f00      	cmp	r7, #0
    434c:	d010      	beq.n	4370 <__sfp+0x48>
    434e:	3468      	adds	r4, #104	; 0x68
    4350:	e7f7      	b.n	4342 <__sfp+0x1a>
    4352:	682b      	ldr	r3, [r5, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	d001      	beq.n	435c <__sfp+0x34>
    4358:	682d      	ldr	r5, [r5, #0]
    435a:	e7f0      	b.n	433e <__sfp+0x16>
    435c:	2104      	movs	r1, #4
    435e:	0030      	movs	r0, r6
    4360:	f7ff ff98 	bl	4294 <__sfmoreglue>
    4364:	6028      	str	r0, [r5, #0]
    4366:	2800      	cmp	r0, #0
    4368:	d1f6      	bne.n	4358 <__sfp+0x30>
    436a:	230c      	movs	r3, #12
    436c:	6033      	str	r3, [r6, #0]
    436e:	e016      	b.n	439e <__sfp+0x76>
    4370:	2301      	movs	r3, #1
    4372:	0020      	movs	r0, r4
    4374:	425b      	negs	r3, r3
    4376:	81e3      	strh	r3, [r4, #14]
    4378:	3302      	adds	r3, #2
    437a:	81a3      	strh	r3, [r4, #12]
    437c:	6667      	str	r7, [r4, #100]	; 0x64
    437e:	6027      	str	r7, [r4, #0]
    4380:	60a7      	str	r7, [r4, #8]
    4382:	6067      	str	r7, [r4, #4]
    4384:	6127      	str	r7, [r4, #16]
    4386:	6167      	str	r7, [r4, #20]
    4388:	61a7      	str	r7, [r4, #24]
    438a:	305c      	adds	r0, #92	; 0x5c
    438c:	2208      	movs	r2, #8
    438e:	0039      	movs	r1, r7
    4390:	f7ff fc8b 	bl	3caa <memset>
    4394:	0020      	movs	r0, r4
    4396:	6367      	str	r7, [r4, #52]	; 0x34
    4398:	63a7      	str	r7, [r4, #56]	; 0x38
    439a:	64a7      	str	r7, [r4, #72]	; 0x48
    439c:	64e7      	str	r7, [r4, #76]	; 0x4c
    439e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43a0:	000051f0 	.word	0x000051f0

000043a4 <_fwalk_reent>:
    43a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    43a6:	0004      	movs	r4, r0
    43a8:	0007      	movs	r7, r0
    43aa:	2600      	movs	r6, #0
    43ac:	9101      	str	r1, [sp, #4]
    43ae:	3448      	adds	r4, #72	; 0x48
    43b0:	2c00      	cmp	r4, #0
    43b2:	d016      	beq.n	43e2 <_fwalk_reent+0x3e>
    43b4:	6863      	ldr	r3, [r4, #4]
    43b6:	68a5      	ldr	r5, [r4, #8]
    43b8:	9300      	str	r3, [sp, #0]
    43ba:	9b00      	ldr	r3, [sp, #0]
    43bc:	3b01      	subs	r3, #1
    43be:	9300      	str	r3, [sp, #0]
    43c0:	d40d      	bmi.n	43de <_fwalk_reent+0x3a>
    43c2:	89ab      	ldrh	r3, [r5, #12]
    43c4:	2b01      	cmp	r3, #1
    43c6:	d908      	bls.n	43da <_fwalk_reent+0x36>
    43c8:	220e      	movs	r2, #14
    43ca:	5eab      	ldrsh	r3, [r5, r2]
    43cc:	3301      	adds	r3, #1
    43ce:	d004      	beq.n	43da <_fwalk_reent+0x36>
    43d0:	0029      	movs	r1, r5
    43d2:	0038      	movs	r0, r7
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	4798      	blx	r3
    43d8:	4306      	orrs	r6, r0
    43da:	3568      	adds	r5, #104	; 0x68
    43dc:	e7ed      	b.n	43ba <_fwalk_reent+0x16>
    43de:	6824      	ldr	r4, [r4, #0]
    43e0:	e7e6      	b.n	43b0 <_fwalk_reent+0xc>
    43e2:	0030      	movs	r0, r6
    43e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000043e8 <__swhatbuf_r>:
    43e8:	b570      	push	{r4, r5, r6, lr}
    43ea:	000e      	movs	r6, r1
    43ec:	001d      	movs	r5, r3
    43ee:	230e      	movs	r3, #14
    43f0:	5ec9      	ldrsh	r1, [r1, r3]
    43f2:	b090      	sub	sp, #64	; 0x40
    43f4:	0014      	movs	r4, r2
    43f6:	2900      	cmp	r1, #0
    43f8:	da06      	bge.n	4408 <__swhatbuf_r+0x20>
    43fa:	2300      	movs	r3, #0
    43fc:	602b      	str	r3, [r5, #0]
    43fe:	89b3      	ldrh	r3, [r6, #12]
    4400:	061b      	lsls	r3, r3, #24
    4402:	d50f      	bpl.n	4424 <__swhatbuf_r+0x3c>
    4404:	2340      	movs	r3, #64	; 0x40
    4406:	e00f      	b.n	4428 <__swhatbuf_r+0x40>
    4408:	aa01      	add	r2, sp, #4
    440a:	f000 fc4f 	bl	4cac <_fstat_r>
    440e:	2800      	cmp	r0, #0
    4410:	dbf3      	blt.n	43fa <__swhatbuf_r+0x12>
    4412:	23f0      	movs	r3, #240	; 0xf0
    4414:	9a02      	ldr	r2, [sp, #8]
    4416:	021b      	lsls	r3, r3, #8
    4418:	4013      	ands	r3, r2
    441a:	4a05      	ldr	r2, [pc, #20]	; (4430 <__swhatbuf_r+0x48>)
    441c:	189b      	adds	r3, r3, r2
    441e:	425a      	negs	r2, r3
    4420:	4153      	adcs	r3, r2
    4422:	602b      	str	r3, [r5, #0]
    4424:	2380      	movs	r3, #128	; 0x80
    4426:	00db      	lsls	r3, r3, #3
    4428:	2000      	movs	r0, #0
    442a:	6023      	str	r3, [r4, #0]
    442c:	b010      	add	sp, #64	; 0x40
    442e:	bd70      	pop	{r4, r5, r6, pc}
    4430:	ffffe000 	.word	0xffffe000

00004434 <__smakebuf_r>:
    4434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4436:	2602      	movs	r6, #2
    4438:	898b      	ldrh	r3, [r1, #12]
    443a:	0005      	movs	r5, r0
    443c:	000c      	movs	r4, r1
    443e:	4233      	tst	r3, r6
    4440:	d110      	bne.n	4464 <__smakebuf_r+0x30>
    4442:	ab01      	add	r3, sp, #4
    4444:	466a      	mov	r2, sp
    4446:	f7ff ffcf 	bl	43e8 <__swhatbuf_r>
    444a:	9900      	ldr	r1, [sp, #0]
    444c:	0007      	movs	r7, r0
    444e:	0028      	movs	r0, r5
    4450:	f000 f87e 	bl	4550 <_malloc_r>
    4454:	2800      	cmp	r0, #0
    4456:	d10c      	bne.n	4472 <__smakebuf_r+0x3e>
    4458:	220c      	movs	r2, #12
    445a:	5ea3      	ldrsh	r3, [r4, r2]
    445c:	059a      	lsls	r2, r3, #22
    445e:	d423      	bmi.n	44a8 <__smakebuf_r+0x74>
    4460:	4333      	orrs	r3, r6
    4462:	81a3      	strh	r3, [r4, #12]
    4464:	0023      	movs	r3, r4
    4466:	3347      	adds	r3, #71	; 0x47
    4468:	6023      	str	r3, [r4, #0]
    446a:	6123      	str	r3, [r4, #16]
    446c:	2301      	movs	r3, #1
    446e:	6163      	str	r3, [r4, #20]
    4470:	e01a      	b.n	44a8 <__smakebuf_r+0x74>
    4472:	2280      	movs	r2, #128	; 0x80
    4474:	4b0d      	ldr	r3, [pc, #52]	; (44ac <__smakebuf_r+0x78>)
    4476:	62ab      	str	r3, [r5, #40]	; 0x28
    4478:	89a3      	ldrh	r3, [r4, #12]
    447a:	6020      	str	r0, [r4, #0]
    447c:	4313      	orrs	r3, r2
    447e:	81a3      	strh	r3, [r4, #12]
    4480:	9b00      	ldr	r3, [sp, #0]
    4482:	6120      	str	r0, [r4, #16]
    4484:	6163      	str	r3, [r4, #20]
    4486:	9b01      	ldr	r3, [sp, #4]
    4488:	2b00      	cmp	r3, #0
    448a:	d00a      	beq.n	44a2 <__smakebuf_r+0x6e>
    448c:	230e      	movs	r3, #14
    448e:	5ee1      	ldrsh	r1, [r4, r3]
    4490:	0028      	movs	r0, r5
    4492:	f000 fc1d 	bl	4cd0 <_isatty_r>
    4496:	2800      	cmp	r0, #0
    4498:	d003      	beq.n	44a2 <__smakebuf_r+0x6e>
    449a:	2201      	movs	r2, #1
    449c:	89a3      	ldrh	r3, [r4, #12]
    449e:	4313      	orrs	r3, r2
    44a0:	81a3      	strh	r3, [r4, #12]
    44a2:	89a3      	ldrh	r3, [r4, #12]
    44a4:	431f      	orrs	r7, r3
    44a6:	81a7      	strh	r7, [r4, #12]
    44a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	0000423d 	.word	0x0000423d

000044b0 <malloc>:
    44b0:	b510      	push	{r4, lr}
    44b2:	4b03      	ldr	r3, [pc, #12]	; (44c0 <malloc+0x10>)
    44b4:	0001      	movs	r1, r0
    44b6:	6818      	ldr	r0, [r3, #0]
    44b8:	f000 f84a 	bl	4550 <_malloc_r>
    44bc:	bd10      	pop	{r4, pc}
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	20000094 	.word	0x20000094

000044c4 <_free_r>:
    44c4:	b530      	push	{r4, r5, lr}
    44c6:	2900      	cmp	r1, #0
    44c8:	d03e      	beq.n	4548 <_free_r+0x84>
    44ca:	3904      	subs	r1, #4
    44cc:	680b      	ldr	r3, [r1, #0]
    44ce:	2b00      	cmp	r3, #0
    44d0:	da00      	bge.n	44d4 <_free_r+0x10>
    44d2:	18c9      	adds	r1, r1, r3
    44d4:	4a1d      	ldr	r2, [pc, #116]	; (454c <_free_r+0x88>)
    44d6:	6813      	ldr	r3, [r2, #0]
    44d8:	0014      	movs	r4, r2
    44da:	2b00      	cmp	r3, #0
    44dc:	d102      	bne.n	44e4 <_free_r+0x20>
    44de:	604b      	str	r3, [r1, #4]
    44e0:	6011      	str	r1, [r2, #0]
    44e2:	e031      	b.n	4548 <_free_r+0x84>
    44e4:	428b      	cmp	r3, r1
    44e6:	d90d      	bls.n	4504 <_free_r+0x40>
    44e8:	680a      	ldr	r2, [r1, #0]
    44ea:	1888      	adds	r0, r1, r2
    44ec:	4283      	cmp	r3, r0
    44ee:	d103      	bne.n	44f8 <_free_r+0x34>
    44f0:	6818      	ldr	r0, [r3, #0]
    44f2:	685b      	ldr	r3, [r3, #4]
    44f4:	1882      	adds	r2, r0, r2
    44f6:	600a      	str	r2, [r1, #0]
    44f8:	604b      	str	r3, [r1, #4]
    44fa:	6021      	str	r1, [r4, #0]
    44fc:	e024      	b.n	4548 <_free_r+0x84>
    44fe:	428a      	cmp	r2, r1
    4500:	d803      	bhi.n	450a <_free_r+0x46>
    4502:	0013      	movs	r3, r2
    4504:	685a      	ldr	r2, [r3, #4]
    4506:	2a00      	cmp	r2, #0
    4508:	d1f9      	bne.n	44fe <_free_r+0x3a>
    450a:	681d      	ldr	r5, [r3, #0]
    450c:	195c      	adds	r4, r3, r5
    450e:	428c      	cmp	r4, r1
    4510:	d10b      	bne.n	452a <_free_r+0x66>
    4512:	6809      	ldr	r1, [r1, #0]
    4514:	1869      	adds	r1, r5, r1
    4516:	1858      	adds	r0, r3, r1
    4518:	6019      	str	r1, [r3, #0]
    451a:	4282      	cmp	r2, r0
    451c:	d114      	bne.n	4548 <_free_r+0x84>
    451e:	6810      	ldr	r0, [r2, #0]
    4520:	6852      	ldr	r2, [r2, #4]
    4522:	1841      	adds	r1, r0, r1
    4524:	6019      	str	r1, [r3, #0]
    4526:	605a      	str	r2, [r3, #4]
    4528:	e00e      	b.n	4548 <_free_r+0x84>
    452a:	428c      	cmp	r4, r1
    452c:	d902      	bls.n	4534 <_free_r+0x70>
    452e:	230c      	movs	r3, #12
    4530:	6003      	str	r3, [r0, #0]
    4532:	e009      	b.n	4548 <_free_r+0x84>
    4534:	6808      	ldr	r0, [r1, #0]
    4536:	180c      	adds	r4, r1, r0
    4538:	42a2      	cmp	r2, r4
    453a:	d103      	bne.n	4544 <_free_r+0x80>
    453c:	6814      	ldr	r4, [r2, #0]
    453e:	6852      	ldr	r2, [r2, #4]
    4540:	1820      	adds	r0, r4, r0
    4542:	6008      	str	r0, [r1, #0]
    4544:	604a      	str	r2, [r1, #4]
    4546:	6059      	str	r1, [r3, #4]
    4548:	bd30      	pop	{r4, r5, pc}
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	20000610 	.word	0x20000610

00004550 <_malloc_r>:
    4550:	2303      	movs	r3, #3
    4552:	b570      	push	{r4, r5, r6, lr}
    4554:	1ccd      	adds	r5, r1, #3
    4556:	439d      	bics	r5, r3
    4558:	3508      	adds	r5, #8
    455a:	0006      	movs	r6, r0
    455c:	2d0c      	cmp	r5, #12
    455e:	d201      	bcs.n	4564 <_malloc_r+0x14>
    4560:	250c      	movs	r5, #12
    4562:	e005      	b.n	4570 <_malloc_r+0x20>
    4564:	2d00      	cmp	r5, #0
    4566:	da03      	bge.n	4570 <_malloc_r+0x20>
    4568:	230c      	movs	r3, #12
    456a:	2000      	movs	r0, #0
    456c:	6033      	str	r3, [r6, #0]
    456e:	e040      	b.n	45f2 <_malloc_r+0xa2>
    4570:	42a9      	cmp	r1, r5
    4572:	d8f9      	bhi.n	4568 <_malloc_r+0x18>
    4574:	4b1f      	ldr	r3, [pc, #124]	; (45f4 <_malloc_r+0xa4>)
    4576:	681c      	ldr	r4, [r3, #0]
    4578:	001a      	movs	r2, r3
    457a:	0021      	movs	r1, r4
    457c:	2900      	cmp	r1, #0
    457e:	d013      	beq.n	45a8 <_malloc_r+0x58>
    4580:	680b      	ldr	r3, [r1, #0]
    4582:	1b5b      	subs	r3, r3, r5
    4584:	d40d      	bmi.n	45a2 <_malloc_r+0x52>
    4586:	2b0b      	cmp	r3, #11
    4588:	d902      	bls.n	4590 <_malloc_r+0x40>
    458a:	600b      	str	r3, [r1, #0]
    458c:	18cc      	adds	r4, r1, r3
    458e:	e01e      	b.n	45ce <_malloc_r+0x7e>
    4590:	428c      	cmp	r4, r1
    4592:	d102      	bne.n	459a <_malloc_r+0x4a>
    4594:	6863      	ldr	r3, [r4, #4]
    4596:	6013      	str	r3, [r2, #0]
    4598:	e01a      	b.n	45d0 <_malloc_r+0x80>
    459a:	684b      	ldr	r3, [r1, #4]
    459c:	6063      	str	r3, [r4, #4]
    459e:	000c      	movs	r4, r1
    45a0:	e016      	b.n	45d0 <_malloc_r+0x80>
    45a2:	000c      	movs	r4, r1
    45a4:	6849      	ldr	r1, [r1, #4]
    45a6:	e7e9      	b.n	457c <_malloc_r+0x2c>
    45a8:	4c13      	ldr	r4, [pc, #76]	; (45f8 <_malloc_r+0xa8>)
    45aa:	6823      	ldr	r3, [r4, #0]
    45ac:	2b00      	cmp	r3, #0
    45ae:	d103      	bne.n	45b8 <_malloc_r+0x68>
    45b0:	0030      	movs	r0, r6
    45b2:	f000 faf7 	bl	4ba4 <_sbrk_r>
    45b6:	6020      	str	r0, [r4, #0]
    45b8:	0029      	movs	r1, r5
    45ba:	0030      	movs	r0, r6
    45bc:	f000 faf2 	bl	4ba4 <_sbrk_r>
    45c0:	1c43      	adds	r3, r0, #1
    45c2:	d0d1      	beq.n	4568 <_malloc_r+0x18>
    45c4:	2303      	movs	r3, #3
    45c6:	1cc4      	adds	r4, r0, #3
    45c8:	439c      	bics	r4, r3
    45ca:	42a0      	cmp	r0, r4
    45cc:	d10a      	bne.n	45e4 <_malloc_r+0x94>
    45ce:	6025      	str	r5, [r4, #0]
    45d0:	0020      	movs	r0, r4
    45d2:	2207      	movs	r2, #7
    45d4:	300b      	adds	r0, #11
    45d6:	1d23      	adds	r3, r4, #4
    45d8:	4390      	bics	r0, r2
    45da:	1ac3      	subs	r3, r0, r3
    45dc:	d009      	beq.n	45f2 <_malloc_r+0xa2>
    45de:	425a      	negs	r2, r3
    45e0:	50e2      	str	r2, [r4, r3]
    45e2:	e006      	b.n	45f2 <_malloc_r+0xa2>
    45e4:	1a21      	subs	r1, r4, r0
    45e6:	0030      	movs	r0, r6
    45e8:	f000 fadc 	bl	4ba4 <_sbrk_r>
    45ec:	1c43      	adds	r3, r0, #1
    45ee:	d1ee      	bne.n	45ce <_malloc_r+0x7e>
    45f0:	e7ba      	b.n	4568 <_malloc_r+0x18>
    45f2:	bd70      	pop	{r4, r5, r6, pc}
    45f4:	20000610 	.word	0x20000610
    45f8:	2000060c 	.word	0x2000060c

000045fc <__sfputc_r>:
    45fc:	6893      	ldr	r3, [r2, #8]
    45fe:	b510      	push	{r4, lr}
    4600:	3b01      	subs	r3, #1
    4602:	6093      	str	r3, [r2, #8]
    4604:	2b00      	cmp	r3, #0
    4606:	da05      	bge.n	4614 <__sfputc_r+0x18>
    4608:	6994      	ldr	r4, [r2, #24]
    460a:	42a3      	cmp	r3, r4
    460c:	db08      	blt.n	4620 <__sfputc_r+0x24>
    460e:	b2cb      	uxtb	r3, r1
    4610:	2b0a      	cmp	r3, #10
    4612:	d005      	beq.n	4620 <__sfputc_r+0x24>
    4614:	6813      	ldr	r3, [r2, #0]
    4616:	1c58      	adds	r0, r3, #1
    4618:	6010      	str	r0, [r2, #0]
    461a:	7019      	strb	r1, [r3, #0]
    461c:	b2c8      	uxtb	r0, r1
    461e:	e001      	b.n	4624 <__sfputc_r+0x28>
    4620:	f7ff fc8c 	bl	3f3c <__swbuf_r>
    4624:	bd10      	pop	{r4, pc}

00004626 <__sfputs_r>:
    4626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4628:	0006      	movs	r6, r0
    462a:	000f      	movs	r7, r1
    462c:	0014      	movs	r4, r2
    462e:	18d5      	adds	r5, r2, r3
    4630:	42ac      	cmp	r4, r5
    4632:	d008      	beq.n	4646 <__sfputs_r+0x20>
    4634:	7821      	ldrb	r1, [r4, #0]
    4636:	003a      	movs	r2, r7
    4638:	0030      	movs	r0, r6
    463a:	f7ff ffdf 	bl	45fc <__sfputc_r>
    463e:	3401      	adds	r4, #1
    4640:	1c43      	adds	r3, r0, #1
    4642:	d1f5      	bne.n	4630 <__sfputs_r+0xa>
    4644:	e000      	b.n	4648 <__sfputs_r+0x22>
    4646:	2000      	movs	r0, #0
    4648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000464c <_vfiprintf_r>:
    464c:	b5f0      	push	{r4, r5, r6, r7, lr}
    464e:	b09f      	sub	sp, #124	; 0x7c
    4650:	0006      	movs	r6, r0
    4652:	000f      	movs	r7, r1
    4654:	9202      	str	r2, [sp, #8]
    4656:	9305      	str	r3, [sp, #20]
    4658:	2800      	cmp	r0, #0
    465a:	d004      	beq.n	4666 <_vfiprintf_r+0x1a>
    465c:	6983      	ldr	r3, [r0, #24]
    465e:	2b00      	cmp	r3, #0
    4660:	d101      	bne.n	4666 <_vfiprintf_r+0x1a>
    4662:	f7ff fe2d 	bl	42c0 <__sinit>
    4666:	4b7f      	ldr	r3, [pc, #508]	; (4864 <_vfiprintf_r+0x218>)
    4668:	429f      	cmp	r7, r3
    466a:	d101      	bne.n	4670 <_vfiprintf_r+0x24>
    466c:	6877      	ldr	r7, [r6, #4]
    466e:	e008      	b.n	4682 <_vfiprintf_r+0x36>
    4670:	4b7d      	ldr	r3, [pc, #500]	; (4868 <_vfiprintf_r+0x21c>)
    4672:	429f      	cmp	r7, r3
    4674:	d101      	bne.n	467a <_vfiprintf_r+0x2e>
    4676:	68b7      	ldr	r7, [r6, #8]
    4678:	e003      	b.n	4682 <_vfiprintf_r+0x36>
    467a:	4b7c      	ldr	r3, [pc, #496]	; (486c <_vfiprintf_r+0x220>)
    467c:	429f      	cmp	r7, r3
    467e:	d100      	bne.n	4682 <_vfiprintf_r+0x36>
    4680:	68f7      	ldr	r7, [r6, #12]
    4682:	89bb      	ldrh	r3, [r7, #12]
    4684:	071b      	lsls	r3, r3, #28
    4686:	d50a      	bpl.n	469e <_vfiprintf_r+0x52>
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	2b00      	cmp	r3, #0
    468c:	d007      	beq.n	469e <_vfiprintf_r+0x52>
    468e:	2300      	movs	r3, #0
    4690:	ad06      	add	r5, sp, #24
    4692:	616b      	str	r3, [r5, #20]
    4694:	3320      	adds	r3, #32
    4696:	766b      	strb	r3, [r5, #25]
    4698:	3310      	adds	r3, #16
    469a:	76ab      	strb	r3, [r5, #26]
    469c:	e03d      	b.n	471a <_vfiprintf_r+0xce>
    469e:	0039      	movs	r1, r7
    46a0:	0030      	movs	r0, r6
    46a2:	f7ff fca3 	bl	3fec <__swsetup_r>
    46a6:	2800      	cmp	r0, #0
    46a8:	d0f1      	beq.n	468e <_vfiprintf_r+0x42>
    46aa:	2001      	movs	r0, #1
    46ac:	4240      	negs	r0, r0
    46ae:	e0d6      	b.n	485e <_vfiprintf_r+0x212>
    46b0:	9a05      	ldr	r2, [sp, #20]
    46b2:	1d11      	adds	r1, r2, #4
    46b4:	6812      	ldr	r2, [r2, #0]
    46b6:	9105      	str	r1, [sp, #20]
    46b8:	2a00      	cmp	r2, #0
    46ba:	da00      	bge.n	46be <_vfiprintf_r+0x72>
    46bc:	e07f      	b.n	47be <_vfiprintf_r+0x172>
    46be:	9209      	str	r2, [sp, #36]	; 0x24
    46c0:	3401      	adds	r4, #1
    46c2:	7823      	ldrb	r3, [r4, #0]
    46c4:	2b2e      	cmp	r3, #46	; 0x2e
    46c6:	d100      	bne.n	46ca <_vfiprintf_r+0x7e>
    46c8:	e08d      	b.n	47e6 <_vfiprintf_r+0x19a>
    46ca:	7821      	ldrb	r1, [r4, #0]
    46cc:	2203      	movs	r2, #3
    46ce:	4868      	ldr	r0, [pc, #416]	; (4870 <_vfiprintf_r+0x224>)
    46d0:	f000 fb24 	bl	4d1c <memchr>
    46d4:	2800      	cmp	r0, #0
    46d6:	d007      	beq.n	46e8 <_vfiprintf_r+0x9c>
    46d8:	4b65      	ldr	r3, [pc, #404]	; (4870 <_vfiprintf_r+0x224>)
    46da:	682a      	ldr	r2, [r5, #0]
    46dc:	1ac0      	subs	r0, r0, r3
    46de:	2340      	movs	r3, #64	; 0x40
    46e0:	4083      	lsls	r3, r0
    46e2:	4313      	orrs	r3, r2
    46e4:	602b      	str	r3, [r5, #0]
    46e6:	3401      	adds	r4, #1
    46e8:	7821      	ldrb	r1, [r4, #0]
    46ea:	1c63      	adds	r3, r4, #1
    46ec:	2206      	movs	r2, #6
    46ee:	4861      	ldr	r0, [pc, #388]	; (4874 <_vfiprintf_r+0x228>)
    46f0:	9302      	str	r3, [sp, #8]
    46f2:	7629      	strb	r1, [r5, #24]
    46f4:	f000 fb12 	bl	4d1c <memchr>
    46f8:	2800      	cmp	r0, #0
    46fa:	d100      	bne.n	46fe <_vfiprintf_r+0xb2>
    46fc:	e09d      	b.n	483a <_vfiprintf_r+0x1ee>
    46fe:	4b5e      	ldr	r3, [pc, #376]	; (4878 <_vfiprintf_r+0x22c>)
    4700:	2b00      	cmp	r3, #0
    4702:	d000      	beq.n	4706 <_vfiprintf_r+0xba>
    4704:	e090      	b.n	4828 <_vfiprintf_r+0x1dc>
    4706:	2207      	movs	r2, #7
    4708:	9b05      	ldr	r3, [sp, #20]
    470a:	3307      	adds	r3, #7
    470c:	4393      	bics	r3, r2
    470e:	3308      	adds	r3, #8
    4710:	9305      	str	r3, [sp, #20]
    4712:	696b      	ldr	r3, [r5, #20]
    4714:	9a03      	ldr	r2, [sp, #12]
    4716:	189b      	adds	r3, r3, r2
    4718:	616b      	str	r3, [r5, #20]
    471a:	9c02      	ldr	r4, [sp, #8]
    471c:	7823      	ldrb	r3, [r4, #0]
    471e:	2b00      	cmp	r3, #0
    4720:	d104      	bne.n	472c <_vfiprintf_r+0xe0>
    4722:	9b02      	ldr	r3, [sp, #8]
    4724:	1ae3      	subs	r3, r4, r3
    4726:	9304      	str	r3, [sp, #16]
    4728:	d012      	beq.n	4750 <_vfiprintf_r+0x104>
    472a:	e003      	b.n	4734 <_vfiprintf_r+0xe8>
    472c:	2b25      	cmp	r3, #37	; 0x25
    472e:	d0f8      	beq.n	4722 <_vfiprintf_r+0xd6>
    4730:	3401      	adds	r4, #1
    4732:	e7f3      	b.n	471c <_vfiprintf_r+0xd0>
    4734:	9b04      	ldr	r3, [sp, #16]
    4736:	9a02      	ldr	r2, [sp, #8]
    4738:	0039      	movs	r1, r7
    473a:	0030      	movs	r0, r6
    473c:	f7ff ff73 	bl	4626 <__sfputs_r>
    4740:	1c43      	adds	r3, r0, #1
    4742:	d100      	bne.n	4746 <_vfiprintf_r+0xfa>
    4744:	e086      	b.n	4854 <_vfiprintf_r+0x208>
    4746:	696a      	ldr	r2, [r5, #20]
    4748:	9b04      	ldr	r3, [sp, #16]
    474a:	4694      	mov	ip, r2
    474c:	4463      	add	r3, ip
    474e:	616b      	str	r3, [r5, #20]
    4750:	7823      	ldrb	r3, [r4, #0]
    4752:	2b00      	cmp	r3, #0
    4754:	d07e      	beq.n	4854 <_vfiprintf_r+0x208>
    4756:	2201      	movs	r2, #1
    4758:	2300      	movs	r3, #0
    475a:	4252      	negs	r2, r2
    475c:	606a      	str	r2, [r5, #4]
    475e:	a902      	add	r1, sp, #8
    4760:	3254      	adds	r2, #84	; 0x54
    4762:	1852      	adds	r2, r2, r1
    4764:	3401      	adds	r4, #1
    4766:	602b      	str	r3, [r5, #0]
    4768:	60eb      	str	r3, [r5, #12]
    476a:	60ab      	str	r3, [r5, #8]
    476c:	7013      	strb	r3, [r2, #0]
    476e:	65ab      	str	r3, [r5, #88]	; 0x58
    4770:	7821      	ldrb	r1, [r4, #0]
    4772:	2205      	movs	r2, #5
    4774:	4841      	ldr	r0, [pc, #260]	; (487c <_vfiprintf_r+0x230>)
    4776:	f000 fad1 	bl	4d1c <memchr>
    477a:	2800      	cmp	r0, #0
    477c:	d008      	beq.n	4790 <_vfiprintf_r+0x144>
    477e:	4b3f      	ldr	r3, [pc, #252]	; (487c <_vfiprintf_r+0x230>)
    4780:	682a      	ldr	r2, [r5, #0]
    4782:	1ac0      	subs	r0, r0, r3
    4784:	2301      	movs	r3, #1
    4786:	4083      	lsls	r3, r0
    4788:	4313      	orrs	r3, r2
    478a:	602b      	str	r3, [r5, #0]
    478c:	3401      	adds	r4, #1
    478e:	e7ef      	b.n	4770 <_vfiprintf_r+0x124>
    4790:	682b      	ldr	r3, [r5, #0]
    4792:	06da      	lsls	r2, r3, #27
    4794:	d504      	bpl.n	47a0 <_vfiprintf_r+0x154>
    4796:	2253      	movs	r2, #83	; 0x53
    4798:	2120      	movs	r1, #32
    479a:	a802      	add	r0, sp, #8
    479c:	1812      	adds	r2, r2, r0
    479e:	7011      	strb	r1, [r2, #0]
    47a0:	071a      	lsls	r2, r3, #28
    47a2:	d504      	bpl.n	47ae <_vfiprintf_r+0x162>
    47a4:	2253      	movs	r2, #83	; 0x53
    47a6:	212b      	movs	r1, #43	; 0x2b
    47a8:	a802      	add	r0, sp, #8
    47aa:	1812      	adds	r2, r2, r0
    47ac:	7011      	strb	r1, [r2, #0]
    47ae:	7822      	ldrb	r2, [r4, #0]
    47b0:	2a2a      	cmp	r2, #42	; 0x2a
    47b2:	d100      	bne.n	47b6 <_vfiprintf_r+0x16a>
    47b4:	e77c      	b.n	46b0 <_vfiprintf_r+0x64>
    47b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47b8:	2000      	movs	r0, #0
    47ba:	210a      	movs	r1, #10
    47bc:	e005      	b.n	47ca <_vfiprintf_r+0x17e>
    47be:	4252      	negs	r2, r2
    47c0:	60ea      	str	r2, [r5, #12]
    47c2:	2202      	movs	r2, #2
    47c4:	4313      	orrs	r3, r2
    47c6:	602b      	str	r3, [r5, #0]
    47c8:	e77a      	b.n	46c0 <_vfiprintf_r+0x74>
    47ca:	7822      	ldrb	r2, [r4, #0]
    47cc:	3a30      	subs	r2, #48	; 0x30
    47ce:	2a09      	cmp	r2, #9
    47d0:	d804      	bhi.n	47dc <_vfiprintf_r+0x190>
    47d2:	434b      	muls	r3, r1
    47d4:	3401      	adds	r4, #1
    47d6:	189b      	adds	r3, r3, r2
    47d8:	2001      	movs	r0, #1
    47da:	e7f6      	b.n	47ca <_vfiprintf_r+0x17e>
    47dc:	2800      	cmp	r0, #0
    47de:	d100      	bne.n	47e2 <_vfiprintf_r+0x196>
    47e0:	e76f      	b.n	46c2 <_vfiprintf_r+0x76>
    47e2:	9309      	str	r3, [sp, #36]	; 0x24
    47e4:	e76d      	b.n	46c2 <_vfiprintf_r+0x76>
    47e6:	7863      	ldrb	r3, [r4, #1]
    47e8:	2b2a      	cmp	r3, #42	; 0x2a
    47ea:	d10a      	bne.n	4802 <_vfiprintf_r+0x1b6>
    47ec:	9b05      	ldr	r3, [sp, #20]
    47ee:	3402      	adds	r4, #2
    47f0:	1d1a      	adds	r2, r3, #4
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	9205      	str	r2, [sp, #20]
    47f6:	2b00      	cmp	r3, #0
    47f8:	da01      	bge.n	47fe <_vfiprintf_r+0x1b2>
    47fa:	2301      	movs	r3, #1
    47fc:	425b      	negs	r3, r3
    47fe:	9307      	str	r3, [sp, #28]
    4800:	e763      	b.n	46ca <_vfiprintf_r+0x7e>
    4802:	2300      	movs	r3, #0
    4804:	200a      	movs	r0, #10
    4806:	001a      	movs	r2, r3
    4808:	3401      	adds	r4, #1
    480a:	606b      	str	r3, [r5, #4]
    480c:	7821      	ldrb	r1, [r4, #0]
    480e:	3930      	subs	r1, #48	; 0x30
    4810:	2909      	cmp	r1, #9
    4812:	d804      	bhi.n	481e <_vfiprintf_r+0x1d2>
    4814:	4342      	muls	r2, r0
    4816:	3401      	adds	r4, #1
    4818:	1852      	adds	r2, r2, r1
    481a:	2301      	movs	r3, #1
    481c:	e7f6      	b.n	480c <_vfiprintf_r+0x1c0>
    481e:	2b00      	cmp	r3, #0
    4820:	d100      	bne.n	4824 <_vfiprintf_r+0x1d8>
    4822:	e752      	b.n	46ca <_vfiprintf_r+0x7e>
    4824:	9207      	str	r2, [sp, #28]
    4826:	e750      	b.n	46ca <_vfiprintf_r+0x7e>
    4828:	ab05      	add	r3, sp, #20
    482a:	9300      	str	r3, [sp, #0]
    482c:	003a      	movs	r2, r7
    482e:	4b14      	ldr	r3, [pc, #80]	; (4880 <_vfiprintf_r+0x234>)
    4830:	0029      	movs	r1, r5
    4832:	0030      	movs	r0, r6
    4834:	e000      	b.n	4838 <_vfiprintf_r+0x1ec>
    4836:	bf00      	nop
    4838:	e007      	b.n	484a <_vfiprintf_r+0x1fe>
    483a:	ab05      	add	r3, sp, #20
    483c:	9300      	str	r3, [sp, #0]
    483e:	003a      	movs	r2, r7
    4840:	4b0f      	ldr	r3, [pc, #60]	; (4880 <_vfiprintf_r+0x234>)
    4842:	0029      	movs	r1, r5
    4844:	0030      	movs	r0, r6
    4846:	f000 f88b 	bl	4960 <_printf_i>
    484a:	9003      	str	r0, [sp, #12]
    484c:	9b03      	ldr	r3, [sp, #12]
    484e:	3301      	adds	r3, #1
    4850:	d000      	beq.n	4854 <_vfiprintf_r+0x208>
    4852:	e75e      	b.n	4712 <_vfiprintf_r+0xc6>
    4854:	89bb      	ldrh	r3, [r7, #12]
    4856:	065b      	lsls	r3, r3, #25
    4858:	d500      	bpl.n	485c <_vfiprintf_r+0x210>
    485a:	e726      	b.n	46aa <_vfiprintf_r+0x5e>
    485c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    485e:	b01f      	add	sp, #124	; 0x7c
    4860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	000051f4 	.word	0x000051f4
    4868:	00005214 	.word	0x00005214
    486c:	00005234 	.word	0x00005234
    4870:	0000525a 	.word	0x0000525a
    4874:	0000525e 	.word	0x0000525e
    4878:	00000000 	.word	0x00000000
    487c:	00005254 	.word	0x00005254
    4880:	00004627 	.word	0x00004627

00004884 <_printf_common>:
    4884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4886:	0017      	movs	r7, r2
    4888:	9301      	str	r3, [sp, #4]
    488a:	688a      	ldr	r2, [r1, #8]
    488c:	690b      	ldr	r3, [r1, #16]
    488e:	9000      	str	r0, [sp, #0]
    4890:	000c      	movs	r4, r1
    4892:	4293      	cmp	r3, r2
    4894:	da00      	bge.n	4898 <_printf_common+0x14>
    4896:	0013      	movs	r3, r2
    4898:	0022      	movs	r2, r4
    489a:	603b      	str	r3, [r7, #0]
    489c:	3243      	adds	r2, #67	; 0x43
    489e:	7812      	ldrb	r2, [r2, #0]
    48a0:	2a00      	cmp	r2, #0
    48a2:	d001      	beq.n	48a8 <_printf_common+0x24>
    48a4:	3301      	adds	r3, #1
    48a6:	603b      	str	r3, [r7, #0]
    48a8:	6823      	ldr	r3, [r4, #0]
    48aa:	069b      	lsls	r3, r3, #26
    48ac:	d502      	bpl.n	48b4 <_printf_common+0x30>
    48ae:	683b      	ldr	r3, [r7, #0]
    48b0:	3302      	adds	r3, #2
    48b2:	603b      	str	r3, [r7, #0]
    48b4:	2506      	movs	r5, #6
    48b6:	6823      	ldr	r3, [r4, #0]
    48b8:	401d      	ands	r5, r3
    48ba:	d01e      	beq.n	48fa <_printf_common+0x76>
    48bc:	0023      	movs	r3, r4
    48be:	3343      	adds	r3, #67	; 0x43
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	1e5a      	subs	r2, r3, #1
    48c4:	4193      	sbcs	r3, r2
    48c6:	6822      	ldr	r2, [r4, #0]
    48c8:	0692      	lsls	r2, r2, #26
    48ca:	d51c      	bpl.n	4906 <_printf_common+0x82>
    48cc:	2030      	movs	r0, #48	; 0x30
    48ce:	18e1      	adds	r1, r4, r3
    48d0:	3143      	adds	r1, #67	; 0x43
    48d2:	7008      	strb	r0, [r1, #0]
    48d4:	0021      	movs	r1, r4
    48d6:	1c5a      	adds	r2, r3, #1
    48d8:	3145      	adds	r1, #69	; 0x45
    48da:	7809      	ldrb	r1, [r1, #0]
    48dc:	18a2      	adds	r2, r4, r2
    48de:	3243      	adds	r2, #67	; 0x43
    48e0:	3302      	adds	r3, #2
    48e2:	7011      	strb	r1, [r2, #0]
    48e4:	e00f      	b.n	4906 <_printf_common+0x82>
    48e6:	0022      	movs	r2, r4
    48e8:	2301      	movs	r3, #1
    48ea:	3219      	adds	r2, #25
    48ec:	9901      	ldr	r1, [sp, #4]
    48ee:	9800      	ldr	r0, [sp, #0]
    48f0:	9e08      	ldr	r6, [sp, #32]
    48f2:	47b0      	blx	r6
    48f4:	1c43      	adds	r3, r0, #1
    48f6:	d00e      	beq.n	4916 <_printf_common+0x92>
    48f8:	3501      	adds	r5, #1
    48fa:	68e3      	ldr	r3, [r4, #12]
    48fc:	683a      	ldr	r2, [r7, #0]
    48fe:	1a9b      	subs	r3, r3, r2
    4900:	429d      	cmp	r5, r3
    4902:	dbf0      	blt.n	48e6 <_printf_common+0x62>
    4904:	e7da      	b.n	48bc <_printf_common+0x38>
    4906:	0022      	movs	r2, r4
    4908:	9901      	ldr	r1, [sp, #4]
    490a:	3243      	adds	r2, #67	; 0x43
    490c:	9800      	ldr	r0, [sp, #0]
    490e:	9d08      	ldr	r5, [sp, #32]
    4910:	47a8      	blx	r5
    4912:	1c43      	adds	r3, r0, #1
    4914:	d102      	bne.n	491c <_printf_common+0x98>
    4916:	2001      	movs	r0, #1
    4918:	4240      	negs	r0, r0
    491a:	e020      	b.n	495e <_printf_common+0xda>
    491c:	2306      	movs	r3, #6
    491e:	6820      	ldr	r0, [r4, #0]
    4920:	68e1      	ldr	r1, [r4, #12]
    4922:	683a      	ldr	r2, [r7, #0]
    4924:	4003      	ands	r3, r0
    4926:	2500      	movs	r5, #0
    4928:	2b04      	cmp	r3, #4
    492a:	d103      	bne.n	4934 <_printf_common+0xb0>
    492c:	1a8d      	subs	r5, r1, r2
    492e:	43eb      	mvns	r3, r5
    4930:	17db      	asrs	r3, r3, #31
    4932:	401d      	ands	r5, r3
    4934:	68a3      	ldr	r3, [r4, #8]
    4936:	6922      	ldr	r2, [r4, #16]
    4938:	4293      	cmp	r3, r2
    493a:	dd01      	ble.n	4940 <_printf_common+0xbc>
    493c:	1a9b      	subs	r3, r3, r2
    493e:	18ed      	adds	r5, r5, r3
    4940:	2700      	movs	r7, #0
    4942:	42bd      	cmp	r5, r7
    4944:	d00a      	beq.n	495c <_printf_common+0xd8>
    4946:	0022      	movs	r2, r4
    4948:	2301      	movs	r3, #1
    494a:	321a      	adds	r2, #26
    494c:	9901      	ldr	r1, [sp, #4]
    494e:	9800      	ldr	r0, [sp, #0]
    4950:	9e08      	ldr	r6, [sp, #32]
    4952:	47b0      	blx	r6
    4954:	1c43      	adds	r3, r0, #1
    4956:	d0de      	beq.n	4916 <_printf_common+0x92>
    4958:	3701      	adds	r7, #1
    495a:	e7f2      	b.n	4942 <_printf_common+0xbe>
    495c:	2000      	movs	r0, #0
    495e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004960 <_printf_i>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	b08b      	sub	sp, #44	; 0x2c
    4964:	9206      	str	r2, [sp, #24]
    4966:	000a      	movs	r2, r1
    4968:	3243      	adds	r2, #67	; 0x43
    496a:	9307      	str	r3, [sp, #28]
    496c:	9005      	str	r0, [sp, #20]
    496e:	9204      	str	r2, [sp, #16]
    4970:	7e0a      	ldrb	r2, [r1, #24]
    4972:	000c      	movs	r4, r1
    4974:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4976:	2a6e      	cmp	r2, #110	; 0x6e
    4978:	d100      	bne.n	497c <_printf_i+0x1c>
    497a:	e0ab      	b.n	4ad4 <_printf_i+0x174>
    497c:	d811      	bhi.n	49a2 <_printf_i+0x42>
    497e:	2a63      	cmp	r2, #99	; 0x63
    4980:	d022      	beq.n	49c8 <_printf_i+0x68>
    4982:	d809      	bhi.n	4998 <_printf_i+0x38>
    4984:	2a00      	cmp	r2, #0
    4986:	d100      	bne.n	498a <_printf_i+0x2a>
    4988:	e0b5      	b.n	4af6 <_printf_i+0x196>
    498a:	2a58      	cmp	r2, #88	; 0x58
    498c:	d000      	beq.n	4990 <_printf_i+0x30>
    498e:	e0c5      	b.n	4b1c <_printf_i+0x1bc>
    4990:	3145      	adds	r1, #69	; 0x45
    4992:	700a      	strb	r2, [r1, #0]
    4994:	4a81      	ldr	r2, [pc, #516]	; (4b9c <_printf_i+0x23c>)
    4996:	e04f      	b.n	4a38 <_printf_i+0xd8>
    4998:	2a64      	cmp	r2, #100	; 0x64
    499a:	d01d      	beq.n	49d8 <_printf_i+0x78>
    499c:	2a69      	cmp	r2, #105	; 0x69
    499e:	d01b      	beq.n	49d8 <_printf_i+0x78>
    49a0:	e0bc      	b.n	4b1c <_printf_i+0x1bc>
    49a2:	2a73      	cmp	r2, #115	; 0x73
    49a4:	d100      	bne.n	49a8 <_printf_i+0x48>
    49a6:	e0aa      	b.n	4afe <_printf_i+0x19e>
    49a8:	d809      	bhi.n	49be <_printf_i+0x5e>
    49aa:	2a6f      	cmp	r2, #111	; 0x6f
    49ac:	d029      	beq.n	4a02 <_printf_i+0xa2>
    49ae:	2a70      	cmp	r2, #112	; 0x70
    49b0:	d000      	beq.n	49b4 <_printf_i+0x54>
    49b2:	e0b3      	b.n	4b1c <_printf_i+0x1bc>
    49b4:	2220      	movs	r2, #32
    49b6:	6809      	ldr	r1, [r1, #0]
    49b8:	430a      	orrs	r2, r1
    49ba:	6022      	str	r2, [r4, #0]
    49bc:	e037      	b.n	4a2e <_printf_i+0xce>
    49be:	2a75      	cmp	r2, #117	; 0x75
    49c0:	d01f      	beq.n	4a02 <_printf_i+0xa2>
    49c2:	2a78      	cmp	r2, #120	; 0x78
    49c4:	d033      	beq.n	4a2e <_printf_i+0xce>
    49c6:	e0a9      	b.n	4b1c <_printf_i+0x1bc>
    49c8:	000e      	movs	r6, r1
    49ca:	681a      	ldr	r2, [r3, #0]
    49cc:	3642      	adds	r6, #66	; 0x42
    49ce:	1d11      	adds	r1, r2, #4
    49d0:	6019      	str	r1, [r3, #0]
    49d2:	6813      	ldr	r3, [r2, #0]
    49d4:	7033      	strb	r3, [r6, #0]
    49d6:	e0a4      	b.n	4b22 <_printf_i+0x1c2>
    49d8:	6821      	ldr	r1, [r4, #0]
    49da:	681a      	ldr	r2, [r3, #0]
    49dc:	0608      	lsls	r0, r1, #24
    49de:	d406      	bmi.n	49ee <_printf_i+0x8e>
    49e0:	0649      	lsls	r1, r1, #25
    49e2:	d504      	bpl.n	49ee <_printf_i+0x8e>
    49e4:	1d11      	adds	r1, r2, #4
    49e6:	6019      	str	r1, [r3, #0]
    49e8:	2300      	movs	r3, #0
    49ea:	5ed5      	ldrsh	r5, [r2, r3]
    49ec:	e002      	b.n	49f4 <_printf_i+0x94>
    49ee:	1d11      	adds	r1, r2, #4
    49f0:	6019      	str	r1, [r3, #0]
    49f2:	6815      	ldr	r5, [r2, #0]
    49f4:	2d00      	cmp	r5, #0
    49f6:	da3b      	bge.n	4a70 <_printf_i+0x110>
    49f8:	232d      	movs	r3, #45	; 0x2d
    49fa:	9a04      	ldr	r2, [sp, #16]
    49fc:	426d      	negs	r5, r5
    49fe:	7013      	strb	r3, [r2, #0]
    4a00:	e036      	b.n	4a70 <_printf_i+0x110>
    4a02:	6821      	ldr	r1, [r4, #0]
    4a04:	681a      	ldr	r2, [r3, #0]
    4a06:	0608      	lsls	r0, r1, #24
    4a08:	d406      	bmi.n	4a18 <_printf_i+0xb8>
    4a0a:	0649      	lsls	r1, r1, #25
    4a0c:	d504      	bpl.n	4a18 <_printf_i+0xb8>
    4a0e:	6815      	ldr	r5, [r2, #0]
    4a10:	1d11      	adds	r1, r2, #4
    4a12:	6019      	str	r1, [r3, #0]
    4a14:	b2ad      	uxth	r5, r5
    4a16:	e002      	b.n	4a1e <_printf_i+0xbe>
    4a18:	1d11      	adds	r1, r2, #4
    4a1a:	6019      	str	r1, [r3, #0]
    4a1c:	6815      	ldr	r5, [r2, #0]
    4a1e:	4b5f      	ldr	r3, [pc, #380]	; (4b9c <_printf_i+0x23c>)
    4a20:	7e22      	ldrb	r2, [r4, #24]
    4a22:	9303      	str	r3, [sp, #12]
    4a24:	2708      	movs	r7, #8
    4a26:	2a6f      	cmp	r2, #111	; 0x6f
    4a28:	d01d      	beq.n	4a66 <_printf_i+0x106>
    4a2a:	270a      	movs	r7, #10
    4a2c:	e01b      	b.n	4a66 <_printf_i+0x106>
    4a2e:	0022      	movs	r2, r4
    4a30:	2178      	movs	r1, #120	; 0x78
    4a32:	3245      	adds	r2, #69	; 0x45
    4a34:	7011      	strb	r1, [r2, #0]
    4a36:	4a5a      	ldr	r2, [pc, #360]	; (4ba0 <_printf_i+0x240>)
    4a38:	6819      	ldr	r1, [r3, #0]
    4a3a:	9203      	str	r2, [sp, #12]
    4a3c:	1d08      	adds	r0, r1, #4
    4a3e:	6822      	ldr	r2, [r4, #0]
    4a40:	6018      	str	r0, [r3, #0]
    4a42:	680d      	ldr	r5, [r1, #0]
    4a44:	0610      	lsls	r0, r2, #24
    4a46:	d402      	bmi.n	4a4e <_printf_i+0xee>
    4a48:	0650      	lsls	r0, r2, #25
    4a4a:	d500      	bpl.n	4a4e <_printf_i+0xee>
    4a4c:	b2ad      	uxth	r5, r5
    4a4e:	07d3      	lsls	r3, r2, #31
    4a50:	d502      	bpl.n	4a58 <_printf_i+0xf8>
    4a52:	2320      	movs	r3, #32
    4a54:	431a      	orrs	r2, r3
    4a56:	6022      	str	r2, [r4, #0]
    4a58:	2710      	movs	r7, #16
    4a5a:	2d00      	cmp	r5, #0
    4a5c:	d103      	bne.n	4a66 <_printf_i+0x106>
    4a5e:	2320      	movs	r3, #32
    4a60:	6822      	ldr	r2, [r4, #0]
    4a62:	439a      	bics	r2, r3
    4a64:	6022      	str	r2, [r4, #0]
    4a66:	0023      	movs	r3, r4
    4a68:	2200      	movs	r2, #0
    4a6a:	3343      	adds	r3, #67	; 0x43
    4a6c:	701a      	strb	r2, [r3, #0]
    4a6e:	e002      	b.n	4a76 <_printf_i+0x116>
    4a70:	270a      	movs	r7, #10
    4a72:	4b4a      	ldr	r3, [pc, #296]	; (4b9c <_printf_i+0x23c>)
    4a74:	9303      	str	r3, [sp, #12]
    4a76:	6863      	ldr	r3, [r4, #4]
    4a78:	60a3      	str	r3, [r4, #8]
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	db09      	blt.n	4a92 <_printf_i+0x132>
    4a7e:	2204      	movs	r2, #4
    4a80:	6821      	ldr	r1, [r4, #0]
    4a82:	4391      	bics	r1, r2
    4a84:	6021      	str	r1, [r4, #0]
    4a86:	2d00      	cmp	r5, #0
    4a88:	d105      	bne.n	4a96 <_printf_i+0x136>
    4a8a:	9e04      	ldr	r6, [sp, #16]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d011      	beq.n	4ab4 <_printf_i+0x154>
    4a90:	e07b      	b.n	4b8a <_printf_i+0x22a>
    4a92:	2d00      	cmp	r5, #0
    4a94:	d079      	beq.n	4b8a <_printf_i+0x22a>
    4a96:	9e04      	ldr	r6, [sp, #16]
    4a98:	0028      	movs	r0, r5
    4a9a:	0039      	movs	r1, r7
    4a9c:	f7fe feb0 	bl	3800 <__aeabi_uidivmod>
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	3e01      	subs	r6, #1
    4aa4:	5c5b      	ldrb	r3, [r3, r1]
    4aa6:	0028      	movs	r0, r5
    4aa8:	7033      	strb	r3, [r6, #0]
    4aaa:	0039      	movs	r1, r7
    4aac:	f7fe fe22 	bl	36f4 <__aeabi_uidiv>
    4ab0:	1e05      	subs	r5, r0, #0
    4ab2:	d1f1      	bne.n	4a98 <_printf_i+0x138>
    4ab4:	2f08      	cmp	r7, #8
    4ab6:	d109      	bne.n	4acc <_printf_i+0x16c>
    4ab8:	6823      	ldr	r3, [r4, #0]
    4aba:	07db      	lsls	r3, r3, #31
    4abc:	d506      	bpl.n	4acc <_printf_i+0x16c>
    4abe:	6863      	ldr	r3, [r4, #4]
    4ac0:	6922      	ldr	r2, [r4, #16]
    4ac2:	4293      	cmp	r3, r2
    4ac4:	dc02      	bgt.n	4acc <_printf_i+0x16c>
    4ac6:	2330      	movs	r3, #48	; 0x30
    4ac8:	3e01      	subs	r6, #1
    4aca:	7033      	strb	r3, [r6, #0]
    4acc:	9b04      	ldr	r3, [sp, #16]
    4ace:	1b9b      	subs	r3, r3, r6
    4ad0:	6123      	str	r3, [r4, #16]
    4ad2:	e02b      	b.n	4b2c <_printf_i+0x1cc>
    4ad4:	6809      	ldr	r1, [r1, #0]
    4ad6:	681a      	ldr	r2, [r3, #0]
    4ad8:	0608      	lsls	r0, r1, #24
    4ada:	d407      	bmi.n	4aec <_printf_i+0x18c>
    4adc:	0649      	lsls	r1, r1, #25
    4ade:	d505      	bpl.n	4aec <_printf_i+0x18c>
    4ae0:	1d11      	adds	r1, r2, #4
    4ae2:	6019      	str	r1, [r3, #0]
    4ae4:	6813      	ldr	r3, [r2, #0]
    4ae6:	8aa2      	ldrh	r2, [r4, #20]
    4ae8:	801a      	strh	r2, [r3, #0]
    4aea:	e004      	b.n	4af6 <_printf_i+0x196>
    4aec:	1d11      	adds	r1, r2, #4
    4aee:	6019      	str	r1, [r3, #0]
    4af0:	6813      	ldr	r3, [r2, #0]
    4af2:	6962      	ldr	r2, [r4, #20]
    4af4:	601a      	str	r2, [r3, #0]
    4af6:	2300      	movs	r3, #0
    4af8:	9e04      	ldr	r6, [sp, #16]
    4afa:	6123      	str	r3, [r4, #16]
    4afc:	e016      	b.n	4b2c <_printf_i+0x1cc>
    4afe:	681a      	ldr	r2, [r3, #0]
    4b00:	1d11      	adds	r1, r2, #4
    4b02:	6019      	str	r1, [r3, #0]
    4b04:	6816      	ldr	r6, [r2, #0]
    4b06:	2100      	movs	r1, #0
    4b08:	6862      	ldr	r2, [r4, #4]
    4b0a:	0030      	movs	r0, r6
    4b0c:	f000 f906 	bl	4d1c <memchr>
    4b10:	2800      	cmp	r0, #0
    4b12:	d001      	beq.n	4b18 <_printf_i+0x1b8>
    4b14:	1b80      	subs	r0, r0, r6
    4b16:	6060      	str	r0, [r4, #4]
    4b18:	6863      	ldr	r3, [r4, #4]
    4b1a:	e003      	b.n	4b24 <_printf_i+0x1c4>
    4b1c:	0026      	movs	r6, r4
    4b1e:	3642      	adds	r6, #66	; 0x42
    4b20:	7032      	strb	r2, [r6, #0]
    4b22:	2301      	movs	r3, #1
    4b24:	6123      	str	r3, [r4, #16]
    4b26:	2300      	movs	r3, #0
    4b28:	9a04      	ldr	r2, [sp, #16]
    4b2a:	7013      	strb	r3, [r2, #0]
    4b2c:	9b07      	ldr	r3, [sp, #28]
    4b2e:	aa09      	add	r2, sp, #36	; 0x24
    4b30:	9300      	str	r3, [sp, #0]
    4b32:	0021      	movs	r1, r4
    4b34:	9b06      	ldr	r3, [sp, #24]
    4b36:	9805      	ldr	r0, [sp, #20]
    4b38:	f7ff fea4 	bl	4884 <_printf_common>
    4b3c:	1c43      	adds	r3, r0, #1
    4b3e:	d102      	bne.n	4b46 <_printf_i+0x1e6>
    4b40:	2001      	movs	r0, #1
    4b42:	4240      	negs	r0, r0
    4b44:	e027      	b.n	4b96 <_printf_i+0x236>
    4b46:	6923      	ldr	r3, [r4, #16]
    4b48:	0032      	movs	r2, r6
    4b4a:	9906      	ldr	r1, [sp, #24]
    4b4c:	9805      	ldr	r0, [sp, #20]
    4b4e:	9d07      	ldr	r5, [sp, #28]
    4b50:	47a8      	blx	r5
    4b52:	1c43      	adds	r3, r0, #1
    4b54:	d0f4      	beq.n	4b40 <_printf_i+0x1e0>
    4b56:	6823      	ldr	r3, [r4, #0]
    4b58:	2500      	movs	r5, #0
    4b5a:	079b      	lsls	r3, r3, #30
    4b5c:	d40f      	bmi.n	4b7e <_printf_i+0x21e>
    4b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b60:	68e0      	ldr	r0, [r4, #12]
    4b62:	4298      	cmp	r0, r3
    4b64:	da17      	bge.n	4b96 <_printf_i+0x236>
    4b66:	0018      	movs	r0, r3
    4b68:	e015      	b.n	4b96 <_printf_i+0x236>
    4b6a:	0022      	movs	r2, r4
    4b6c:	2301      	movs	r3, #1
    4b6e:	3219      	adds	r2, #25
    4b70:	9906      	ldr	r1, [sp, #24]
    4b72:	9805      	ldr	r0, [sp, #20]
    4b74:	9e07      	ldr	r6, [sp, #28]
    4b76:	47b0      	blx	r6
    4b78:	1c43      	adds	r3, r0, #1
    4b7a:	d0e1      	beq.n	4b40 <_printf_i+0x1e0>
    4b7c:	3501      	adds	r5, #1
    4b7e:	68e3      	ldr	r3, [r4, #12]
    4b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4b82:	1a9b      	subs	r3, r3, r2
    4b84:	429d      	cmp	r5, r3
    4b86:	dbf0      	blt.n	4b6a <_printf_i+0x20a>
    4b88:	e7e9      	b.n	4b5e <_printf_i+0x1fe>
    4b8a:	0026      	movs	r6, r4
    4b8c:	9b03      	ldr	r3, [sp, #12]
    4b8e:	3642      	adds	r6, #66	; 0x42
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	7033      	strb	r3, [r6, #0]
    4b94:	e78e      	b.n	4ab4 <_printf_i+0x154>
    4b96:	b00b      	add	sp, #44	; 0x2c
    4b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	00005265 	.word	0x00005265
    4ba0:	00005276 	.word	0x00005276

00004ba4 <_sbrk_r>:
    4ba4:	2300      	movs	r3, #0
    4ba6:	b570      	push	{r4, r5, r6, lr}
    4ba8:	4c06      	ldr	r4, [pc, #24]	; (4bc4 <_sbrk_r+0x20>)
    4baa:	0005      	movs	r5, r0
    4bac:	0008      	movs	r0, r1
    4bae:	6023      	str	r3, [r4, #0]
    4bb0:	f7fd fe12 	bl	27d8 <_sbrk>
    4bb4:	1c43      	adds	r3, r0, #1
    4bb6:	d103      	bne.n	4bc0 <_sbrk_r+0x1c>
    4bb8:	6823      	ldr	r3, [r4, #0]
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d000      	beq.n	4bc0 <_sbrk_r+0x1c>
    4bbe:	602b      	str	r3, [r5, #0]
    4bc0:	bd70      	pop	{r4, r5, r6, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	200006d4 	.word	0x200006d4

00004bc8 <__sread>:
    4bc8:	b570      	push	{r4, r5, r6, lr}
    4bca:	000c      	movs	r4, r1
    4bcc:	250e      	movs	r5, #14
    4bce:	5f49      	ldrsh	r1, [r1, r5]
    4bd0:	f000 f8b0 	bl	4d34 <_read_r>
    4bd4:	2800      	cmp	r0, #0
    4bd6:	db03      	blt.n	4be0 <__sread+0x18>
    4bd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4bda:	181b      	adds	r3, r3, r0
    4bdc:	6563      	str	r3, [r4, #84]	; 0x54
    4bde:	e003      	b.n	4be8 <__sread+0x20>
    4be0:	89a2      	ldrh	r2, [r4, #12]
    4be2:	4b02      	ldr	r3, [pc, #8]	; (4bec <__sread+0x24>)
    4be4:	4013      	ands	r3, r2
    4be6:	81a3      	strh	r3, [r4, #12]
    4be8:	bd70      	pop	{r4, r5, r6, pc}
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	ffffefff 	.word	0xffffefff

00004bf0 <__swrite>:
    4bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bf2:	001f      	movs	r7, r3
    4bf4:	898b      	ldrh	r3, [r1, #12]
    4bf6:	0005      	movs	r5, r0
    4bf8:	000c      	movs	r4, r1
    4bfa:	0016      	movs	r6, r2
    4bfc:	05db      	lsls	r3, r3, #23
    4bfe:	d505      	bpl.n	4c0c <__swrite+0x1c>
    4c00:	230e      	movs	r3, #14
    4c02:	5ec9      	ldrsh	r1, [r1, r3]
    4c04:	2200      	movs	r2, #0
    4c06:	2302      	movs	r3, #2
    4c08:	f000 f874 	bl	4cf4 <_lseek_r>
    4c0c:	89a2      	ldrh	r2, [r4, #12]
    4c0e:	4b05      	ldr	r3, [pc, #20]	; (4c24 <__swrite+0x34>)
    4c10:	0028      	movs	r0, r5
    4c12:	4013      	ands	r3, r2
    4c14:	81a3      	strh	r3, [r4, #12]
    4c16:	0032      	movs	r2, r6
    4c18:	230e      	movs	r3, #14
    4c1a:	5ee1      	ldrsh	r1, [r4, r3]
    4c1c:	003b      	movs	r3, r7
    4c1e:	f000 f81f 	bl	4c60 <_write_r>
    4c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c24:	ffffefff 	.word	0xffffefff

00004c28 <__sseek>:
    4c28:	b570      	push	{r4, r5, r6, lr}
    4c2a:	000c      	movs	r4, r1
    4c2c:	250e      	movs	r5, #14
    4c2e:	5f49      	ldrsh	r1, [r1, r5]
    4c30:	f000 f860 	bl	4cf4 <_lseek_r>
    4c34:	89a3      	ldrh	r3, [r4, #12]
    4c36:	1c42      	adds	r2, r0, #1
    4c38:	d103      	bne.n	4c42 <__sseek+0x1a>
    4c3a:	4a05      	ldr	r2, [pc, #20]	; (4c50 <__sseek+0x28>)
    4c3c:	4013      	ands	r3, r2
    4c3e:	81a3      	strh	r3, [r4, #12]
    4c40:	e004      	b.n	4c4c <__sseek+0x24>
    4c42:	2280      	movs	r2, #128	; 0x80
    4c44:	0152      	lsls	r2, r2, #5
    4c46:	4313      	orrs	r3, r2
    4c48:	81a3      	strh	r3, [r4, #12]
    4c4a:	6560      	str	r0, [r4, #84]	; 0x54
    4c4c:	bd70      	pop	{r4, r5, r6, pc}
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	ffffefff 	.word	0xffffefff

00004c54 <__sclose>:
    4c54:	b510      	push	{r4, lr}
    4c56:	230e      	movs	r3, #14
    4c58:	5ec9      	ldrsh	r1, [r1, r3]
    4c5a:	f000 f815 	bl	4c88 <_close_r>
    4c5e:	bd10      	pop	{r4, pc}

00004c60 <_write_r>:
    4c60:	b570      	push	{r4, r5, r6, lr}
    4c62:	0005      	movs	r5, r0
    4c64:	0008      	movs	r0, r1
    4c66:	0011      	movs	r1, r2
    4c68:	2200      	movs	r2, #0
    4c6a:	4c06      	ldr	r4, [pc, #24]	; (4c84 <_write_r+0x24>)
    4c6c:	6022      	str	r2, [r4, #0]
    4c6e:	001a      	movs	r2, r3
    4c70:	f7fd fd8a 	bl	2788 <_write>
    4c74:	1c43      	adds	r3, r0, #1
    4c76:	d103      	bne.n	4c80 <_write_r+0x20>
    4c78:	6823      	ldr	r3, [r4, #0]
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	d000      	beq.n	4c80 <_write_r+0x20>
    4c7e:	602b      	str	r3, [r5, #0]
    4c80:	bd70      	pop	{r4, r5, r6, pc}
    4c82:	46c0      	nop			; (mov r8, r8)
    4c84:	200006d4 	.word	0x200006d4

00004c88 <_close_r>:
    4c88:	2300      	movs	r3, #0
    4c8a:	b570      	push	{r4, r5, r6, lr}
    4c8c:	4c06      	ldr	r4, [pc, #24]	; (4ca8 <_close_r+0x20>)
    4c8e:	0005      	movs	r5, r0
    4c90:	0008      	movs	r0, r1
    4c92:	6023      	str	r3, [r4, #0]
    4c94:	f7fd fdb2 	bl	27fc <_close>
    4c98:	1c43      	adds	r3, r0, #1
    4c9a:	d103      	bne.n	4ca4 <_close_r+0x1c>
    4c9c:	6823      	ldr	r3, [r4, #0]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d000      	beq.n	4ca4 <_close_r+0x1c>
    4ca2:	602b      	str	r3, [r5, #0]
    4ca4:	bd70      	pop	{r4, r5, r6, pc}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	200006d4 	.word	0x200006d4

00004cac <_fstat_r>:
    4cac:	2300      	movs	r3, #0
    4cae:	b570      	push	{r4, r5, r6, lr}
    4cb0:	4c06      	ldr	r4, [pc, #24]	; (4ccc <_fstat_r+0x20>)
    4cb2:	0005      	movs	r5, r0
    4cb4:	0008      	movs	r0, r1
    4cb6:	0011      	movs	r1, r2
    4cb8:	6023      	str	r3, [r4, #0]
    4cba:	f7fd fda3 	bl	2804 <_fstat>
    4cbe:	1c43      	adds	r3, r0, #1
    4cc0:	d103      	bne.n	4cca <_fstat_r+0x1e>
    4cc2:	6823      	ldr	r3, [r4, #0]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d000      	beq.n	4cca <_fstat_r+0x1e>
    4cc8:	602b      	str	r3, [r5, #0]
    4cca:	bd70      	pop	{r4, r5, r6, pc}
    4ccc:	200006d4 	.word	0x200006d4

00004cd0 <_isatty_r>:
    4cd0:	2300      	movs	r3, #0
    4cd2:	b570      	push	{r4, r5, r6, lr}
    4cd4:	4c06      	ldr	r4, [pc, #24]	; (4cf0 <_isatty_r+0x20>)
    4cd6:	0005      	movs	r5, r0
    4cd8:	0008      	movs	r0, r1
    4cda:	6023      	str	r3, [r4, #0]
    4cdc:	f7fd fd98 	bl	2810 <_isatty>
    4ce0:	1c43      	adds	r3, r0, #1
    4ce2:	d103      	bne.n	4cec <_isatty_r+0x1c>
    4ce4:	6823      	ldr	r3, [r4, #0]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d000      	beq.n	4cec <_isatty_r+0x1c>
    4cea:	602b      	str	r3, [r5, #0]
    4cec:	bd70      	pop	{r4, r5, r6, pc}
    4cee:	46c0      	nop			; (mov r8, r8)
    4cf0:	200006d4 	.word	0x200006d4

00004cf4 <_lseek_r>:
    4cf4:	b570      	push	{r4, r5, r6, lr}
    4cf6:	0005      	movs	r5, r0
    4cf8:	0008      	movs	r0, r1
    4cfa:	0011      	movs	r1, r2
    4cfc:	2200      	movs	r2, #0
    4cfe:	4c06      	ldr	r4, [pc, #24]	; (4d18 <_lseek_r+0x24>)
    4d00:	6022      	str	r2, [r4, #0]
    4d02:	001a      	movs	r2, r3
    4d04:	f7fd fd86 	bl	2814 <_lseek>
    4d08:	1c43      	adds	r3, r0, #1
    4d0a:	d103      	bne.n	4d14 <_lseek_r+0x20>
    4d0c:	6823      	ldr	r3, [r4, #0]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d000      	beq.n	4d14 <_lseek_r+0x20>
    4d12:	602b      	str	r3, [r5, #0]
    4d14:	bd70      	pop	{r4, r5, r6, pc}
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	200006d4 	.word	0x200006d4

00004d1c <memchr>:
    4d1c:	b2c9      	uxtb	r1, r1
    4d1e:	1882      	adds	r2, r0, r2
    4d20:	4290      	cmp	r0, r2
    4d22:	d004      	beq.n	4d2e <memchr+0x12>
    4d24:	7803      	ldrb	r3, [r0, #0]
    4d26:	428b      	cmp	r3, r1
    4d28:	d002      	beq.n	4d30 <memchr+0x14>
    4d2a:	3001      	adds	r0, #1
    4d2c:	e7f8      	b.n	4d20 <memchr+0x4>
    4d2e:	2000      	movs	r0, #0
    4d30:	4770      	bx	lr
	...

00004d34 <_read_r>:
    4d34:	b570      	push	{r4, r5, r6, lr}
    4d36:	0005      	movs	r5, r0
    4d38:	0008      	movs	r0, r1
    4d3a:	0011      	movs	r1, r2
    4d3c:	2200      	movs	r2, #0
    4d3e:	4c06      	ldr	r4, [pc, #24]	; (4d58 <_read_r+0x24>)
    4d40:	6022      	str	r2, [r4, #0]
    4d42:	001a      	movs	r2, r3
    4d44:	f7fd fd00 	bl	2748 <_read>
    4d48:	1c43      	adds	r3, r0, #1
    4d4a:	d103      	bne.n	4d54 <_read_r+0x20>
    4d4c:	6823      	ldr	r3, [r4, #0]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d000      	beq.n	4d54 <_read_r+0x20>
    4d52:	602b      	str	r3, [r5, #0]
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	200006d4 	.word	0x200006d4
    4d5c:	000003ee 	.word	0x000003ee
    4d60:	00000650 	.word	0x00000650
    4d64:	00000650 	.word	0x00000650
    4d68:	00000650 	.word	0x00000650
    4d6c:	00000650 	.word	0x00000650
    4d70:	00000650 	.word	0x00000650
    4d74:	00000650 	.word	0x00000650
    4d78:	00000650 	.word	0x00000650
    4d7c:	00000650 	.word	0x00000650
    4d80:	00000650 	.word	0x00000650
    4d84:	00000650 	.word	0x00000650
    4d88:	00000650 	.word	0x00000650
    4d8c:	00000650 	.word	0x00000650
    4d90:	00000650 	.word	0x00000650
    4d94:	00000650 	.word	0x00000650
    4d98:	00000650 	.word	0x00000650
    4d9c:	000003d6 	.word	0x000003d6
    4da0:	00000650 	.word	0x00000650
    4da4:	00000650 	.word	0x00000650
    4da8:	00000650 	.word	0x00000650
    4dac:	00000650 	.word	0x00000650
    4db0:	00000650 	.word	0x00000650
    4db4:	00000650 	.word	0x00000650
    4db8:	00000650 	.word	0x00000650
    4dbc:	00000650 	.word	0x00000650
    4dc0:	00000650 	.word	0x00000650
    4dc4:	00000650 	.word	0x00000650
    4dc8:	00000650 	.word	0x00000650
    4dcc:	00000650 	.word	0x00000650
    4dd0:	00000650 	.word	0x00000650
    4dd4:	00000650 	.word	0x00000650
    4dd8:	00000650 	.word	0x00000650
    4ddc:	000003e6 	.word	0x000003e6
    4de0:	00000650 	.word	0x00000650
    4de4:	00000650 	.word	0x00000650
    4de8:	00000650 	.word	0x00000650
    4dec:	00000650 	.word	0x00000650
    4df0:	00000650 	.word	0x00000650
    4df4:	00000650 	.word	0x00000650
    4df8:	00000650 	.word	0x00000650
    4dfc:	00000650 	.word	0x00000650
    4e00:	00000650 	.word	0x00000650
    4e04:	00000650 	.word	0x00000650
    4e08:	00000650 	.word	0x00000650
    4e0c:	00000650 	.word	0x00000650
    4e10:	00000650 	.word	0x00000650
    4e14:	00000650 	.word	0x00000650
    4e18:	00000650 	.word	0x00000650
    4e1c:	000003de 	.word	0x000003de
    4e20:	000003f6 	.word	0x000003f6
    4e24:	000003be 	.word	0x000003be
    4e28:	000003ce 	.word	0x000003ce
    4e2c:	000003c6 	.word	0x000003c6
    4e30:	42004400 	.word	0x42004400
    4e34:	42004800 	.word	0x42004800
    4e38:	00000002 	.word	0x00000002
    4e3c:	00000003 	.word	0x00000003
    4e40:	00000028 	.word	0x00000028
    4e44:	00000029 	.word	0x00000029
    4e48:	00000004 	.word	0x00000004
    4e4c:	00000005 	.word	0x00000005
    4e50:	00000006 	.word	0x00000006
    4e54:	00000007 	.word	0x00000007
    4e58:	00000008 	.word	0x00000008
    4e5c:	00000009 	.word	0x00000009
    4e60:	0000000a 	.word	0x0000000a
    4e64:	0000000b 	.word	0x0000000b
    4e68:	00000020 	.word	0x00000020
    4e6c:	00000021 	.word	0x00000021
    4e70:	00000022 	.word	0x00000022
    4e74:	00000023 	.word	0x00000023
    4e78:	00000028 	.word	0x00000028
    4e7c:	00000029 	.word	0x00000029
    4e80:	00000024 	.word	0x00000024
    4e84:	00000025 	.word	0x00000025
    4e88:	00000026 	.word	0x00000026
    4e8c:	00000027 	.word	0x00000027
    4e90:	00000008 	.word	0x00000008
    4e94:	00000009 	.word	0x00000009

00004e98 <_adc_biasrefbuf_pos>:
    4e98:	00000600                                ....

00004e9c <_adc_apbcmasks>:
    4e9c:	00020000 00040000                       ........

00004ea4 <_adc_biascomp_pos>:
    4ea4:	00000903                                ....

00004ea8 <_adc_gclk_ids>:
    4ea8:	00002221                                !"..

00004eac <_adc_extchannel_msb>:
    4eac:	0000000b 0000000b                       ........

00004eb4 <_adc_biascomp_addr>:
    4eb4:	00806020 00806020                        `.. `..

00004ebc <_adc_biasrefbuf_addr>:
    4ebc:	00806020 00806020                        `.. `..

00004ec4 <_tcc_intflag>:
    4ec4:	00000001 00000002 00000004 00000008     ................
    4ed4:	00001000 00002000 00004000 00008000     ..... ...@......
    4ee4:	00010000 00020000 00040000 00080000     ................
    4ef4:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    4f04:	42001400 42001800 0c0b0a09 00000e0d     ...B...B........
    4f14:	00001fc6 00001fc2 00001fc2 00001ff4     ................
    4f24:	00001ff4 00001fde 00001fcc 00001fe4     ................
    4f34:	000021e0 000021c0 000021c0 00002216     .!...!...!..."..
    4f44:	000021d2 000021ee 000021c4 000021fc     .!...!...!...!..

00004f54 <adc_interrupt_vectors.13804>:
    4f54:	00001a19 72616579 20642520 746e6f6d     ....year %d mont
    4f64:	64252068 79616420 20642520 00000a0d     h %d day %d ....
    4f74:	44200d0a 68637369 65677261 6769735f     .. Discharge_sig
    4f84:	5f6c616e 5f636461 75736572 6920746c     nal_adc_result i
    4f94:	25203a73 0a0d2064 00000000 43200d0a     s: %d ........ C
    4fa4:	67726168 69735f65 6c616e67 6364615f     harge_signal_adc
    4fb4:	7365725f 20746c75 203a7369 0d206425     _result is: %d .
    4fc4:	0000000a 72616863 5f726567 74617473     ....charger_stat
    4fd4:	25207375 0a0d2064 00000000 6d6d6f63     us %d ......comm
    4fe4:	54646e61 20657079 25203d3d 00000064     andType == %d...
    4ff4:	74746162 5f797265 72616863 635f6567     battery_charge_c
    5004:	75636c61 6974616c 000d6e6f 706d6574     alculation..temp
    5014:	74617265 20657275 0000003a 20646c25     erature :...%ld 
    5024:	00000a0d 45200d0a 6e657478 20646564     ...... Extended 
    5034:	6d204446 61737365 72206567 69656365     FD message recei
    5044:	20646576 52206e69 75622078 72656666     ved in Rx buffer
    5054:	6854202e 65722065 76696563 64206465     . The received d
    5064:	20617461 203a7369 0000000d 53200d0a     ata is: ...... S
    5074:	646e6174 20647261 6d204446 61737365     tandard FD messa
    5084:	72206567 69656365 20646576 52206e69     ge received in R
    5094:	75622078 72656666 6854202e 65722065     x buffer. The re
    50a4:	76696563 64206465 20617461 203a7369     ceived data is: 
    50b4:	0000000d 64252020 00000000 000d0a0d     ....  %d........
    50c4:	53200d0a 646e6174 20647261 6d204446     .. Standard FD m
    50d4:	61737365 72206567 69656365 20646576     essage received 
    50e4:	46206e69 204f4649 54202e30 72206568     in FIFO 0. The r
    50f4:	69656365 20646576 61746164 3a736920     eceived data is:
    5104:	00000d20 53200d0a 646e6174 20647261      ..... Standard 
    5114:	6d726f6e 6d206c61 61737365 72206567     normal message r
    5124:	69656365 20646576 46206e69 204f4649     eceived in FIFO 
    5134:	54202e30 72206568 69656365 20646576     0. The received 
    5144:	61746164 3a736920 00000d20 45200d0a     data is: ..... E
    5154:	6e657478 20646564 6d204446 61737365     xtended FD messa
    5164:	72206567 69656365 20646576 46206e69     ge received in F
    5174:	204f4649 54202e31 72206568 69656365     IFO 1. The recei
    5184:	20646576 61746164 3a736920 00000d20     ved data is: ...
    5194:	746f7250 6c6f636f 72726520 202c726f     Protocol error, 
    51a4:	61656c70 64206573 6c62756f 68632065     please double ch
    51b4:	206b6365 20656874 636f6c63 6e69206b     eck the clock in
    51c4:	6f777420 616f6220 2e736472 0d0a0d20      two boards. ...
    51d4:	00000000 6d6d6f43 20646e61 65636552     ....Command Rece
    51e4:	64657669 00000d21 00000043              ived!...C...

000051f0 <_global_impure_ptr>:
    51f0:	20000034                                4.. 

000051f4 <__sf_fake_stdin>:
	...

00005214 <__sf_fake_stdout>:
	...

00005234 <__sf_fake_stderr>:
	...
    5254:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5264:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5274:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5284:	00006665                                ef..

00005288 <_init>:
    5288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    528a:	46c0      	nop			; (mov r8, r8)
    528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    528e:	bc08      	pop	{r3}
    5290:	469e      	mov	lr, r3
    5292:	4770      	bx	lr

00005294 <__init_array_start>:
    5294:	000000e5 	.word	0x000000e5

00005298 <_fini>:
    5298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    529a:	46c0      	nop			; (mov r8, r8)
    529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    529e:	bc08      	pop	{r3}
    52a0:	469e      	mov	lr, r3
    52a2:	4770      	bx	lr

000052a4 <__fini_array_start>:
    52a4:	000000bd 	.word	0x000000bd
