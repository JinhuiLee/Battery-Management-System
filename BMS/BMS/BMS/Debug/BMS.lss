
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005390  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005390  00005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000094  20000000  00005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000488  20000098  00005430  00020094  2**3
                  ALLOC
  4 .stack        00002000  20000520  000058b8  00020094  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .debug_info   00042da9  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000058a3  00000000  00000000  00062ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008417  00000000  00000000  00068761  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000868  00000000  00000000  00070b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a68  00000000  00000000  000713e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023241  00000000  00000000  00071e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000132a6  00000000  00000000  00095089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a698f  00000000  00000000  000a832f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c00  00000000  00000000  0014ecc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 25 00 20 29 26 00 00 25 26 00 00 25 26 00 00      %. )&..%&..%&..
	...
      2c:	25 26 00 00 00 00 00 00 00 00 00 00 25 26 00 00     %&..........%&..
      3c:	25 26 00 00 25 26 00 00 25 26 00 00 c1 09 00 00     %&..%&..%&......
      4c:	25 26 00 00 25 26 00 00 dd 0b 00 00 25 26 00 00     %&..%&......%&..
      5c:	25 26 00 00 a1 0d 00 00 19 19 00 00 29 19 00 00     %&..........)...
      6c:	39 19 00 00 49 19 00 00 59 19 00 00 69 19 00 00     9...I...Y...i...
      7c:	89 30 00 00 25 26 00 00 89 0c 00 00 99 0c 00 00     .0..%&..........
      8c:	a9 0c 00 00 25 26 00 00 25 26 00 00 25 26 00 00     ....%&..%&..%&..
      9c:	25 26 00 00 25 26 00 00 41 07 00 00 51 07 00 00     %&..%&..A...Q...
      ac:	25 26 00 00 25 26 00 00 25 26 00 00 25 26 00 00     %&..%&..%&..%&..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000098 	.word	0x20000098
      dc:	00000000 	.word	0x00000000
      e0:	00005398 	.word	0x00005398

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000009c 	.word	0x2000009c
     110:	00005398 	.word	0x00005398
     114:	00005398 	.word	0x00005398
     118:	00000000 	.word	0x00000000

0000011c <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_adc_get_inst_index+0x1c>)
     11e:	4298      	cmp	r0, r3
     120:	d008      	beq.n	134 <_adc_get_inst_index+0x18>
     122:	4a06      	ldr	r2, [pc, #24]	; (13c <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     124:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     126:	4290      	cmp	r0, r2
     128:	d001      	beq.n	12e <_adc_get_inst_index+0x12>
}
     12a:	0018      	movs	r0, r3
     12c:	4770      	bx	lr
     12e:	3301      	adds	r3, #1
			return i;
     130:	b2db      	uxtb	r3, r3
     132:	e7fa      	b.n	12a <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     134:	2300      	movs	r3, #0
     136:	e7fb      	b.n	130 <_adc_get_inst_index+0x14>
     138:	42004400 	.word	0x42004400
     13c:	42004800 	.word	0x42004800

00000140 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     140:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     142:	2300      	movs	r3, #0
     144:	2200      	movs	r2, #0
     146:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     148:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     14a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     14c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     14e:	2100      	movs	r1, #0
     150:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     152:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     154:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     156:	2401      	movs	r4, #1
     158:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     15a:	24c0      	movs	r4, #192	; 0xc0
     15c:	0164      	lsls	r4, r4, #5
     15e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     160:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     162:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     164:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     166:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     168:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     16a:	242a      	movs	r4, #42	; 0x2a
     16c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     16e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     170:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     172:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     174:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     176:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     178:	3c06      	subs	r4, #6
     17a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     17c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     17e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     180:	7541      	strb	r1, [r0, #21]
}
     182:	bd10      	pop	{r4, pc}

00000184 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	46de      	mov	lr, fp
     188:	4657      	mov	r7, sl
     18a:	464e      	mov	r6, r9
     18c:	4645      	mov	r5, r8
     18e:	b5e0      	push	{r5, r6, r7, lr}
     190:	b09f      	sub	sp, #124	; 0x7c
     192:	0005      	movs	r5, r0
     194:	000e      	movs	r6, r1
     196:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     198:	0008      	movs	r0, r1
     19a:	4b98      	ldr	r3, [pc, #608]	; (3fc <adc_init+0x278>)
     19c:	4798      	blx	r3
     19e:	0004      	movs	r4, r0
     1a0:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1a2:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1a4:	4a96      	ldr	r2, [pc, #600]	; (400 <adc_init+0x27c>)
     1a6:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     1a8:	0080      	lsls	r0, r0, #2
     1aa:	4996      	ldr	r1, [pc, #600]	; (404 <adc_init+0x280>)
     1ac:	5841      	ldr	r1, [r0, r1]
     1ae:	430b      	orrs	r3, r1
     1b0:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b2:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d506      	bpl.n	1c8 <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     1ba:	b01f      	add	sp, #124	; 0x7c
     1bc:	bc3c      	pop	{r2, r3, r4, r5}
     1be:	4690      	mov	r8, r2
     1c0:	4699      	mov	r9, r3
     1c2:	46a2      	mov	sl, r4
     1c4:	46ab      	mov	fp, r5
     1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     1ca:	8c13      	ldrh	r3, [r2, #32]
     1cc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     1ce:	2b00      	cmp	r3, #0
     1d0:	d1fb      	bne.n	1ca <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4ef      	bmi.n	1ba <adc_init+0x36>
	module_inst->reference = config->reference;
     1da:	787b      	ldrb	r3, [r7, #1]
     1dc:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1e2:	4a89      	ldr	r2, [pc, #548]	; (408 <adc_init+0x284>)
     1e4:	69d3      	ldr	r3, [r2, #28]
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60ab      	str	r3, [r5, #8]
     1f0:	60eb      	str	r3, [r5, #12]
     1f2:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1f8:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     1fc:	00a3      	lsls	r3, r4, #2
     1fe:	4a83      	ldr	r2, [pc, #524]	; (40c <adc_init+0x288>)
     200:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     202:	232a      	movs	r3, #42	; 0x2a
     204:	5cfb      	ldrb	r3, [r7, r3]
     206:	2b00      	cmp	r3, #0
     208:	d105      	bne.n	216 <adc_init+0x92>
     20a:	7b3b      	ldrb	r3, [r7, #12]
     20c:	2b00      	cmp	r3, #0
     20e:	d102      	bne.n	216 <adc_init+0x92>
		module_inst->software_trigger = true;
     210:	3301      	adds	r3, #1
     212:	776b      	strb	r3, [r5, #29]
     214:	e001      	b.n	21a <adc_init+0x96>
		module_inst->software_trigger = false;
     216:	2300      	movs	r3, #0
     218:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     21a:	682b      	ldr	r3, [r5, #0]
     21c:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21e:	783b      	ldrb	r3, [r7, #0]
     220:	aa04      	add	r2, sp, #16
     222:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     224:	4b7a      	ldr	r3, [pc, #488]	; (410 <adc_init+0x28c>)
     226:	5d1e      	ldrb	r6, [r3, r4]
     228:	0011      	movs	r1, r2
     22a:	0030      	movs	r0, r6
     22c:	4b79      	ldr	r3, [pc, #484]	; (414 <adc_init+0x290>)
     22e:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     230:	0030      	movs	r0, r6
     232:	4b79      	ldr	r3, [pc, #484]	; (418 <adc_init+0x294>)
     234:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     236:	793b      	ldrb	r3, [r7, #4]
     238:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     23a:	ae06      	add	r6, sp, #24
     23c:	4b77      	ldr	r3, [pc, #476]	; (41c <adc_init+0x298>)
     23e:	469c      	mov	ip, r3
     240:	0032      	movs	r2, r6
     242:	0019      	movs	r1, r3
     244:	c949      	ldmia	r1!, {r0, r3, r6}
     246:	c249      	stmia	r2!, {r0, r3, r6}
     248:	c949      	ldmia	r1!, {r0, r3, r6}
     24a:	c249      	stmia	r2!, {r0, r3, r6}
     24c:	c949      	ldmia	r1!, {r0, r3, r6}
     24e:	c249      	stmia	r2!, {r0, r3, r6}
     250:	c949      	ldmia	r1!, {r0, r3, r6}
     252:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     254:	a912      	add	r1, sp, #72	; 0x48
     256:	4663      	mov	r3, ip
     258:	3330      	adds	r3, #48	; 0x30
     25a:	000a      	movs	r2, r1
     25c:	cb43      	ldmia	r3!, {r0, r1, r6}
     25e:	c243      	stmia	r2!, {r0, r1, r6}
     260:	cb43      	ldmia	r3!, {r0, r1, r6}
     262:	c243      	stmia	r2!, {r0, r1, r6}
     264:	cb43      	ldmia	r3!, {r0, r1, r6}
     266:	c243      	stmia	r2!, {r0, r1, r6}
     268:	cb43      	ldmia	r3!, {r0, r1, r6}
     26a:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     26c:	9b01      	ldr	r3, [sp, #4]
     26e:	2b00      	cmp	r3, #0
     270:	d004      	beq.n	27c <adc_init+0xf8>
		pinmapping = pinmapping1;
     272:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     274:	2b01      	cmp	r3, #1
     276:	d002      	beq.n	27e <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     278:	2100      	movs	r1, #0
     27a:	e000      	b.n	27e <adc_init+0xfa>
		pinmapping = pinmapping0;
     27c:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     27e:	00a3      	lsls	r3, r4, #2
     280:	4a67      	ldr	r2, [pc, #412]	; (420 <adc_init+0x29c>)
     282:	589b      	ldr	r3, [r3, r2]
     284:	469b      	mov	fp, r3
     286:	4598      	cmp	r8, r3
     288:	d922      	bls.n	2d0 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     28a:	88fb      	ldrh	r3, [r7, #6]
     28c:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     28e:	ae06      	add	r6, sp, #24
     290:	4b62      	ldr	r3, [pc, #392]	; (41c <adc_init+0x298>)
     292:	469c      	mov	ip, r3
     294:	0032      	movs	r2, r6
     296:	0019      	movs	r1, r3
     298:	c949      	ldmia	r1!, {r0, r3, r6}
     29a:	c249      	stmia	r2!, {r0, r3, r6}
     29c:	c949      	ldmia	r1!, {r0, r3, r6}
     29e:	c249      	stmia	r2!, {r0, r3, r6}
     2a0:	c949      	ldmia	r1!, {r0, r3, r6}
     2a2:	c249      	stmia	r2!, {r0, r3, r6}
     2a4:	c949      	ldmia	r1!, {r0, r3, r6}
     2a6:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     2a8:	a912      	add	r1, sp, #72	; 0x48
     2aa:	4663      	mov	r3, ip
     2ac:	3330      	adds	r3, #48	; 0x30
     2ae:	000a      	movs	r2, r1
     2b0:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b2:	c243      	stmia	r2!, {r0, r1, r6}
     2b4:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b6:	c243      	stmia	r2!, {r0, r1, r6}
     2b8:	cb43      	ldmia	r3!, {r0, r1, r6}
     2ba:	c243      	stmia	r2!, {r0, r1, r6}
     2bc:	cb43      	ldmia	r3!, {r0, r1, r6}
     2be:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     2c0:	9a01      	ldr	r2, [sp, #4]
     2c2:	2a00      	cmp	r2, #0
     2c4:	d012      	beq.n	2ec <adc_init+0x168>
		pinmapping = pinmapping1;
     2c6:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     2c8:	2a01      	cmp	r2, #1
     2ca:	d010      	beq.n	2ee <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     2cc:	2300      	movs	r3, #0
     2ce:	e00e      	b.n	2ee <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d0:	4643      	mov	r3, r8
     2d2:	0098      	lsls	r0, r3, #2
     2d4:	5840      	ldr	r0, [r0, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	a905      	add	r1, sp, #20
     2d8:	2300      	movs	r3, #0
     2da:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2dc:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2de:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e0:	3301      	adds	r3, #1
     2e2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b4f      	ldr	r3, [pc, #316]	; (424 <adc_init+0x2a0>)
     2e8:	4798      	blx	r3
     2ea:	e7ce      	b.n	28a <adc_init+0x106>
		pinmapping = pinmapping0;
     2ec:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     2ee:	45d8      	cmp	r8, fp
     2f0:	d90a      	bls.n	308 <adc_init+0x184>
     2f2:	2100      	movs	r1, #0
     2f4:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     2f6:	2301      	movs	r3, #1
     2f8:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     2fa:	4b48      	ldr	r3, [pc, #288]	; (41c <adc_init+0x298>)
     2fc:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     2fe:	9403      	str	r4, [sp, #12]
     300:	465b      	mov	r3, fp
     302:	9302      	str	r3, [sp, #8]
     304:	46ab      	mov	fp, r5
     306:	e020      	b.n	34a <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     308:	4642      	mov	r2, r8
     30a:	0090      	lsls	r0, r2, #2
     30c:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     30e:	a905      	add	r1, sp, #20
     310:	2300      	movs	r3, #0
     312:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     314:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     316:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     318:	3301      	adds	r3, #1
     31a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     31c:	b2c0      	uxtb	r0, r0
     31e:	4b41      	ldr	r3, [pc, #260]	; (424 <adc_init+0x2a0>)
     320:	4798      	blx	r3
     322:	e7e6      	b.n	2f2 <adc_init+0x16e>
		pinmapping = pinmapping0;
     324:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     326:	0089      	lsls	r1, r1, #2
     328:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32a:	a905      	add	r1, sp, #20
     32c:	2300      	movs	r3, #0
     32e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     330:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     332:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     334:	464b      	mov	r3, r9
     336:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     338:	b2c0      	uxtb	r0, r0
     33a:	4b3a      	ldr	r3, [pc, #232]	; (424 <adc_init+0x2a0>)
     33c:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     33e:	3601      	adds	r6, #1
     340:	b2f6      	uxtb	r6, r6
     342:	0031      	movs	r1, r6
     344:	9b02      	ldr	r3, [sp, #8]
     346:	429e      	cmp	r6, r3
     348:	d823      	bhi.n	392 <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     34a:	464b      	mov	r3, r9
     34c:	40b3      	lsls	r3, r6
     34e:	693a      	ldr	r2, [r7, #16]
     350:	421a      	tst	r2, r3
     352:	d0f4      	beq.n	33e <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     354:	a806      	add	r0, sp, #24
     356:	0003      	movs	r3, r0
     358:	4642      	mov	r2, r8
     35a:	ca31      	ldmia	r2!, {r0, r4, r5}
     35c:	c331      	stmia	r3!, {r0, r4, r5}
     35e:	ca31      	ldmia	r2!, {r0, r4, r5}
     360:	c331      	stmia	r3!, {r0, r4, r5}
     362:	ca31      	ldmia	r2!, {r0, r4, r5}
     364:	c331      	stmia	r3!, {r0, r4, r5}
     366:	ca31      	ldmia	r2!, {r0, r4, r5}
     368:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     36a:	a812      	add	r0, sp, #72	; 0x48
     36c:	4643      	mov	r3, r8
     36e:	3330      	adds	r3, #48	; 0x30
     370:	0002      	movs	r2, r0
     372:	cb31      	ldmia	r3!, {r0, r4, r5}
     374:	c231      	stmia	r2!, {r0, r4, r5}
     376:	cb31      	ldmia	r3!, {r0, r4, r5}
     378:	c231      	stmia	r2!, {r0, r4, r5}
     37a:	cb31      	ldmia	r3!, {r0, r4, r5}
     37c:	c231      	stmia	r2!, {r0, r4, r5}
     37e:	cb31      	ldmia	r3!, {r0, r4, r5}
     380:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     382:	9a01      	ldr	r2, [sp, #4]
     384:	2a00      	cmp	r2, #0
     386:	d0cd      	beq.n	324 <adc_init+0x1a0>
		pinmapping = pinmapping1;
     388:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     38a:	2a01      	cmp	r2, #1
     38c:	d0cb      	beq.n	326 <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     38e:	2300      	movs	r3, #0
     390:	e7c9      	b.n	326 <adc_init+0x1a2>
     392:	465d      	mov	r5, fp
     394:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     396:	7b7b      	ldrb	r3, [r7, #13]
     398:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     39a:	7bba      	ldrb	r2, [r7, #14]
     39c:	01d2      	lsls	r2, r2, #7
     39e:	4313      	orrs	r3, r2
     3a0:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     3a2:	4652      	mov	r2, sl
     3a4:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     3a6:	7d3b      	ldrb	r3, [r7, #20]
     3a8:	01db      	lsls	r3, r3, #7
			| (config->reference);
     3aa:	787a      	ldrb	r2, [r7, #1]
     3ac:	4313      	orrs	r3, r2
     3ae:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     3b0:	4652      	mov	r2, sl
     3b2:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     3b4:	78fb      	ldrb	r3, [r7, #3]
     3b6:	2b34      	cmp	r3, #52	; 0x34
     3b8:	d900      	bls.n	3bc <adc_init+0x238>
     3ba:	e14f      	b.n	65c <adc_init+0x4d8>
     3bc:	009b      	lsls	r3, r3, #2
     3be:	4a1a      	ldr	r2, [pc, #104]	; (428 <adc_init+0x2a4>)
     3c0:	58d3      	ldr	r3, [r2, r3]
     3c2:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3c4:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     3c6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     3c8:	2102      	movs	r1, #2
     3ca:	e032      	b.n	432 <adc_init+0x2ae>
		adjres = config->divide_result;
     3cc:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     3ce:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2610      	movs	r6, #16
     3d2:	e02e      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3d4:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     3d6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3d8:	2101      	movs	r1, #1
     3da:	e02a      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3dc:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     3de:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3e0:	2100      	movs	r1, #0
     3e2:	e026      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     3e6:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     3e8:	2100      	movs	r1, #0
     3ea:	e022      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     3ee:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     3f0:	2100      	movs	r1, #0
     3f2:	e01e      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3f4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     3f6:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     3f8:	2100      	movs	r1, #0
     3fa:	e01a      	b.n	432 <adc_init+0x2ae>
     3fc:	0000011d 	.word	0x0000011d
     400:	40000800 	.word	0x40000800
     404:	00004e98 	.word	0x00004e98
     408:	40001800 	.word	0x40001800
     40c:	20000460 	.word	0x20000460
     410:	00004ec0 	.word	0x00004ec0
     414:	000024cd 	.word	0x000024cd
     418:	0000245d 	.word	0x0000245d
     41c:	00004e38 	.word	0x00004e38
     420:	00004eb8 	.word	0x00004eb8
     424:	000025c9 	.word	0x000025c9
     428:	00004d64 	.word	0x00004d64
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42c:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     430:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     432:	0109      	lsls	r1, r1, #4
     434:	2370      	movs	r3, #112	; 0x70
     436:	400b      	ands	r3, r1
     438:	4313      	orrs	r3, r2
     43a:	4652      	mov	r2, sl
     43c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     43e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     440:	8c13      	ldrh	r3, [r2, #32]
     442:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     444:	2b00      	cmp	r3, #0
     446:	d1fb      	bne.n	440 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     448:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     44a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     44c:	2b3f      	cmp	r3, #63	; 0x3f
     44e:	d900      	bls.n	452 <adc_init+0x2ce>
     450:	e6b3      	b.n	1ba <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     452:	7bfa      	ldrb	r2, [r7, #15]
     454:	01d2      	lsls	r2, r2, #7
     456:	4313      	orrs	r3, r2
     458:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     45a:	4652      	mov	r2, sl
     45c:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     45e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     460:	8c13      	ldrh	r3, [r2, #32]
     462:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     464:	2b00      	cmp	r3, #0
     466:	d1fb      	bne.n	460 <adc_init+0x2dc>
			config->clock_prescaler;
     468:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     46a:	4652      	mov	r2, sl
     46c:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     46e:	2324      	movs	r3, #36	; 0x24
     470:	5cfb      	ldrb	r3, [r7, r3]
     472:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     474:	7b3a      	ldrb	r2, [r7, #12]
     476:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     478:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     47a:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     47c:	4313      	orrs	r3, r2
     47e:	7aba      	ldrb	r2, [r7, #10]
     480:	0052      	lsls	r2, r2, #1
     482:	4313      	orrs	r3, r2
     484:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     486:	4652      	mov	r2, sl
     488:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     48a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     48c:	8c13      	ldrh	r3, [r2, #32]
     48e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     490:	2b00      	cmp	r3, #0
     492:	d1fb      	bne.n	48c <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     494:	8b3b      	ldrh	r3, [r7, #24]
     496:	2b00      	cmp	r3, #0
     498:	d020      	beq.n	4dc <adc_init+0x358>
		switch (resolution) {
     49a:	2e10      	cmp	r6, #16
     49c:	d100      	bne.n	4a0 <adc_init+0x31c>
     49e:	e0bf      	b.n	620 <adc_init+0x49c>
     4a0:	d800      	bhi.n	4a4 <adc_init+0x320>
     4a2:	e07f      	b.n	5a4 <adc_init+0x420>
     4a4:	2e20      	cmp	r6, #32
     4a6:	d100      	bne.n	4aa <adc_init+0x326>
     4a8:	e09c      	b.n	5e4 <adc_init+0x460>
     4aa:	2e30      	cmp	r6, #48	; 0x30
     4ac:	d116      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     4ae:	7afa      	ldrb	r2, [r7, #11]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d00a      	beq.n	4ca <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     4b4:	69fa      	ldr	r2, [r7, #28]
     4b6:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4ba:	2aff      	cmp	r2, #255	; 0xff
     4bc:	d900      	bls.n	4c0 <adc_init+0x33c>
     4be:	e67c      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     4c0:	6a3a      	ldr	r2, [r7, #32]
     4c2:	3280      	adds	r2, #128	; 0x80
     4c4:	2aff      	cmp	r2, #255	; 0xff
     4c6:	d900      	bls.n	4ca <adc_init+0x346>
     4c8:	e677      	b.n	1ba <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     4ca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4cc:	69fa      	ldr	r2, [r7, #28]
     4ce:	2aff      	cmp	r2, #255	; 0xff
     4d0:	dd00      	ble.n	4d4 <adc_init+0x350>
     4d2:	e672      	b.n	1ba <adc_init+0x36>
     4d4:	6a3a      	ldr	r2, [r7, #32]
     4d6:	2aff      	cmp	r2, #255	; 0xff
     4d8:	dd00      	ble.n	4dc <adc_init+0x358>
     4da:	e66e      	b.n	1ba <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     4dc:	4652      	mov	r2, sl
     4de:	8952      	ldrh	r2, [r2, #10]
     4e0:	4313      	orrs	r3, r2
     4e2:	4652      	mov	r2, sl
     4e4:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     4e6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4e8:	8c13      	ldrh	r3, [r2, #32]
     4ea:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	d1fb      	bne.n	4e8 <adc_init+0x364>
	adc_module->WINLT.reg =
     4f0:	8bbb      	ldrh	r3, [r7, #28]
     4f2:	4652      	mov	r2, sl
     4f4:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
     4f6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4f8:	8c13      	ldrh	r3, [r2, #32]
     4fa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4fc:	2b00      	cmp	r3, #0
     4fe:	d1fb      	bne.n	4f8 <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     500:	8c3b      	ldrh	r3, [r7, #32]
     502:	4652      	mov	r2, sl
     504:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
     506:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     508:	8c13      	ldrh	r3, [r2, #32]
     50a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     50c:	2b00      	cmp	r3, #0
     50e:	d1fb      	bne.n	508 <adc_init+0x384>
			config->positive_input;
     510:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
     512:	88fa      	ldrh	r2, [r7, #6]
     514:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     516:	4652      	mov	r2, sl
     518:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     51a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     51c:	8c13      	ldrh	r3, [r2, #32]
     51e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     520:	2b00      	cmp	r3, #0
     522:	d1fb      	bne.n	51c <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
     524:	332a      	adds	r3, #42	; 0x2a
     526:	5cfb      	ldrb	r3, [r7, r3]
     528:	4652      	mov	r2, sl
     52a:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
     52c:	2307      	movs	r3, #7
     52e:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
     530:	331d      	adds	r3, #29
     532:	5cfb      	ldrb	r3, [r7, r3]
     534:	2b00      	cmp	r3, #0
     536:	d01d      	beq.n	574 <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     53a:	4a49      	ldr	r2, [pc, #292]	; (660 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
     53c:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     53e:	4293      	cmp	r3, r2
     540:	d900      	bls.n	544 <adc_init+0x3c0>
     542:	e63a      	b.n	1ba <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     544:	4652      	mov	r2, sl
     546:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
     548:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     54a:	8c13      	ldrh	r3, [r2, #32]
     54c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     54e:	2b00      	cmp	r3, #0
     550:	d1fb      	bne.n	54a <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
     552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     554:	2380      	movs	r3, #128	; 0x80
     556:	011b      	lsls	r3, r3, #4
     558:	18d3      	adds	r3, r2, r3
     55a:	4941      	ldr	r1, [pc, #260]	; (660 <adc_init+0x4dc>)
     55c:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     560:	428b      	cmp	r3, r1
     562:	d900      	bls.n	566 <adc_init+0x3e2>
     564:	e629      	b.n	1ba <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     566:	4653      	mov	r3, sl
     568:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
     574:	00a2      	lsls	r2, r4, #2
     576:	4b3b      	ldr	r3, [pc, #236]	; (664 <adc_init+0x4e0>)
     578:	58d3      	ldr	r3, [r2, r3]
     57a:	493b      	ldr	r1, [pc, #236]	; (668 <adc_init+0x4e4>)
     57c:	5d09      	ldrb	r1, [r1, r4]
     57e:	681b      	ldr	r3, [r3, #0]
     580:	40cb      	lsrs	r3, r1
     582:	021b      	lsls	r3, r3, #8
     584:	21e0      	movs	r1, #224	; 0xe0
     586:	00c9      	lsls	r1, r1, #3
     588:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
     58a:	4938      	ldr	r1, [pc, #224]	; (66c <adc_init+0x4e8>)
     58c:	5852      	ldr	r2, [r2, r1]
     58e:	4938      	ldr	r1, [pc, #224]	; (670 <adc_init+0x4ec>)
     590:	5d09      	ldrb	r1, [r1, r4]
     592:	6812      	ldr	r2, [r2, #0]
     594:	40ca      	lsrs	r2, r1
     596:	2107      	movs	r1, #7
     598:	400a      	ands	r2, r1
			) |
     59a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     59c:	4652      	mov	r2, sl
     59e:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
     5a2:	e60a      	b.n	1ba <adc_init+0x36>
		switch (resolution) {
     5a4:	2e00      	cmp	r6, #0
     5a6:	d199      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5a8:	7afa      	ldrb	r2, [r7, #11]
     5aa:	2a00      	cmp	r2, #0
     5ac:	d00f      	beq.n	5ce <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
     5ae:	69fa      	ldr	r2, [r7, #28]
     5b0:	2180      	movs	r1, #128	; 0x80
     5b2:	0109      	lsls	r1, r1, #4
     5b4:	468c      	mov	ip, r1
     5b6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5b8:	4929      	ldr	r1, [pc, #164]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5bc:	428a      	cmp	r2, r1
     5be:	d900      	bls.n	5c2 <adc_init+0x43e>
     5c0:	e5fb      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
     5c2:	6a3a      	ldr	r2, [r7, #32]
     5c4:	4462      	add	r2, ip
     5c6:	4926      	ldr	r1, [pc, #152]	; (660 <adc_init+0x4dc>)
     5c8:	428a      	cmp	r2, r1
     5ca:	d900      	bls.n	5ce <adc_init+0x44a>
     5cc:	e5f5      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
     5ce:	4a24      	ldr	r2, [pc, #144]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5d2:	69f9      	ldr	r1, [r7, #28]
     5d4:	4291      	cmp	r1, r2
     5d6:	dd00      	ble.n	5da <adc_init+0x456>
     5d8:	e5ef      	b.n	1ba <adc_init+0x36>
     5da:	6a39      	ldr	r1, [r7, #32]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x45e>
     5e0:	e5eb      	b.n	1ba <adc_init+0x36>
     5e2:	e77b      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5e4:	7afa      	ldrb	r2, [r7, #11]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d00f      	beq.n	60a <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
     5ea:	69fa      	ldr	r2, [r7, #28]
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	0089      	lsls	r1, r1, #2
     5f0:	468c      	mov	ip, r1
     5f2:	4462      	add	r2, ip
			if (config->differential_mode &&
     5f4:	491f      	ldr	r1, [pc, #124]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5f8:	428a      	cmp	r2, r1
     5fa:	d900      	bls.n	5fe <adc_init+0x47a>
     5fc:	e5dd      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -512 ||
     5fe:	6a3a      	ldr	r2, [r7, #32]
     600:	4462      	add	r2, ip
     602:	491c      	ldr	r1, [pc, #112]	; (674 <adc_init+0x4f0>)
     604:	428a      	cmp	r2, r1
     606:	d900      	bls.n	60a <adc_init+0x486>
     608:	e5d7      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
     60a:	4a1a      	ldr	r2, [pc, #104]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     60c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     60e:	69f9      	ldr	r1, [r7, #28]
     610:	4291      	cmp	r1, r2
     612:	dd00      	ble.n	616 <adc_init+0x492>
     614:	e5d1      	b.n	1ba <adc_init+0x36>
     616:	6a39      	ldr	r1, [r7, #32]
     618:	4291      	cmp	r1, r2
     61a:	dd00      	ble.n	61e <adc_init+0x49a>
     61c:	e5cd      	b.n	1ba <adc_init+0x36>
     61e:	e75d      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     620:	7afa      	ldrb	r2, [r7, #11]
     622:	2a00      	cmp	r2, #0
     624:	d00f      	beq.n	646 <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
     626:	69fa      	ldr	r2, [r7, #28]
     628:	2180      	movs	r1, #128	; 0x80
     62a:	0209      	lsls	r1, r1, #8
     62c:	468c      	mov	ip, r1
     62e:	4462      	add	r2, ip
			if (config->differential_mode &&
     630:	4911      	ldr	r1, [pc, #68]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			if (config->differential_mode &&
     634:	428a      	cmp	r2, r1
     636:	d900      	bls.n	63a <adc_init+0x4b6>
     638:	e5bf      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
     63a:	6a3a      	ldr	r2, [r7, #32]
     63c:	4462      	add	r2, ip
     63e:	490e      	ldr	r1, [pc, #56]	; (678 <adc_init+0x4f4>)
     640:	428a      	cmp	r2, r1
     642:	d900      	bls.n	646 <adc_init+0x4c2>
     644:	e5b9      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
     646:	4a0c      	ldr	r2, [pc, #48]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     648:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     64a:	69f9      	ldr	r1, [r7, #28]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x4ce>
     650:	e5b3      	b.n	1ba <adc_init+0x36>
     652:	6a39      	ldr	r1, [r7, #32]
     654:	4291      	cmp	r1, r2
     656:	dd00      	ble.n	65a <adc_init+0x4d6>
     658:	e5af      	b.n	1ba <adc_init+0x36>
     65a:	e73f      	b.n	4dc <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
     65c:	2017      	movs	r0, #23
     65e:	e5ac      	b.n	1ba <adc_init+0x36>
     660:	00000fff 	.word	0x00000fff
     664:	00004eac 	.word	0x00004eac
     668:	00004eb4 	.word	0x00004eb4
     66c:	00004ea0 	.word	0x00004ea0
     670:	00004ea8 	.word	0x00004ea8
     674:	000003ff 	.word	0x000003ff
     678:	0000ffff 	.word	0x0000ffff

0000067c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     67e:	0080      	lsls	r0, r0, #2
     680:	4b2e      	ldr	r3, [pc, #184]	; (73c <_adc_interrupt_handler+0xc0>)
     682:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     684:	6823      	ldr	r3, [r4, #0]
     686:	799d      	ldrb	r5, [r3, #6]
     688:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     68a:	07ea      	lsls	r2, r5, #31
     68c:	d52d      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     68e:	7ee2      	ldrb	r2, [r4, #27]
     690:	07d2      	lsls	r2, r2, #31
     692:	d52a      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
     694:	7ea2      	ldrb	r2, [r4, #26]
     696:	07d2      	lsls	r2, r2, #31
     698:	d527      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     69a:	2201      	movs	r2, #1
     69c:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     69e:	6962      	ldr	r2, [r4, #20]
     6a0:	1c93      	adds	r3, r2, #2
     6a2:	6163      	str	r3, [r4, #20]
     6a4:	6823      	ldr	r3, [r4, #0]
     6a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6a8:	b29b      	uxth	r3, r3
     6aa:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     6ac:	8b23      	ldrh	r3, [r4, #24]
     6ae:	3b01      	subs	r3, #1
     6b0:	b29b      	uxth	r3, r3
     6b2:	8323      	strh	r3, [r4, #24]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d015      	beq.n	6e4 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     6b8:	7f63      	ldrb	r3, [r4, #29]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d015      	beq.n	6ea <_adc_interrupt_handler+0x6e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6be:	6822      	ldr	r2, [r4, #0]
     6c0:	79d3      	ldrb	r3, [r2, #7]
     6c2:	b25b      	sxtb	r3, r3
     6c4:	2b00      	cmp	r3, #0
     6c6:	db10      	blt.n	6ea <_adc_interrupt_handler+0x6e>
     6c8:	8c13      	ldrh	r3, [r2, #32]
     6ca:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6cc:	2b00      	cmp	r3, #0
     6ce:	d1fb      	bne.n	6c8 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6d0:	7e13      	ldrb	r3, [r2, #24]
     6d2:	2102      	movs	r1, #2
     6d4:	430b      	orrs	r3, r1
     6d6:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     6d8:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     6da:	8c13      	ldrh	r3, [r2, #32]
     6dc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     6de:	2b00      	cmp	r3, #0
     6e0:	d1fb      	bne.n	6da <_adc_interrupt_handler+0x5e>
     6e2:	e002      	b.n	6ea <_adc_interrupt_handler+0x6e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     6e4:	7f23      	ldrb	r3, [r4, #28]
     6e6:	2b05      	cmp	r3, #5
     6e8:	d016      	beq.n	718 <_adc_interrupt_handler+0x9c>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     6ea:	076b      	lsls	r3, r5, #29
     6ec:	d508      	bpl.n	700 <_adc_interrupt_handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ee:	2304      	movs	r3, #4
     6f0:	6822      	ldr	r2, [r4, #0]
     6f2:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6f4:	7ee3      	ldrb	r3, [r4, #27]
     6f6:	079b      	lsls	r3, r3, #30
     6f8:	d502      	bpl.n	700 <_adc_interrupt_handler+0x84>
     6fa:	7ea3      	ldrb	r3, [r4, #26]
     6fc:	079b      	lsls	r3, r3, #30
     6fe:	d414      	bmi.n	72a <_adc_interrupt_handler+0xae>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     700:	07ab      	lsls	r3, r5, #30
     702:	d508      	bpl.n	716 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     704:	2302      	movs	r3, #2
     706:	6822      	ldr	r2, [r4, #0]
     708:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     70a:	7ee3      	ldrb	r3, [r4, #27]
     70c:	075b      	lsls	r3, r3, #29
     70e:	d502      	bpl.n	716 <_adc_interrupt_handler+0x9a>
     710:	7ea3      	ldrb	r3, [r4, #26]
     712:	075b      	lsls	r3, r3, #29
     714:	d40d      	bmi.n	732 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     716:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     718:	2300      	movs	r3, #0
     71a:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     71c:	3301      	adds	r3, #1
     71e:	6822      	ldr	r2, [r4, #0]
     720:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     722:	0020      	movs	r0, r4
     724:	68a3      	ldr	r3, [r4, #8]
     726:	4798      	blx	r3
     728:	e7df      	b.n	6ea <_adc_interrupt_handler+0x6e>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     72a:	0020      	movs	r0, r4
     72c:	68e3      	ldr	r3, [r4, #12]
     72e:	4798      	blx	r3
     730:	e7e6      	b.n	700 <_adc_interrupt_handler+0x84>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     732:	6923      	ldr	r3, [r4, #16]
     734:	0020      	movs	r0, r4
     736:	4798      	blx	r3
}
     738:	e7ed      	b.n	716 <_adc_interrupt_handler+0x9a>
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000460 	.word	0x20000460

00000740 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     740:	b510      	push	{r4, lr}
     742:	2000      	movs	r0, #0
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <ADC0_Handler+0xc>)
     746:	4798      	blx	r3
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	0000067d 	.word	0x0000067d

00000750 <ADC1_Handler>:
     750:	b510      	push	{r4, lr}
     752:	2001      	movs	r0, #1
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <ADC1_Handler+0xc>)
     756:	4798      	blx	r3
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	0000067d 	.word	0x0000067d

00000760 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     760:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     762:	2104      	movs	r1, #4
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <rtc_calendar_enable+0x24>)
     766:	6019      	str	r1, [r3, #0]
	Rtc *const rtc_module = module->hw;
     768:	6801      	ldr	r1, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     76a:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     76c:	2b00      	cmp	r3, #0
     76e:	d1fc      	bne.n	76a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     770:	8813      	ldrh	r3, [r2, #0]
     772:	2102      	movs	r1, #2
     774:	430b      	orrs	r3, r1
     776:	8013      	strh	r3, [r2, #0]
	Rtc *const rtc_module = module->hw;
     778:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     77a:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     77c:	2b00      	cmp	r3, #0
     77e:	d1fc      	bne.n	77a <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     780:	4770      	bx	lr
     782:	46c0      	nop			; (mov r8, r8)
     784:	e000e100 	.word	0xe000e100

00000788 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     788:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     78a:	6803      	ldr	r3, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     78c:	2404      	movs	r4, #4
     78e:	2280      	movs	r2, #128	; 0x80
     790:	4908      	ldr	r1, [pc, #32]	; (7b4 <rtc_calendar_disable+0x2c>)
     792:	508c      	str	r4, [r1, r2]
	Rtc *const rtc_module = module->hw;
     794:	6801      	ldr	r1, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     796:	690a      	ldr	r2, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     798:	2a00      	cmp	r2, #0
     79a:	d1fc      	bne.n	796 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     79c:	4a06      	ldr	r2, [pc, #24]	; (7b8 <rtc_calendar_disable+0x30>)
     79e:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     7a0:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     7a2:	881a      	ldrh	r2, [r3, #0]
     7a4:	2102      	movs	r1, #2
     7a6:	438a      	bics	r2, r1
     7a8:	801a      	strh	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     7aa:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7ac:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     7ae:	2b00      	cmp	r3, #0
     7b0:	d1fc      	bne.n	7ac <rtc_calendar_disable+0x24>
		/* Wait for synchronization */
	}
}
     7b2:	bd10      	pop	{r4, pc}
     7b4:	e000e100 	.word	0xe000e100
     7b8:	ffff81ff 	.word	0xffff81ff

000007bc <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     7c0:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     7c2:	4b09      	ldr	r3, [pc, #36]	; (7e8 <rtc_calendar_reset+0x2c>)
     7c4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     7c6:	2300      	movs	r3, #0
     7c8:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     7ca:	8663      	strh	r3, [r4, #50]	; 0x32
	Rtc *const rtc_module = module->hw;
     7cc:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7ce:	6913      	ldr	r3, [r2, #16]
#endif

	while (rtc_calendar_is_syncing(module)) {
     7d0:	2b00      	cmp	r3, #0
     7d2:	d1fc      	bne.n	7ce <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     7d4:	882b      	ldrh	r3, [r5, #0]
     7d6:	2201      	movs	r2, #1
     7d8:	4313      	orrs	r3, r2
     7da:	802b      	strh	r3, [r5, #0]
	Rtc *const rtc_module = module->hw;
     7dc:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     7de:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d1fc      	bne.n	7de <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     7e4:	bd70      	pop	{r4, r5, r6, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	00000789 	.word	0x00000789

000007ec <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     7ec:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     7ee:	88cb      	ldrh	r3, [r1, #6]
     7f0:	88c2      	ldrh	r2, [r0, #6]
     7f2:	1a9a      	subs	r2, r3, r2
     7f4:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     7f6:	794b      	ldrb	r3, [r1, #5]
     7f8:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     7fa:	790c      	ldrb	r4, [r1, #4]
     7fc:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     7fe:	4323      	orrs	r3, r4
     800:	788c      	ldrb	r4, [r1, #2]
     802:	0324      	lsls	r4, r4, #12
     804:	4323      	orrs	r3, r4
     806:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     808:	7902      	ldrb	r2, [r0, #4]
     80a:	2a00      	cmp	r2, #0
     80c:	d105      	bne.n	81a <rtc_calendar_time_to_register_value+0x2e>
     80e:	78ca      	ldrb	r2, [r1, #3]
     810:	2a00      	cmp	r2, #0
     812:	d002      	beq.n	81a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     814:	2280      	movs	r2, #128	; 0x80
     816:	0252      	lsls	r2, r2, #9
     818:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     81a:	7848      	ldrb	r0, [r1, #1]
     81c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     81e:	780a      	ldrb	r2, [r1, #0]
     820:	4310      	orrs	r0, r2
     822:	4318      	orrs	r0, r3

	return register_value;
}
     824:	bd10      	pop	{r4, pc}

00000826 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     826:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     828:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     82a:	88c4      	ldrh	r4, [r0, #6]
     82c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     82e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     830:	018b      	lsls	r3, r1, #6
     832:	0f1b      	lsrs	r3, r3, #28
     834:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     836:	028b      	lsls	r3, r1, #10
     838:	0edb      	lsrs	r3, r3, #27
     83a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     83c:	7903      	ldrb	r3, [r0, #4]
     83e:	2b00      	cmp	r3, #0
     840:	d10c      	bne.n	85c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
     842:	040b      	lsls	r3, r1, #16
     844:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
     846:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & (0x10u << RTC_MODE2_CLOCK_HOUR_Pos)) != 0);
     848:	03cb      	lsls	r3, r1, #15
     84a:	0fdb      	lsrs	r3, r3, #31
     84c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     84e:	0988      	lsrs	r0, r1, #6
     850:	233f      	movs	r3, #63	; 0x3f
     852:	4018      	ands	r0, r3
     854:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     856:	4019      	ands	r1, r3
     858:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     85a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     85c:	03cb      	lsls	r3, r1, #15
     85e:	0edb      	lsrs	r3, r3, #27
     860:	7093      	strb	r3, [r2, #2]
     862:	e7f4      	b.n	84e <rtc_calendar_register_value_to_time+0x28>

00000864 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     864:	b570      	push	{r4, r5, r6, lr}
     866:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     868:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     86a:	4b05      	ldr	r3, [pc, #20]	; (880 <rtc_calendar_set_time+0x1c>)
     86c:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     86e:	692b      	ldr	r3, [r5, #16]

	while (rtc_calendar_is_syncing(module)) {
     870:	2b00      	cmp	r3, #0
     872:	d1fc      	bne.n	86e <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     874:	61a8      	str	r0, [r5, #24]
	Rtc *const rtc_module = module->hw;
     876:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     878:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     87a:	2b00      	cmp	r3, #0
     87c:	d1fc      	bne.n	878 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
     87e:	bd70      	pop	{r4, r5, r6, pc}
     880:	000007ed 	.word	0x000007ed

00000884 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     884:	b510      	push	{r4, lr}
     886:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     888:	6804      	ldr	r4, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     88a:	6923      	ldr	r3, [r4, #16]

	while (rtc_calendar_is_syncing(module)) {
     88c:	2b00      	cmp	r3, #0
     88e:	d1fc      	bne.n	88a <rtc_calendar_get_time+0x6>
		/* Wait for synchronization */
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     890:	69a1      	ldr	r1, [r4, #24]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     892:	4b01      	ldr	r3, [pc, #4]	; (898 <rtc_calendar_get_time+0x14>)
     894:	4798      	blx	r3
}
     896:	bd10      	pop	{r4, pc}
     898:	00000827 	.word	0x00000827

0000089c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     89e:	0005      	movs	r5, r0
     8a0:	000e      	movs	r6, r1
     8a2:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     8a4:	2017      	movs	r0, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     8a6:	2a01      	cmp	r2, #1
     8a8:	d900      	bls.n	8ac <rtc_calendar_set_alarm+0x10>
	while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
     8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     8ac:	682f      	ldr	r7, [r5, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     8ae:	0028      	movs	r0, r5
     8b0:	4b0a      	ldr	r3, [pc, #40]	; (8dc <rtc_calendar_set_alarm+0x40>)
     8b2:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8b4:	693b      	ldr	r3, [r7, #16]
	while (rtc_calendar_is_syncing(module)) {
     8b6:	2b00      	cmp	r3, #0
     8b8:	d1fc      	bne.n	8b4 <rtc_calendar_set_alarm+0x18>
     8ba:	00e4      	lsls	r4, r4, #3
     8bc:	193c      	adds	r4, r7, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     8be:	6220      	str	r0, [r4, #32]
	Rtc *const rtc_module = module->hw;
     8c0:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8c2:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
     8c4:	2b00      	cmp	r3, #0
     8c6:	d1fc      	bne.n	8c2 <rtc_calendar_set_alarm+0x26>
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     8c8:	7a32      	ldrb	r2, [r6, #8]
     8ca:	3324      	adds	r3, #36	; 0x24
     8cc:	54e2      	strb	r2, [r4, r3]
	Rtc *const rtc_module = module->hw;
     8ce:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8d0:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
     8d2:	2b00      	cmp	r3, #0
     8d4:	d1fc      	bne.n	8d0 <rtc_calendar_set_alarm+0x34>
	return STATUS_OK;
     8d6:	2000      	movs	r0, #0
     8d8:	e7e7      	b.n	8aa <rtc_calendar_set_alarm+0xe>
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	000007ed 	.word	0x000007ed

000008e0 <rtc_calendar_init>:
{
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	0005      	movs	r5, r0
     8e4:	0014      	movs	r4, r2
	module->hw = hw;
     8e6:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
     8e8:	4a16      	ldr	r2, [pc, #88]	; (944 <rtc_calendar_init+0x64>)
     8ea:	6951      	ldr	r1, [r2, #20]
     8ec:	2380      	movs	r3, #128	; 0x80
     8ee:	009b      	lsls	r3, r3, #2
     8f0:	430b      	orrs	r3, r1
     8f2:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     8f4:	2200      	movs	r2, #0
     8f6:	4b14      	ldr	r3, [pc, #80]	; (948 <rtc_calendar_init+0x68>)
     8f8:	611a      	str	r2, [r3, #16]
	rtc_calendar_reset(module);
     8fa:	4b14      	ldr	r3, [pc, #80]	; (94c <rtc_calendar_init+0x6c>)
     8fc:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     8fe:	78e3      	ldrb	r3, [r4, #3]
     900:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     902:	88a3      	ldrh	r3, [r4, #4]
     904:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     906:	4b12      	ldr	r3, [pc, #72]	; (950 <rtc_calendar_init+0x70>)
     908:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
     90a:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     90c:	8823      	ldrh	r3, [r4, #0]
	if(config->enable_read_sync) {
     90e:	79a1      	ldrb	r1, [r4, #6]
     910:	2900      	cmp	r1, #0
     912:	d113      	bne.n	93c <rtc_calendar_init+0x5c>
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     914:	3108      	adds	r1, #8
     916:	430b      	orrs	r3, r1
	if (!(config->clock_24h)) {
     918:	78e1      	ldrb	r1, [r4, #3]
     91a:	2900      	cmp	r1, #0
     91c:	d101      	bne.n	922 <rtc_calendar_init+0x42>
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     91e:	3140      	adds	r1, #64	; 0x40
     920:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     922:	78a1      	ldrb	r1, [r4, #2]
     924:	2900      	cmp	r1, #0
     926:	d001      	beq.n	92c <rtc_calendar_init+0x4c>
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     928:	2180      	movs	r1, #128	; 0x80
     92a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     92c:	8013      	strh	r3, [r2, #0]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     92e:	0021      	movs	r1, r4
     930:	3108      	adds	r1, #8
     932:	2200      	movs	r2, #0
     934:	0028      	movs	r0, r5
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <rtc_calendar_init+0x74>)
     938:	4798      	blx	r3
}
     93a:	bd70      	pop	{r4, r5, r6, pc}
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
     93c:	4906      	ldr	r1, [pc, #24]	; (958 <rtc_calendar_init+0x78>)
     93e:	430b      	orrs	r3, r1
     940:	e7ea      	b.n	918 <rtc_calendar_init+0x38>
     942:	46c0      	nop			; (mov r8, r8)
     944:	40000800 	.word	0x40000800
     948:	40001400 	.word	0x40001400
     94c:	000007bd 	.word	0x000007bd
     950:	20000468 	.word	0x20000468
     954:	0000089d 	.word	0x0000089d
     958:	00008008 	.word	0x00008008

0000095c <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     95c:	2a09      	cmp	r2, #9
     95e:	d901      	bls.n	964 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     960:	2017      	movs	r0, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     962:	4770      	bx	lr
		module->callbacks[callback_type] = callback;
     964:	1c93      	adds	r3, r2, #2
     966:	009b      	lsls	r3, r3, #2
     968:	5019      	str	r1, [r3, r0]
		module->registered_callback |= (1 << callback_type);
     96a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
     96c:	2101      	movs	r1, #1
     96e:	4091      	lsls	r1, r2
     970:	430b      	orrs	r3, r1
     972:	b29b      	uxth	r3, r3
     974:	8603      	strh	r3, [r0, #48]	; 0x30
     976:	2000      	movs	r0, #0
	return status;
     978:	e7f3      	b.n	962 <rtc_calendar_register_callback+0x6>
	...

0000097c <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     97c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     97e:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     980:	2909      	cmp	r1, #9
     982:	d011      	beq.n	9a8 <rtc_calendar_enable_callback+0x2c>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     984:	2907      	cmp	r1, #7
     986:	d912      	bls.n	9ae <rtc_calendar_enable_callback+0x32>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     988:	2380      	movs	r3, #128	; 0x80
     98a:	005b      	lsls	r3, r3, #1
     98c:	000c      	movs	r4, r1
     98e:	3c08      	subs	r4, #8
     990:	40a3      	lsls	r3, r4
     992:	2480      	movs	r4, #128	; 0x80
     994:	0064      	lsls	r4, r4, #1
     996:	4023      	ands	r3, r4
     998:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     99a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     99c:	2201      	movs	r2, #1
     99e:	408a      	lsls	r2, r1
     9a0:	4313      	orrs	r3, r2
     9a2:	b29b      	uxth	r3, r3
     9a4:	8643      	strh	r3, [r0, #50]	; 0x32
}
     9a6:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <rtc_calendar_enable_callback+0x40>)
     9aa:	8153      	strh	r3, [r2, #10]
     9ac:	e7f5      	b.n	99a <rtc_calendar_enable_callback+0x1e>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     9ae:	2401      	movs	r4, #1
     9b0:	408c      	lsls	r4, r1
     9b2:	23ff      	movs	r3, #255	; 0xff
     9b4:	4023      	ands	r3, r4
     9b6:	8153      	strh	r3, [r2, #10]
     9b8:	e7ef      	b.n	99a <rtc_calendar_enable_callback+0x1e>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	ffff8000 	.word	0xffff8000

000009c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c2:	46de      	mov	lr, fp
     9c4:	4657      	mov	r7, sl
     9c6:	464e      	mov	r6, r9
     9c8:	4645      	mov	r5, r8
     9ca:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     9cc:	4b24      	ldr	r3, [pc, #144]	; (a60 <RTC_Handler+0xa0>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     9d2:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     9d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     9d6:	4652      	mov	r2, sl
     9d8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     9da:	401a      	ands	r2, r3
     9dc:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     9de:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     9e0:	8973      	ldrh	r3, [r6, #10]
     9e2:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     9e4:	b21a      	sxth	r2, r3
     9e6:	2a00      	cmp	r2, #0
     9e8:	db08      	blt.n	9fc <RTC_Handler+0x3c>
     9ea:	27ff      	movs	r7, #255	; 0xff
     9ec:	401f      	ands	r7, r3
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     9ee:	d02a      	beq.n	a46 <RTC_Handler+0x86>
     9f0:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     9f2:	2301      	movs	r3, #1
     9f4:	4699      	mov	r9, r3
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     9f6:	33fe      	adds	r3, #254	; 0xfe
     9f8:	469b      	mov	fp, r3
     9fa:	e014      	b.n	a26 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     9fc:	4643      	mov	r3, r8
     9fe:	059b      	lsls	r3, r3, #22
     a00:	d407      	bmi.n	a12 <RTC_Handler+0x52>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     a02:	4b18      	ldr	r3, [pc, #96]	; (a64 <RTC_Handler+0xa4>)
     a04:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     a06:	bc3c      	pop	{r2, r3, r4, r5}
     a08:	4690      	mov	r8, r2
     a0a:	4699      	mov	r9, r3
     a0c:	46a2      	mov	sl, r4
     a0e:	46ab      	mov	fp, r5
     a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     a12:	4653      	mov	r3, sl
     a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a16:	4798      	blx	r3
     a18:	e7f3      	b.n	a02 <RTC_Handler+0x42>
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     a1a:	465b      	mov	r3, fp
     a1c:	401d      	ands	r5, r3
     a1e:	81b5      	strh	r5, [r6, #12]
     a20:	3401      	adds	r4, #1
		for (i = 0;i < RTC_PER_NUM;i++) {
     a22:	2c08      	cmp	r4, #8
     a24:	d0ef      	beq.n	a06 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     a26:	0023      	movs	r3, r4
     a28:	464d      	mov	r5, r9
     a2a:	40a5      	lsls	r5, r4
     a2c:	422f      	tst	r7, r5
     a2e:	d0f4      	beq.n	a1a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     a30:	4642      	mov	r2, r8
     a32:	4122      	asrs	r2, r4
     a34:	4649      	mov	r1, r9
     a36:	4211      	tst	r1, r2
     a38:	d0ef      	beq.n	a1a <RTC_Handler+0x5a>
				module->callbacks[i]();
     a3a:	3302      	adds	r3, #2
     a3c:	009b      	lsls	r3, r3, #2
     a3e:	4652      	mov	r2, sl
     a40:	589b      	ldr	r3, [r3, r2]
     a42:	4798      	blx	r3
     a44:	e7e9      	b.n	a1a <RTC_Handler+0x5a>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     a46:	05db      	lsls	r3, r3, #23
     a48:	d5dd      	bpl.n	a06 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     a4a:	4643      	mov	r3, r8
     a4c:	05db      	lsls	r3, r3, #23
     a4e:	d403      	bmi.n	a58 <RTC_Handler+0x98>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     a50:	2380      	movs	r3, #128	; 0x80
     a52:	005b      	lsls	r3, r3, #1
     a54:	81b3      	strh	r3, [r6, #12]
}
     a56:	e7d6      	b.n	a06 <RTC_Handler+0x46>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     a58:	4653      	mov	r3, sl
     a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a5c:	4798      	blx	r3
     a5e:	e7f7      	b.n	a50 <RTC_Handler+0x90>
     a60:	20000468 	.word	0x20000468
     a64:	ffff8000 	.word	0xffff8000

00000a68 <tsens_init>:
 * \retval STATUS_ERR_INVALID_ARG   Invalid argument(s) were provided
 * \retval STATUS_BUSY              The module is busy with a reset operation
 * \retval STATUS_ERR_DENIED        The module is enabled
 */
enum status_code tsens_init(struct tsens_config *config)
{
     a68:	b510      	push	{r4, lr}
     a6a:	b082      	sub	sp, #8
     a6c:	0004      	movs	r4, r0
     a6e:	4a28      	ldr	r2, [pc, #160]	; (b10 <tsens_init+0xa8>)
     a70:	6951      	ldr	r1, [r2, #20]
     a72:	2380      	movs	r3, #128	; 0x80
     a74:	015b      	lsls	r3, r3, #5
     a76:	430b      	orrs	r3, r1
     a78:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     a7a:	4b26      	ldr	r3, [pc, #152]	; (b14 <tsens_init+0xac>)
     a7c:	781b      	ldrb	r3, [r3, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     a7e:	2005      	movs	r0, #5
	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     a80:	07db      	lsls	r3, r3, #31
     a82:	d501      	bpl.n	a88 <tsens_init+0x20>
		return STATUS_ERR_DENIED;
	}

	/* Write configuration to module */
	return _tsens_set_config(config);
}
     a84:	b002      	add	sp, #8
     a86:	bd10      	pop	{r4, pc}
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     a88:	4b22      	ldr	r3, [pc, #136]	; (b14 <tsens_init+0xac>)
     a8a:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_DENIED;
     a8c:	3017      	adds	r0, #23
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     a8e:	079b      	lsls	r3, r3, #30
     a90:	d4f8      	bmi.n	a84 <tsens_init+0x1c>
	gclk_chan_conf.source_generator = config->clock_source;
     a92:	a901      	add	r1, sp, #4
     a94:	7823      	ldrb	r3, [r4, #0]
     a96:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(TSENS_GCLK_ID, &gclk_chan_conf);
     a98:	3817      	subs	r0, #23
     a9a:	4b1f      	ldr	r3, [pc, #124]	; (b18 <tsens_init+0xb0>)
     a9c:	4798      	blx	r3
	system_gclk_chan_enable(TSENS_GCLK_ID);
     a9e:	2005      	movs	r0, #5
     aa0:	4b1e      	ldr	r3, [pc, #120]	; (b1c <tsens_init+0xb4>)
     aa2:	4798      	blx	r3
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);
     aa4:	78a3      	ldrb	r3, [r4, #2]
     aa6:	019b      	lsls	r3, r3, #6
     aa8:	b2db      	uxtb	r3, r3
     aaa:	4a1a      	ldr	r2, [pc, #104]	; (b14 <tsens_init+0xac>)
     aac:	7013      	strb	r3, [r2, #0]
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
     aae:	7923      	ldrb	r3, [r4, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d006      	beq.n	ac2 <tsens_init+0x5a>
				return STATUS_ERR_INVALID_ARG;
     ab4:	2017      	movs	r0, #23
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
     ab6:	68a2      	ldr	r2, [r4, #8]
     ab8:	3228      	adds	r2, #40	; 0x28
     aba:	dbe3      	blt.n	a84 <tsens_init+0x1c>
     abc:	68e2      	ldr	r2, [r4, #12]
     abe:	2a69      	cmp	r2, #105	; 0x69
     ac0:	dce0      	bgt.n	a84 <tsens_init+0x1c>
			(config->free_running << TSENS_CTRLC_FREERUN_Pos) | \
     ac2:	7862      	ldrb	r2, [r4, #1]
     ac4:	0112      	lsls	r2, r2, #4
     ac6:	431a      	orrs	r2, r3
     ac8:	b2d2      	uxtb	r2, r2
	TSENS->CTRLC.reg =
     aca:	4b12      	ldr	r3, [pc, #72]	; (b14 <tsens_init+0xac>)
     acc:	709a      	strb	r2, [r3, #2]
	TSENS->WINLT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
     ace:	68e2      	ldr	r2, [r4, #12]
     ad0:	0212      	lsls	r2, r2, #8
     ad2:	0a12      	lsrs	r2, r2, #8
     ad4:	611a      	str	r2, [r3, #16]
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
     ad6:	68a2      	ldr	r2, [r4, #8]
     ad8:	0212      	lsls	r2, r2, #8
     ada:	0a12      	lsrs	r2, r2, #8
     adc:	615a      	str	r2, [r3, #20]
	TSENS->EVCTRL.reg = config->event_action;
     ade:	7c22      	ldrb	r2, [r4, #16]
     ae0:	70da      	strb	r2, [r3, #3]
	TSENS->INTENCLR.reg =
     ae2:	220f      	movs	r2, #15
     ae4:	711a      	strb	r2, [r3, #4]
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
     ae6:	4a0e      	ldr	r2, [pc, #56]	; (b20 <tsens_init+0xb8>)
     ae8:	6812      	ldr	r2, [r2, #0]
	uint32_t tsens_fcal = \
     aea:	0511      	lsls	r1, r2, #20
     aec:	0e89      	lsrs	r1, r1, #26
	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     aee:	0212      	lsls	r2, r2, #8
     af0:	20fc      	movs	r0, #252	; 0xfc
     af2:	0180      	lsls	r0, r0, #6
     af4:	4002      	ands	r2, r0
     af6:	430a      	orrs	r2, r1
     af8:	621a      	str	r2, [r3, #32]
	TSENS->GAIN.reg = TSENS_GAIN_GAIN(config->calibration.gain);
     afa:	6962      	ldr	r2, [r4, #20]
     afc:	0212      	lsls	r2, r2, #8
     afe:	0a12      	lsrs	r2, r2, #8
     b00:	619a      	str	r2, [r3, #24]
	TSENS->OFFSET.reg = TSENS_OFFSET_OFFSETC(config->calibration.offset);
     b02:	69a2      	ldr	r2, [r4, #24]
     b04:	0212      	lsls	r2, r2, #8
     b06:	0a12      	lsrs	r2, r2, #8
     b08:	61da      	str	r2, [r3, #28]
	return STATUS_OK;
     b0a:	2000      	movs	r0, #0
     b0c:	e7ba      	b.n	a84 <tsens_init+0x1c>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	40000800 	.word	0x40000800
     b14:	40003000 	.word	0x40003000
     b18:	000024cd 	.word	0x000024cd
     b1c:	0000245d 	.word	0x0000245d
     b20:	00806030 	.word	0x00806030

00000b24 <tsens_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void tsens_get_config_defaults(struct tsens_config *const config)
{
     b24:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     b26:	2300      	movs	r3, #0
     b28:	7003      	strb	r3, [r0, #0]
	config->free_running                  = false;
     b2a:	7043      	strb	r3, [r0, #1]
	config->run_in_standby                = false;
     b2c:	7083      	strb	r3, [r0, #2]
	config->window.window_mode            = TSENS_WINDOW_MODE_DISABLE;
     b2e:	7103      	strb	r3, [r0, #4]
	config->window.window_upper_value     = 0;
     b30:	60c3      	str	r3, [r0, #12]
	config->window.window_lower_value     = 0;
     b32:	6083      	str	r3, [r0, #8]
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;
     b34:	7403      	strb	r3, [r0, #16]

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
     b36:	4b06      	ldr	r3, [pc, #24]	; (b50 <tsens_get_config_defaults+0x2c>)
     b38:	681b      	ldr	r3, [r3, #0]
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
     b3a:	4a06      	ldr	r2, [pc, #24]	; (b54 <tsens_get_config_defaults+0x30>)
     b3c:	6814      	ldr	r4, [r2, #0]
	config->calibration.offset   = \
		((tsens_bits[0] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
     b3e:	0119      	lsls	r1, r3, #4
     b40:	0a09      	lsrs	r1, r1, #8
	config->calibration.offset   = \
     b42:	6181      	str	r1, [r0, #24]
	config->calibration.gain     = \
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
     b44:	0b1b      	lsrs	r3, r3, #12
		((tsens_bits[1] & TSENS_FUSES_GAIN_1_Msk) >> TSENS_FUSES_GAIN_1_Pos);
     b46:	220f      	movs	r2, #15
     b48:	4022      	ands	r2, r4
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
     b4a:	4313      	orrs	r3, r2
	config->calibration.gain     = \
     b4c:	6143      	str	r3, [r0, #20]
}
     b4e:	bd10      	pop	{r4, pc}
     b50:	00806030 	.word	0x00806030
     b54:	00806034 	.word	0x00806034

00000b58 <tsens_read>:
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     b58:	4b1f      	ldr	r3, [pc, #124]	; (bd8 <tsens_read+0x80>)
     b5a:	799a      	ldrb	r2, [r3, #6]
     b5c:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for TSENS Result Ready */
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     b5e:	2301      	movs	r3, #1
     b60:	4013      	ands	r3, r2
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     b62:	0791      	lsls	r1, r2, #30
     b64:	d501      	bpl.n	b6a <tsens_read+0x12>
		status_flags |= TSENS_STATUS_OVERRUN;
     b66:	2102      	movs	r1, #2
     b68:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     b6a:	0751      	lsls	r1, r2, #29
     b6c:	d501      	bpl.n	b72 <tsens_read+0x1a>
		status_flags |= TSENS_STATUS_WINDOW;
     b6e:	2104      	movs	r1, #4
     b70:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     b72:	0712      	lsls	r2, r2, #28
     b74:	d501      	bpl.n	b7a <tsens_read+0x22>
		status_flags |= TSENS_STATUS_OVERFLOW;
     b76:	2208      	movs	r2, #8
     b78:	4313      	orrs	r3, r2
{
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
     b7a:	2205      	movs	r2, #5
	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
     b7c:	07db      	lsls	r3, r3, #31
     b7e:	d401      	bmi.n	b84 <tsens_read+0x2c>
		tsens_clear_status(TSENS_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
	}

	return STATUS_OK;
}
     b80:	0010      	movs	r0, r2
     b82:	4770      	bx	lr
	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     b84:	4b14      	ldr	r3, [pc, #80]	; (bd8 <tsens_read+0x80>)
     b86:	79db      	ldrb	r3, [r3, #7]
		return STATUS_ERR_BAD_DATA;
     b88:	320e      	adds	r2, #14
	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     b8a:	07db      	lsls	r3, r3, #31
     b8c:	d4f8      	bmi.n	b80 <tsens_read+0x28>
	uint32_t temp = TSENS->VALUE.reg;
     b8e:	4b12      	ldr	r3, [pc, #72]	; (bd8 <tsens_read+0x80>)
     b90:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     b92:	021a      	lsls	r2, r3, #8
     b94:	d502      	bpl.n	b9c <tsens_read+0x44>
		temp |= ~TSENS_VALUE_MASK;
     b96:	22ff      	movs	r2, #255	; 0xff
     b98:	0612      	lsls	r2, r2, #24
     b9a:	4313      	orrs	r3, r2
	*result = temp * (-1);
     b9c:	425b      	negs	r3, r3
     b9e:	6003      	str	r3, [r0, #0]
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     ba0:	4a0d      	ldr	r2, [pc, #52]	; (bd8 <tsens_read+0x80>)
     ba2:	2301      	movs	r3, #1
     ba4:	7193      	strb	r3, [r2, #6]
	uint32_t int_flags = TSENS->INTFLAG.reg;
     ba6:	7992      	ldrb	r2, [r2, #6]
     ba8:	b2d2      	uxtb	r2, r2
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     baa:	4013      	ands	r3, r2
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     bac:	0791      	lsls	r1, r2, #30
     bae:	d501      	bpl.n	bb4 <tsens_read+0x5c>
		status_flags |= TSENS_STATUS_OVERRUN;
     bb0:	2102      	movs	r1, #2
     bb2:	430b      	orrs	r3, r1
	if (int_flags & TSENS_INTFLAG_WINMON) {
     bb4:	0751      	lsls	r1, r2, #29
     bb6:	d501      	bpl.n	bbc <tsens_read+0x64>
		status_flags |= TSENS_STATUS_WINDOW;
     bb8:	2104      	movs	r1, #4
     bba:	430b      	orrs	r3, r1
	if (int_flags & TSENS_INTFLAG_OVF) {
     bbc:	0712      	lsls	r2, r2, #28
     bbe:	d501      	bpl.n	bc4 <tsens_read+0x6c>
		status_flags |= TSENS_STATUS_OVERFLOW;
     bc0:	2208      	movs	r2, #8
     bc2:	4313      	orrs	r3, r2
	if (tsens_get_status() & TSENS_STATUS_OVERRUN) {
     bc4:	079b      	lsls	r3, r3, #30
     bc6:	d504      	bpl.n	bd2 <tsens_read+0x7a>
	TSENS->INTFLAG.reg = int_flags;
     bc8:	2202      	movs	r2, #2
     bca:	4b03      	ldr	r3, [pc, #12]	; (bd8 <tsens_read+0x80>)
     bcc:	719a      	strb	r2, [r3, #6]
		return STATUS_ERR_OVERFLOW;
     bce:	321c      	adds	r2, #28
     bd0:	e7d6      	b.n	b80 <tsens_read+0x28>
	return STATUS_OK;
     bd2:	2200      	movs	r2, #0
     bd4:	e7d4      	b.n	b80 <tsens_read+0x28>
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	40003000 	.word	0x40003000

00000bdc <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bde:	46c6      	mov	lr, r8
     be0:	b500      	push	{lr}
	struct tsens_module *module = _tsens_instances;
     be2:	4b14      	ldr	r3, [pc, #80]	; (c34 <TSENS_Handler+0x58>)
     be4:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     be6:	4b14      	ldr	r3, [pc, #80]	; (c38 <TSENS_Handler+0x5c>)
     be8:	799e      	ldrb	r6, [r3, #6]
     bea:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     bec:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     bee:	021a      	lsls	r2, r3, #8
     bf0:	d502      	bpl.n	bf8 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     bf2:	22ff      	movs	r2, #255	; 0xff
     bf4:	0612      	lsls	r2, r2, #24
     bf6:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     bf8:	693a      	ldr	r2, [r7, #16]
     bfa:	425b      	negs	r3, r3
     bfc:	6013      	str	r3, [r2, #0]
     bfe:	2400      	movs	r4, #0
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     c00:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     c02:	4b0d      	ldr	r3, [pc, #52]	; (c38 <TSENS_Handler+0x5c>)
     c04:	4698      	mov	r8, r3
     c06:	e002      	b.n	c0e <TSENS_Handler+0x32>
     c08:	3401      	adds	r4, #1
	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     c0a:	2c04      	cmp	r4, #4
     c0c:	d00f      	beq.n	c2e <TSENS_Handler+0x52>
     c0e:	b2e0      	uxtb	r0, r4
		if (flags & ((uint32_t)0x01 << i)) {
     c10:	0033      	movs	r3, r6
     c12:	40e3      	lsrs	r3, r4
     c14:	421d      	tst	r5, r3
     c16:	d0f7      	beq.n	c08 <TSENS_Handler+0x2c>
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     c18:	002b      	movs	r3, r5
     c1a:	40a3      	lsls	r3, r4
     c1c:	b2db      	uxtb	r3, r3
     c1e:	4642      	mov	r2, r8
     c20:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     c22:	00a3      	lsls	r3, r4, #2
     c24:	58fb      	ldr	r3, [r7, r3]
     c26:	2b00      	cmp	r3, #0
     c28:	d0ee      	beq.n	c08 <TSENS_Handler+0x2c>
				module->callback[i]((enum tsens_callback)i);
     c2a:	4798      	blx	r3
     c2c:	e7ec      	b.n	c08 <TSENS_Handler+0x2c>
			}
		}
	}
}
     c2e:	bc04      	pop	{r2}
     c30:	4690      	mov	r8, r2
     c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c34:	2000046c 	.word	0x2000046c
     c38:	40003000 	.word	0x40003000

00000c3c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3e:	46c6      	mov	lr, r8
     c40:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     c42:	0080      	lsls	r0, r0, #2
     c44:	4b0e      	ldr	r3, [pc, #56]	; (c80 <_tcc_interrupt_handler+0x44>)
     c46:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     c48:	683b      	ldr	r3, [r7, #0]
     c4a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     c50:	4013      	ands	r3, r2
     c52:	401e      	ands	r6, r3
     c54:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     c56:	4b0b      	ldr	r3, [pc, #44]	; (c84 <_tcc_interrupt_handler+0x48>)
     c58:	4698      	mov	r8, r3
     c5a:	e002      	b.n	c62 <_tcc_interrupt_handler+0x26>
     c5c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     c5e:	2c30      	cmp	r4, #48	; 0x30
     c60:	d00a      	beq.n	c78 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     c62:	4643      	mov	r3, r8
     c64:	58e5      	ldr	r5, [r4, r3]
     c66:	4235      	tst	r5, r6
     c68:	d0f8      	beq.n	c5c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     c6a:	193b      	adds	r3, r7, r4
     c6c:	685b      	ldr	r3, [r3, #4]
     c6e:	0038      	movs	r0, r7
     c70:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     c72:	683b      	ldr	r3, [r7, #0]
     c74:	62dd      	str	r5, [r3, #44]	; 0x2c
     c76:	e7f1      	b.n	c5c <_tcc_interrupt_handler+0x20>
		}
	}
}
     c78:	bc04      	pop	{r2}
     c7a:	4690      	mov	r8, r2
     c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	20000470 	.word	0x20000470
     c84:	00004ec4 	.word	0x00004ec4

00000c88 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     c88:	b510      	push	{r4, lr}
     c8a:	2000      	movs	r0, #0
     c8c:	4b01      	ldr	r3, [pc, #4]	; (c94 <TCC0_Handler+0xc>)
     c8e:	4798      	blx	r3
     c90:	bd10      	pop	{r4, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00000c3d 	.word	0x00000c3d

00000c98 <TCC1_Handler>:
     c98:	b510      	push	{r4, lr}
     c9a:	2001      	movs	r0, #1
     c9c:	4b01      	ldr	r3, [pc, #4]	; (ca4 <TCC1_Handler+0xc>)
     c9e:	4798      	blx	r3
     ca0:	bd10      	pop	{r4, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000c3d 	.word	0x00000c3d

00000ca8 <TCC2_Handler>:
     ca8:	b510      	push	{r4, lr}
     caa:	2002      	movs	r0, #2
     cac:	4b01      	ldr	r3, [pc, #4]	; (cb4 <TCC2_Handler+0xc>)
     cae:	4798      	blx	r3
     cb0:	bd10      	pop	{r4, pc}
     cb2:	46c0      	nop			; (mov r8, r8)
     cb4:	00000c3d 	.word	0x00000c3d

00000cb8 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     cb8:	2300      	movs	r3, #0
     cba:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     cbc:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     cbe:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     cc0:	2000      	movs	r0, #0
     cc2:	4770      	bx	lr

00000cc4 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     cc4:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     cc6:	4b0a      	ldr	r3, [pc, #40]	; (cf0 <events_add_hook+0x2c>)
     cc8:	691a      	ldr	r2, [r3, #16]
     cca:	2a00      	cmp	r2, #0
     ccc:	d102      	bne.n	cd4 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     cce:	6119      	str	r1, [r3, #16]
     cd0:	e004      	b.n	cdc <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     cd2:	001a      	movs	r2, r3
		while (tmp_hook->next != NULL) {
     cd4:	6893      	ldr	r3, [r2, #8]
     cd6:	2b00      	cmp	r3, #0
     cd8:	d1fb      	bne.n	cd2 <events_add_hook+0xe>
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     cda:	6091      	str	r1, [r2, #8]
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     cdc:	4b05      	ldr	r3, [pc, #20]	; (cf4 <events_add_hook+0x30>)
     cde:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     ce0:	05db      	lsls	r3, r3, #23
     ce2:	d403      	bmi.n	cec <events_add_hook+0x28>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ce4:	2280      	movs	r2, #128	; 0x80
     ce6:	0052      	lsls	r2, r2, #1
     ce8:	4b02      	ldr	r3, [pc, #8]	; (cf4 <events_add_hook+0x30>)
     cea:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     cec:	2000      	movs	r0, #0
     cee:	4770      	bx	lr
     cf0:	20000000 	.word	0x20000000
     cf4:	e000e100 	.word	0xe000e100

00000cf8 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     cf8:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     cfa:	2901      	cmp	r1, #1
     cfc:	d004      	beq.n	d08 <events_enable_interrupt_source+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     cfe:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d00:	2900      	cmp	r1, #0
     d02:	d00a      	beq.n	d1a <events_enable_interrupt_source+0x22>
	}

	return STATUS_OK;
}
     d04:	0018      	movs	r0, r3
     d06:	bd10      	pop	{r4, pc}
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     d08:	7800      	ldrb	r0, [r0, #0]
     d0a:	310f      	adds	r1, #15
     d0c:	4b07      	ldr	r3, [pc, #28]	; (d2c <events_enable_interrupt_source+0x34>)
     d0e:	4798      	blx	r3
     d10:	2384      	movs	r3, #132	; 0x84
     d12:	05db      	lsls	r3, r3, #23
     d14:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     d16:	2300      	movs	r3, #0
     d18:	e7f4      	b.n	d04 <events_enable_interrupt_source+0xc>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     d1a:	7800      	ldrb	r0, [r0, #0]
     d1c:	4b03      	ldr	r3, [pc, #12]	; (d2c <events_enable_interrupt_source+0x34>)
     d1e:	4798      	blx	r3
     d20:	2384      	movs	r3, #132	; 0x84
     d22:	05db      	lsls	r3, r3, #23
     d24:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     d26:	2300      	movs	r3, #0
     d28:	e7ec      	b.n	d04 <events_enable_interrupt_source+0xc>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000ddd 	.word	0x00000ddd

00000d30 <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     d30:	b510      	push	{r4, lr}
     d32:	0003      	movs	r3, r0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     d34:	2901      	cmp	r1, #1
     d36:	d003      	beq.n	d40 <events_is_interrupt_set+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     d38:	2000      	movs	r0, #0
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d3a:	2900      	cmp	r1, #0
     d3c:	d006      	beq.n	d4c <events_is_interrupt_set+0x1c>
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
}
     d3e:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     d40:	7800      	ldrb	r0, [r0, #0]
     d42:	310f      	adds	r1, #15
     d44:	4b07      	ldr	r3, [pc, #28]	; (d64 <events_is_interrupt_set+0x34>)
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	e003      	b.n	d54 <events_is_interrupt_set+0x24>
		bitpos = _events_find_bit_position(resource->channel,
     d4c:	7818      	ldrb	r0, [r3, #0]
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <events_is_interrupt_set+0x34>)
     d50:	4798      	blx	r3
     d52:	0003      	movs	r3, r0
	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     d54:	4a04      	ldr	r2, [pc, #16]	; (d68 <events_is_interrupt_set+0x38>)
     d56:	6890      	ldr	r0, [r2, #8]
     d58:	4018      	ands	r0, r3
     d5a:	1e43      	subs	r3, r0, #1
     d5c:	4198      	sbcs	r0, r3
     d5e:	b2c0      	uxtb	r0, r0
     d60:	e7ed      	b.n	d3e <events_is_interrupt_set+0xe>
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	00000ddd 	.word	0x00000ddd
     d68:	20000000 	.word	0x20000000

00000d6c <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     d6c:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     d6e:	2901      	cmp	r1, #1
     d70:	d004      	beq.n	d7c <events_ack_interrupt+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     d72:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     d74:	2900      	cmp	r1, #0
     d76:	d006      	beq.n	d86 <events_ack_interrupt+0x1a>
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;

	return STATUS_OK;
}
     d78:	0018      	movs	r0, r3
     d7a:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     d7c:	7800      	ldrb	r0, [r0, #0]
     d7e:	310f      	adds	r1, #15
     d80:	4b05      	ldr	r3, [pc, #20]	; (d98 <events_ack_interrupt+0x2c>)
     d82:	4798      	blx	r3
     d84:	e002      	b.n	d8c <events_ack_interrupt+0x20>
		bitpos = _events_find_bit_position(resource->channel,
     d86:	7800      	ldrb	r0, [r0, #0]
     d88:	4b03      	ldr	r3, [pc, #12]	; (d98 <events_ack_interrupt+0x2c>)
     d8a:	4798      	blx	r3
	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     d8c:	4b03      	ldr	r3, [pc, #12]	; (d9c <events_ack_interrupt+0x30>)
     d8e:	68da      	ldr	r2, [r3, #12]
     d90:	4310      	orrs	r0, r2
     d92:	60d8      	str	r0, [r3, #12]
	return STATUS_OK;
     d94:	2300      	movs	r3, #0
     d96:	e7ef      	b.n	d78 <events_ack_interrupt+0xc>
     d98:	00000ddd 	.word	0x00000ddd
     d9c:	20000000 	.word	0x20000000

00000da0 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     da0:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     da2:	4b0c      	ldr	r3, [pc, #48]	; (dd4 <EVSYS_Handler+0x34>)
     da4:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     da6:	2184      	movs	r1, #132	; 0x84
     da8:	05c9      	lsls	r1, r1, #23
     daa:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     dac:	6898      	ldr	r0, [r3, #8]
     dae:	4302      	orrs	r2, r0
     db0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     db2:	4b09      	ldr	r3, [pc, #36]	; (dd8 <EVSYS_Handler+0x38>)
     db4:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     db6:	2c00      	cmp	r4, #0
     db8:	d005      	beq.n	dc6 <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     dba:	6820      	ldr	r0, [r4, #0]
     dbc:	6863      	ldr	r3, [r4, #4]
     dbe:	4798      	blx	r3
		current_hook = current_hook->next;
     dc0:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     dc2:	2c00      	cmp	r4, #0
     dc4:	d1f9      	bne.n	dba <EVSYS_Handler+0x1a>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <EVSYS_Handler+0x34>)
     dc8:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     dca:	689a      	ldr	r2, [r3, #8]
     dcc:	438a      	bics	r2, r1
     dce:	609a      	str	r2, [r3, #8]
}
     dd0:	bd10      	pop	{r4, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20000000 	.word	0x20000000
     dd8:	0fff0fff 	.word	0x0fff0fff

00000ddc <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
     ddc:	1809      	adds	r1, r1, r0
     dde:	2001      	movs	r0, #1
     de0:	4088      	lsls	r0, r1

	return pos;
}
     de2:	4770      	bx	lr

00000de4 <_system_events_init>:
			MCLK->APBCMASK.reg |= mask;
     de4:	4906      	ldr	r1, [pc, #24]	; (e00 <_system_events_init+0x1c>)
     de6:	69cb      	ldr	r3, [r1, #28]
     de8:	2201      	movs	r2, #1
     dea:	4313      	orrs	r3, r2
     dec:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     dee:	2384      	movs	r3, #132	; 0x84
     df0:	05db      	lsls	r3, r3, #23
     df2:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     df4:	0019      	movs	r1, r3
     df6:	780b      	ldrb	r3, [r1, #0]
     df8:	4213      	tst	r3, r2
     dfa:	d1fc      	bne.n	df6 <_system_events_init+0x12>
	}
}
     dfc:	4770      	bx	lr
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	40000800 	.word	0x40000800

00000e04 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     e04:	2301      	movs	r3, #1
     e06:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     e08:	2300      	movs	r3, #0
     e0a:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     e0c:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     e0e:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     e10:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
     e12:	7143      	strb	r3, [r0, #5]
}
     e14:	4770      	bx	lr
	...

00000e18 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     e18:	b570      	push	{r4, r5, r6, lr}
     e1a:	b082      	sub	sp, #8
     e1c:	0005      	movs	r5, r0
     e1e:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     e20:	4b25      	ldr	r3, [pc, #148]	; (eb8 <events_allocate+0xa0>)
     e22:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     e24:	4b25      	ldr	r3, [pc, #148]	; (ebc <events_allocate+0xa4>)
     e26:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     e28:	07da      	lsls	r2, r3, #31
     e2a:	d50e      	bpl.n	e4a <events_allocate+0x32>
		tmp = tmp >> 1;
     e2c:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e2e:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     e30:	2201      	movs	r2, #1
     e32:	421a      	tst	r2, r3
     e34:	d00a      	beq.n	e4c <events_allocate+0x34>
		tmp = tmp >> 1;
     e36:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e38:	3401      	adds	r4, #1
     e3a:	b2e4      	uxtb	r4, r4
     e3c:	2c0c      	cmp	r4, #12
     e3e:	d1f8      	bne.n	e32 <events_allocate+0x1a>
	cpu_irq_leave_critical();
     e40:	4b1f      	ldr	r3, [pc, #124]	; (ec0 <events_allocate+0xa8>)
     e42:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     e44:	2014      	movs	r0, #20
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
     e46:	b002      	add	sp, #8
     e48:	bd70      	pop	{r4, r5, r6, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     e4a:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     e4c:	4a1b      	ldr	r2, [pc, #108]	; (ebc <events_allocate+0xa4>)
     e4e:	6811      	ldr	r1, [r2, #0]
     e50:	2301      	movs	r3, #1
     e52:	40a3      	lsls	r3, r4
     e54:	430b      	orrs	r3, r1
     e56:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     e58:	7913      	ldrb	r3, [r2, #4]
     e5a:	3b01      	subs	r3, #1
     e5c:	7113      	strb	r3, [r2, #4]
     e5e:	4b18      	ldr	r3, [pc, #96]	; (ec0 <events_allocate+0xa8>)
     e60:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     e62:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     e64:	2cff      	cmp	r4, #255	; 0xff
     e66:	d0ee      	beq.n	e46 <events_allocate+0x2e>
	resource->channel = new_channel;
     e68:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     e6a:	7873      	ldrb	r3, [r6, #1]
     e6c:	2b02      	cmp	r3, #2
     e6e:	d00a      	beq.n	e86 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     e70:	a901      	add	r1, sp, #4
     e72:	78f3      	ldrb	r3, [r6, #3]
     e74:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     e76:	3406      	adds	r4, #6
     e78:	b2e4      	uxtb	r4, r4
     e7a:	0020      	movs	r0, r4
     e7c:	4b11      	ldr	r3, [pc, #68]	; (ec4 <events_allocate+0xac>)
     e7e:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     e80:	0020      	movs	r0, r4
     e82:	4b11      	ldr	r3, [pc, #68]	; (ec8 <events_allocate+0xb0>)
     e84:	4798      	blx	r3
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     e86:	78b2      	ldrb	r2, [r6, #2]
     e88:	237f      	movs	r3, #127	; 0x7f
     e8a:	4013      	ands	r3, r2
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     e8c:	7932      	ldrb	r2, [r6, #4]
     e8e:	0392      	lsls	r2, r2, #14
     e90:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     e92:	7972      	ldrb	r2, [r6, #5]
     e94:	03d2      	lsls	r2, r2, #15
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     e96:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_PATH(config->path)                                 |
     e98:	7872      	ldrb	r2, [r6, #1]
     e9a:	0212      	lsls	r2, r2, #8
     e9c:	21c0      	movs	r1, #192	; 0xc0
     e9e:	0089      	lsls	r1, r1, #2
     ea0:	400a      	ands	r2, r1
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     ea2:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     ea4:	7832      	ldrb	r2, [r6, #0]
     ea6:	0292      	lsls	r2, r2, #10
     ea8:	21c0      	movs	r1, #192	; 0xc0
     eaa:	0109      	lsls	r1, r1, #4
     eac:	400a      	ands	r2, r1
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     eae:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     eb0:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
     eb2:	2000      	movs	r0, #0
     eb4:	e7c7      	b.n	e46 <events_allocate+0x2e>
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000f05 	.word	0x00000f05
     ebc:	20000000 	.word	0x20000000
     ec0:	00000f45 	.word	0x00000f45
     ec4:	000024cd 	.word	0x000024cd
     ec8:	0000245d 	.word	0x0000245d

00000ecc <events_is_busy>:

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     ecc:	2384      	movs	r3, #132	; 0x84
     ece:	05db      	lsls	r3, r3, #23
     ed0:	68db      	ldr	r3, [r3, #12]
	pos = 0x01UL << (start_offset + channel);
     ed2:	7802      	ldrb	r2, [r0, #0]
     ed4:	3210      	adds	r2, #16
     ed6:	2001      	movs	r0, #1
     ed8:	4090      	lsls	r0, r2
	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
     eda:	4018      	ands	r0, r3
     edc:	1e43      	subs	r3, r0, #1
     ede:	4198      	sbcs	r0, r3
     ee0:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
     ee2:	4770      	bx	lr

00000ee4 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
     ee4:	7802      	ldrb	r2, [r0, #0]
     ee6:	3201      	adds	r2, #1
     ee8:	231f      	movs	r3, #31
     eea:	4013      	ands	r3, r2
     eec:	2284      	movs	r2, #132	; 0x84
     eee:	05d2      	lsls	r2, r2, #23
     ef0:	3120      	adds	r1, #32
     ef2:	0089      	lsls	r1, r1, #2
     ef4:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
     ef6:	7803      	ldrb	r3, [r0, #0]
     ef8:	6841      	ldr	r1, [r0, #4]
     efa:	3308      	adds	r3, #8
     efc:	009b      	lsls	r3, r3, #2
     efe:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
     f00:	2000      	movs	r0, #0
     f02:	4770      	bx	lr

00000f04 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f04:	4b0c      	ldr	r3, [pc, #48]	; (f38 <cpu_irq_enter_critical+0x34>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	2b00      	cmp	r3, #0
     f0a:	d106      	bne.n	f1a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f0c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f10:	2b00      	cmp	r3, #0
     f12:	d007      	beq.n	f24 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f14:	2200      	movs	r2, #0
     f16:	4b09      	ldr	r3, [pc, #36]	; (f3c <cpu_irq_enter_critical+0x38>)
     f18:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f1a:	4a07      	ldr	r2, [pc, #28]	; (f38 <cpu_irq_enter_critical+0x34>)
     f1c:	6813      	ldr	r3, [r2, #0]
     f1e:	3301      	adds	r3, #1
     f20:	6013      	str	r3, [r2, #0]
}
     f22:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     f24:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f26:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f2a:	2200      	movs	r2, #0
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <cpu_irq_enter_critical+0x3c>)
     f2e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f30:	3201      	adds	r2, #1
     f32:	4b02      	ldr	r3, [pc, #8]	; (f3c <cpu_irq_enter_critical+0x38>)
     f34:	701a      	strb	r2, [r3, #0]
     f36:	e7f0      	b.n	f1a <cpu_irq_enter_critical+0x16>
     f38:	200000b4 	.word	0x200000b4
     f3c:	200000b8 	.word	0x200000b8
     f40:	20000014 	.word	0x20000014

00000f44 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f44:	4b08      	ldr	r3, [pc, #32]	; (f68 <cpu_irq_leave_critical+0x24>)
     f46:	681a      	ldr	r2, [r3, #0]
     f48:	3a01      	subs	r2, #1
     f4a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	2b00      	cmp	r3, #0
     f50:	d109      	bne.n	f66 <cpu_irq_leave_critical+0x22>
     f52:	4b06      	ldr	r3, [pc, #24]	; (f6c <cpu_irq_leave_critical+0x28>)
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b00      	cmp	r3, #0
     f58:	d005      	beq.n	f66 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f5a:	2201      	movs	r2, #1
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <cpu_irq_leave_critical+0x2c>)
     f5e:	701a      	strb	r2, [r3, #0]
     f60:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f64:	b662      	cpsie	i
	}
}
     f66:	4770      	bx	lr
     f68:	200000b4 	.word	0x200000b4
     f6c:	200000b8 	.word	0x200000b8
     f70:	20000014 	.word	0x20000014

00000f74 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     f74:	b5f0      	push	{r4, r5, r6, r7, lr}
     f76:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     f78:	ac01      	add	r4, sp, #4
     f7a:	2501      	movs	r5, #1
     f7c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     f7e:	2700      	movs	r7, #0
     f80:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f82:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f84:	0021      	movs	r1, r4
     f86:	200f      	movs	r0, #15
     f88:	4e06      	ldr	r6, [pc, #24]	; (fa4 <system_board_init+0x30>)
     f8a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f8c:	2280      	movs	r2, #128	; 0x80
     f8e:	0212      	lsls	r2, r2, #8
     f90:	2382      	movs	r3, #130	; 0x82
     f92:	05db      	lsls	r3, r3, #23
     f94:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     f96:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     f98:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     f9a:	0021      	movs	r1, r4
     f9c:	201c      	movs	r0, #28
     f9e:	47b0      	blx	r6
}
     fa0:	b003      	add	sp, #12
     fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa4:	0000148d 	.word	0x0000148d

00000fa8 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
     fa8:	6803      	ldr	r3, [r0, #0]
     faa:	4a0a      	ldr	r2, [pc, #40]	; (fd4 <_can_enable_peripheral_clock+0x2c>)
     fac:	4293      	cmp	r3, r2
     fae:	d003      	beq.n	fb8 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
     fb0:	4a09      	ldr	r2, [pc, #36]	; (fd8 <_can_enable_peripheral_clock+0x30>)
     fb2:	4293      	cmp	r3, r2
     fb4:	d007      	beq.n	fc6 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
     fb6:	4770      	bx	lr
	MCLK->AHBMASK.reg |= ahb_mask;
     fb8:	4a08      	ldr	r2, [pc, #32]	; (fdc <_can_enable_peripheral_clock+0x34>)
     fba:	6911      	ldr	r1, [r2, #16]
     fbc:	2380      	movs	r3, #128	; 0x80
     fbe:	005b      	lsls	r3, r3, #1
     fc0:	430b      	orrs	r3, r1
     fc2:	6113      	str	r3, [r2, #16]
     fc4:	e7f7      	b.n	fb6 <_can_enable_peripheral_clock+0xe>
     fc6:	4a05      	ldr	r2, [pc, #20]	; (fdc <_can_enable_peripheral_clock+0x34>)
     fc8:	6911      	ldr	r1, [r2, #16]
     fca:	2380      	movs	r3, #128	; 0x80
     fcc:	009b      	lsls	r3, r3, #2
     fce:	430b      	orrs	r3, r1
     fd0:	6113      	str	r3, [r2, #16]
     fd2:	e7f0      	b.n	fb6 <_can_enable_peripheral_clock+0xe>
     fd4:	42001c00 	.word	0x42001c00
     fd8:	42002000 	.word	0x42002000
     fdc:	40000800 	.word	0x40000800

00000fe0 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	000c      	movs	r4, r1
     fe4:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     fe6:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
     fe8:	4ba3      	ldr	r3, [pc, #652]	; (1278 <can_init+0x298>)
     fea:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     fec:	4ba3      	ldr	r3, [pc, #652]	; (127c <can_init+0x29c>)
     fee:	2200      	movs	r2, #0
     ff0:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     ff2:	782a      	ldrb	r2, [r5, #0]
     ff4:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
     ff6:	4ba2      	ldr	r3, [pc, #648]	; (1280 <can_init+0x2a0>)
     ff8:	429c      	cmp	r4, r3
     ffa:	d100      	bne.n	ffe <can_init+0x1e>
     ffc:	e0c6      	b.n	118c <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
     ffe:	4ba1      	ldr	r3, [pc, #644]	; (1284 <can_init+0x2a4>)
    1000:	429c      	cmp	r4, r3
    1002:	d100      	bne.n	1006 <can_init+0x26>
    1004:	e0fd      	b.n	1202 <can_init+0x222>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1006:	69a3      	ldr	r3, [r4, #24]
    1008:	2202      	movs	r2, #2
    100a:	4313      	orrs	r3, r2
    100c:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    100e:	2300      	movs	r3, #0
    1010:	22bc      	movs	r2, #188	; 0xbc
    1012:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    1014:	320c      	adds	r2, #12
    1016:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    1018:	4b9b      	ldr	r3, [pc, #620]	; (1288 <can_init+0x2a8>)
    101a:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    101c:	4b9b      	ldr	r3, [pc, #620]	; (128c <can_init+0x2ac>)
    101e:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    1020:	7bab      	ldrb	r3, [r5, #14]
    1022:	2b00      	cmp	r3, #0
    1024:	d004      	beq.n	1030 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    1026:	68e2      	ldr	r2, [r4, #12]
    1028:	2380      	movs	r3, #128	; 0x80
    102a:	041b      	lsls	r3, r3, #16
    102c:	4313      	orrs	r3, r2
    102e:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    1030:	786b      	ldrb	r3, [r5, #1]
    1032:	2b00      	cmp	r3, #0
    1034:	d003      	beq.n	103e <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
    1036:	68a3      	ldr	r3, [r4, #8]
    1038:	2240      	movs	r2, #64	; 0x40
    103a:	4313      	orrs	r3, r2
    103c:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    103e:	6962      	ldr	r2, [r4, #20]
    1040:	78ab      	ldrb	r3, [r5, #2]
    1042:	4313      	orrs	r3, r2
    1044:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    1046:	78eb      	ldrb	r3, [r5, #3]
    1048:	2b00      	cmp	r3, #0
    104a:	d004      	beq.n	1056 <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    104c:	69a2      	ldr	r2, [r4, #24]
    104e:	2380      	movs	r3, #128	; 0x80
    1050:	01db      	lsls	r3, r3, #7
    1052:	4313      	orrs	r3, r2
    1054:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    1056:	792b      	ldrb	r3, [r5, #4]
    1058:	2b00      	cmp	r3, #0
    105a:	d004      	beq.n	1066 <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    105c:	69a2      	ldr	r2, [r4, #24]
    105e:	2380      	movs	r3, #128	; 0x80
    1060:	019b      	lsls	r3, r3, #6
    1062:	4313      	orrs	r3, r2
    1064:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    1066:	796b      	ldrb	r3, [r5, #5]
    1068:	2b00      	cmp	r3, #0
    106a:	d004      	beq.n	1076 <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    106c:	69a2      	ldr	r2, [r4, #24]
    106e:	2380      	movs	r3, #128	; 0x80
    1070:	015b      	lsls	r3, r3, #5
    1072:	4313      	orrs	r3, r2
    1074:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    1076:	79ab      	ldrb	r3, [r5, #6]
    1078:	2b00      	cmp	r3, #0
    107a:	d103      	bne.n	1084 <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    107c:	69a3      	ldr	r3, [r4, #24]
    107e:	2240      	movs	r2, #64	; 0x40
    1080:	4313      	orrs	r3, r2
    1082:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    1084:	79eb      	ldrb	r3, [r5, #7]
    1086:	2b00      	cmp	r3, #0
    1088:	d003      	beq.n	1092 <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    108a:	69a3      	ldr	r3, [r4, #24]
    108c:	2210      	movs	r2, #16
    108e:	4313      	orrs	r3, r2
    1090:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    1092:	7a2b      	ldrb	r3, [r5, #8]
    1094:	2b00      	cmp	r3, #0
    1096:	d003      	beq.n	10a0 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    1098:	69a3      	ldr	r3, [r4, #24]
    109a:	2208      	movs	r2, #8
    109c:	4313      	orrs	r3, r2
    109e:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    10a0:	7a6b      	ldrb	r3, [r5, #9]
    10a2:	041b      	lsls	r3, r3, #16
    10a4:	22f0      	movs	r2, #240	; 0xf0
    10a6:	0312      	lsls	r2, r2, #12
    10a8:	4013      	ands	r3, r2
    10aa:	2201      	movs	r2, #1
    10ac:	4313      	orrs	r3, r2
    10ae:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    10b0:	7b2b      	ldrb	r3, [r5, #12]
    10b2:	7b6a      	ldrb	r2, [r5, #13]
    10b4:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    10b6:	896a      	ldrh	r2, [r5, #10]
    10b8:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    10ba:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    10bc:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    10be:	7beb      	ldrb	r3, [r5, #15]
    10c0:	021b      	lsls	r3, r3, #8
    10c2:	22fe      	movs	r2, #254	; 0xfe
    10c4:	01d2      	lsls	r2, r2, #7
    10c6:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    10c8:	7c29      	ldrb	r1, [r5, #16]
    10ca:	227f      	movs	r2, #127	; 0x7f
    10cc:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    10ce:	4313      	orrs	r3, r2
    10d0:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    10d2:	7c6a      	ldrb	r2, [r5, #17]
    10d4:	0112      	lsls	r2, r2, #4
    10d6:	2330      	movs	r3, #48	; 0x30
    10d8:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    10da:	7ca9      	ldrb	r1, [r5, #18]
    10dc:	0089      	lsls	r1, r1, #2
    10de:	220c      	movs	r2, #12
    10e0:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    10e2:	4313      	orrs	r3, r2
    10e4:	2280      	movs	r2, #128	; 0x80
    10e6:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    10e8:	7ceb      	ldrb	r3, [r5, #19]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d003      	beq.n	10f6 <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
    10ee:	58a3      	ldr	r3, [r4, r2]
    10f0:	2102      	movs	r1, #2
    10f2:	430b      	orrs	r3, r1
    10f4:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    10f6:	7d2b      	ldrb	r3, [r5, #20]
    10f8:	2b00      	cmp	r3, #0
    10fa:	d004      	beq.n	1106 <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
    10fc:	2280      	movs	r2, #128	; 0x80
    10fe:	58a3      	ldr	r3, [r4, r2]
    1100:	2101      	movs	r1, #1
    1102:	430b      	orrs	r3, r1
    1104:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    1106:	2390      	movs	r3, #144	; 0x90
    1108:	69aa      	ldr	r2, [r5, #24]
    110a:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    110c:	7f2b      	ldrb	r3, [r5, #28]
    110e:	2b00      	cmp	r3, #0
    1110:	d005      	beq.n	111e <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    1112:	22a0      	movs	r2, #160	; 0xa0
    1114:	58a1      	ldr	r1, [r4, r2]
    1116:	2380      	movs	r3, #128	; 0x80
    1118:	061b      	lsls	r3, r3, #24
    111a:	430b      	orrs	r3, r1
    111c:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    111e:	22a0      	movs	r2, #160	; 0xa0
    1120:	58a1      	ldr	r1, [r4, r2]
    1122:	7f6b      	ldrb	r3, [r5, #29]
    1124:	061b      	lsls	r3, r3, #24
    1126:	20fe      	movs	r0, #254	; 0xfe
    1128:	05c0      	lsls	r0, r0, #23
    112a:	4003      	ands	r3, r0
    112c:	430b      	orrs	r3, r1
    112e:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    1130:	7fab      	ldrb	r3, [r5, #30]
    1132:	2b00      	cmp	r3, #0
    1134:	d005      	beq.n	1142 <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    1136:	3210      	adds	r2, #16
    1138:	58a1      	ldr	r1, [r4, r2]
    113a:	2380      	movs	r3, #128	; 0x80
    113c:	061b      	lsls	r3, r3, #24
    113e:	430b      	orrs	r3, r1
    1140:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    1142:	22b0      	movs	r2, #176	; 0xb0
    1144:	58a1      	ldr	r1, [r4, r2]
    1146:	7feb      	ldrb	r3, [r5, #31]
    1148:	061b      	lsls	r3, r3, #24
    114a:	20fe      	movs	r0, #254	; 0xfe
    114c:	05c0      	lsls	r0, r0, #23
    114e:	4003      	ands	r3, r0
    1150:	430b      	orrs	r3, r1
    1152:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    1154:	2320      	movs	r3, #32
    1156:	5ceb      	ldrb	r3, [r5, r3]
    1158:	2b00      	cmp	r3, #0
    115a:	d005      	beq.n	1168 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    115c:	3210      	adds	r2, #16
    115e:	58a1      	ldr	r1, [r4, r2]
    1160:	2380      	movs	r3, #128	; 0x80
    1162:	05db      	lsls	r3, r3, #23
    1164:	430b      	orrs	r3, r1
    1166:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    1168:	22f0      	movs	r2, #240	; 0xf0
    116a:	58a1      	ldr	r1, [r4, r2]
    116c:	2321      	movs	r3, #33	; 0x21
    116e:	5ceb      	ldrb	r3, [r5, r3]
    1170:	061b      	lsls	r3, r3, #24
    1172:	20fc      	movs	r0, #252	; 0xfc
    1174:	0580      	lsls	r0, r0, #22
    1176:	4003      	ands	r3, r0
    1178:	430b      	orrs	r3, r1
    117a:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    117c:	2303      	movs	r3, #3
    117e:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    1180:	3b04      	subs	r3, #4
    1182:	3a10      	subs	r2, #16
    1184:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    1186:	3204      	adds	r2, #4
    1188:	50a3      	str	r3, [r4, r2]
}
    118a:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    118c:	493b      	ldr	r1, [pc, #236]	; (127c <can_init+0x29c>)
    118e:	201a      	movs	r0, #26
    1190:	4b3f      	ldr	r3, [pc, #252]	; (1290 <can_init+0x2b0>)
    1192:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    1194:	201a      	movs	r0, #26
    1196:	4b3f      	ldr	r3, [pc, #252]	; (1294 <can_init+0x2b4>)
    1198:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    119a:	4b39      	ldr	r3, [pc, #228]	; (1280 <can_init+0x2a0>)
    119c:	699a      	ldr	r2, [r3, #24]
    119e:	2102      	movs	r1, #2
    11a0:	430a      	orrs	r2, r1
    11a2:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    11a4:	4a3c      	ldr	r2, [pc, #240]	; (1298 <can_init+0x2b8>)
    11a6:	0412      	lsls	r2, r2, #16
    11a8:	0c12      	lsrs	r2, r2, #16
    11aa:	2180      	movs	r1, #128	; 0x80
    11ac:	02c9      	lsls	r1, r1, #11
    11ae:	430a      	orrs	r2, r1
    11b0:	2084      	movs	r0, #132	; 0x84
    11b2:	501a      	str	r2, [r3, r0]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    11b4:	4a39      	ldr	r2, [pc, #228]	; (129c <can_init+0x2bc>)
    11b6:	0412      	lsls	r2, r2, #16
    11b8:	0c12      	lsrs	r2, r2, #16
    11ba:	2080      	movs	r0, #128	; 0x80
    11bc:	0280      	lsls	r0, r0, #10
    11be:	4302      	orrs	r2, r0
    11c0:	2088      	movs	r0, #136	; 0x88
    11c2:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    11c4:	4a36      	ldr	r2, [pc, #216]	; (12a0 <can_init+0x2c0>)
    11c6:	0412      	lsls	r2, r2, #16
    11c8:	0c12      	lsrs	r2, r2, #16
    11ca:	430a      	orrs	r2, r1
    11cc:	3018      	adds	r0, #24
    11ce:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    11d0:	4a34      	ldr	r2, [pc, #208]	; (12a4 <can_init+0x2c4>)
    11d2:	0412      	lsls	r2, r2, #16
    11d4:	0c12      	lsrs	r2, r2, #16
    11d6:	430a      	orrs	r2, r1
    11d8:	3010      	adds	r0, #16
    11da:	501a      	str	r2, [r3, r0]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    11dc:	4a32      	ldr	r2, [pc, #200]	; (12a8 <can_init+0x2c8>)
    11de:	0412      	lsls	r2, r2, #16
    11e0:	0c12      	lsrs	r2, r2, #16
    11e2:	3804      	subs	r0, #4
    11e4:	501a      	str	r2, [r3, r0]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    11e6:	4a31      	ldr	r2, [pc, #196]	; (12ac <can_init+0x2cc>)
    11e8:	0412      	lsls	r2, r2, #16
    11ea:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    11ec:	4830      	ldr	r0, [pc, #192]	; (12b0 <can_init+0x2d0>)
    11ee:	4302      	orrs	r2, r0
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    11f0:	20c0      	movs	r0, #192	; 0xc0
    11f2:	501a      	str	r2, [r3, r0]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    11f4:	4a2f      	ldr	r2, [pc, #188]	; (12b4 <can_init+0x2d4>)
    11f6:	0412      	lsls	r2, r2, #16
    11f8:	0c12      	lsrs	r2, r2, #16
    11fa:	4311      	orrs	r1, r2
    11fc:	22f0      	movs	r2, #240	; 0xf0
    11fe:	5099      	str	r1, [r3, r2]
    1200:	e705      	b.n	100e <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    1202:	491e      	ldr	r1, [pc, #120]	; (127c <can_init+0x29c>)
    1204:	201b      	movs	r0, #27
    1206:	4b22      	ldr	r3, [pc, #136]	; (1290 <can_init+0x2b0>)
    1208:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    120a:	201b      	movs	r0, #27
    120c:	4b21      	ldr	r3, [pc, #132]	; (1294 <can_init+0x2b4>)
    120e:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1210:	4b1c      	ldr	r3, [pc, #112]	; (1284 <can_init+0x2a4>)
    1212:	699a      	ldr	r2, [r3, #24]
    1214:	2102      	movs	r1, #2
    1216:	430a      	orrs	r2, r1
    1218:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    121a:	4a27      	ldr	r2, [pc, #156]	; (12b8 <can_init+0x2d8>)
    121c:	0412      	lsls	r2, r2, #16
    121e:	0c12      	lsrs	r2, r2, #16
    1220:	2180      	movs	r1, #128	; 0x80
    1222:	02c9      	lsls	r1, r1, #11
    1224:	430a      	orrs	r2, r1
    1226:	2084      	movs	r0, #132	; 0x84
    1228:	501a      	str	r2, [r3, r0]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    122a:	4a24      	ldr	r2, [pc, #144]	; (12bc <can_init+0x2dc>)
    122c:	0412      	lsls	r2, r2, #16
    122e:	0c12      	lsrs	r2, r2, #16
    1230:	2080      	movs	r0, #128	; 0x80
    1232:	0280      	lsls	r0, r0, #10
    1234:	4302      	orrs	r2, r0
    1236:	2088      	movs	r0, #136	; 0x88
    1238:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    123a:	4a21      	ldr	r2, [pc, #132]	; (12c0 <can_init+0x2e0>)
    123c:	0412      	lsls	r2, r2, #16
    123e:	0c12      	lsrs	r2, r2, #16
    1240:	430a      	orrs	r2, r1
    1242:	3018      	adds	r0, #24
    1244:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    1246:	4a1f      	ldr	r2, [pc, #124]	; (12c4 <can_init+0x2e4>)
    1248:	0412      	lsls	r2, r2, #16
    124a:	0c12      	lsrs	r2, r2, #16
    124c:	430a      	orrs	r2, r1
    124e:	3010      	adds	r0, #16
    1250:	501a      	str	r2, [r3, r0]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    1252:	4a1d      	ldr	r2, [pc, #116]	; (12c8 <can_init+0x2e8>)
    1254:	0412      	lsls	r2, r2, #16
    1256:	0c12      	lsrs	r2, r2, #16
    1258:	3804      	subs	r0, #4
    125a:	501a      	str	r2, [r3, r0]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    125c:	4a1b      	ldr	r2, [pc, #108]	; (12cc <can_init+0x2ec>)
    125e:	0412      	lsls	r2, r2, #16
    1260:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    1262:	4813      	ldr	r0, [pc, #76]	; (12b0 <can_init+0x2d0>)
    1264:	4302      	orrs	r2, r0
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    1266:	20c0      	movs	r0, #192	; 0xc0
    1268:	501a      	str	r2, [r3, r0]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    126a:	4a19      	ldr	r2, [pc, #100]	; (12d0 <can_init+0x2f0>)
    126c:	0412      	lsls	r2, r2, #16
    126e:	0c12      	lsrs	r2, r2, #16
    1270:	4311      	orrs	r1, r2
    1272:	22f0      	movs	r2, #240	; 0xf0
    1274:	5099      	str	r1, [r3, r2]
    1276:	e6ca      	b.n	100e <can_init+0x2e>
    1278:	00000fa9 	.word	0x00000fa9
    127c:	2000047c 	.word	0x2000047c
    1280:	42001c00 	.word	0x42001c00
    1284:	42002000 	.word	0x42002000
    1288:	06050a03 	.word	0x06050a03
    128c:	00000a33 	.word	0x00000a33
    1290:	000024cd 	.word	0x000024cd
    1294:	0000245d 	.word	0x0000245d
    1298:	2000018c 	.word	0x2000018c
    129c:	200000fc 	.word	0x200000fc
    12a0:	2000010c 	.word	0x2000010c
    12a4:	2000014c 	.word	0x2000014c
    12a8:	200000bc 	.word	0x200000bc
    12ac:	2000019c 	.word	0x2000019c
    12b0:	02020000 	.word	0x02020000
    12b4:	200001dc 	.word	0x200001dc
    12b8:	200002cc 	.word	0x200002cc
    12bc:	2000023c 	.word	0x2000023c
    12c0:	2000024c 	.word	0x2000024c
    12c4:	2000028c 	.word	0x2000028c
    12c8:	200001fc 	.word	0x200001fc
    12cc:	200002dc 	.word	0x200002dc
    12d0:	2000031c 	.word	0x2000031c

000012d4 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    12d4:	6802      	ldr	r2, [r0, #0]
    12d6:	6993      	ldr	r3, [r2, #24]
    12d8:	2101      	movs	r1, #1
    12da:	438b      	bics	r3, r1
    12dc:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    12de:	6801      	ldr	r1, [r0, #0]
    12e0:	2201      	movs	r2, #1
    12e2:	698b      	ldr	r3, [r1, #24]
    12e4:	421a      	tst	r2, r3
    12e6:	d1fc      	bne.n	12e2 <can_start+0xe>
}
    12e8:	4770      	bx	lr
	...

000012ec <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    12ec:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    12ee:	6803      	ldr	r3, [r0, #0]
    12f0:	4809      	ldr	r0, [pc, #36]	; (1318 <can_set_rx_standard_filter+0x2c>)
    12f2:	4283      	cmp	r3, r0
    12f4:	d004      	beq.n	1300 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    12f6:	4c09      	ldr	r4, [pc, #36]	; (131c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    12f8:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    12fa:	42a3      	cmp	r3, r4
    12fc:	d006      	beq.n	130c <can_set_rx_standard_filter+0x20>
}
    12fe:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    1300:	6809      	ldr	r1, [r1, #0]
    1302:	0092      	lsls	r2, r2, #2
    1304:	4b06      	ldr	r3, [pc, #24]	; (1320 <can_set_rx_standard_filter+0x34>)
    1306:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1308:	2000      	movs	r0, #0
    130a:	e7f8      	b.n	12fe <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    130c:	6809      	ldr	r1, [r1, #0]
    130e:	0092      	lsls	r2, r2, #2
    1310:	4b04      	ldr	r3, [pc, #16]	; (1324 <can_set_rx_standard_filter+0x38>)
    1312:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1314:	2000      	movs	r0, #0
    1316:	e7f2      	b.n	12fe <can_set_rx_standard_filter+0x12>
    1318:	42001c00 	.word	0x42001c00
    131c:	42002000 	.word	0x42002000
    1320:	2000018c 	.word	0x2000018c
    1324:	200002cc 	.word	0x200002cc

00001328 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1328:	b570      	push	{r4, r5, r6, lr}
    132a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    132c:	6803      	ldr	r3, [r0, #0]
    132e:	4c0d      	ldr	r4, [pc, #52]	; (1364 <can_get_rx_buffer_element+0x3c>)
    1330:	42a3      	cmp	r3, r4
    1332:	d004      	beq.n	133e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1334:	4c0c      	ldr	r4, [pc, #48]	; (1368 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1336:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1338:	42a3      	cmp	r3, r4
    133a:	d009      	beq.n	1350 <can_get_rx_buffer_element+0x28>
}
    133c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    133e:	0112      	lsls	r2, r2, #4
    1340:	490a      	ldr	r1, [pc, #40]	; (136c <can_get_rx_buffer_element+0x44>)
    1342:	1889      	adds	r1, r1, r2
    1344:	2210      	movs	r2, #16
    1346:	0028      	movs	r0, r5
    1348:	4b09      	ldr	r3, [pc, #36]	; (1370 <can_get_rx_buffer_element+0x48>)
    134a:	4798      	blx	r3
		return STATUS_OK;
    134c:	2000      	movs	r0, #0
    134e:	e7f5      	b.n	133c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    1350:	0112      	lsls	r2, r2, #4
    1352:	4908      	ldr	r1, [pc, #32]	; (1374 <can_get_rx_buffer_element+0x4c>)
    1354:	1889      	adds	r1, r1, r2
    1356:	2210      	movs	r2, #16
    1358:	0028      	movs	r0, r5
    135a:	4b05      	ldr	r3, [pc, #20]	; (1370 <can_get_rx_buffer_element+0x48>)
    135c:	4798      	blx	r3
		return STATUS_OK;
    135e:	2000      	movs	r0, #0
    1360:	e7ec      	b.n	133c <can_get_rx_buffer_element+0x14>
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	42001c00 	.word	0x42001c00
    1368:	42002000 	.word	0x42002000
    136c:	200000bc 	.word	0x200000bc
    1370:	00003c95 	.word	0x00003c95
    1374:	200001fc 	.word	0x200001fc

00001378 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    1378:	b570      	push	{r4, r5, r6, lr}
    137a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    137c:	6803      	ldr	r3, [r0, #0]
    137e:	4c0d      	ldr	r4, [pc, #52]	; (13b4 <can_get_rx_fifo_0_element+0x3c>)
    1380:	42a3      	cmp	r3, r4
    1382:	d004      	beq.n	138e <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1384:	4c0c      	ldr	r4, [pc, #48]	; (13b8 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1386:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1388:	42a3      	cmp	r3, r4
    138a:	d009      	beq.n	13a0 <can_get_rx_fifo_0_element+0x28>
}
    138c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    138e:	0112      	lsls	r2, r2, #4
    1390:	490a      	ldr	r1, [pc, #40]	; (13bc <can_get_rx_fifo_0_element+0x44>)
    1392:	1889      	adds	r1, r1, r2
    1394:	2210      	movs	r2, #16
    1396:	0028      	movs	r0, r5
    1398:	4b09      	ldr	r3, [pc, #36]	; (13c0 <can_get_rx_fifo_0_element+0x48>)
    139a:	4798      	blx	r3
		return STATUS_OK;
    139c:	2000      	movs	r0, #0
    139e:	e7f5      	b.n	138c <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    13a0:	0112      	lsls	r2, r2, #4
    13a2:	4908      	ldr	r1, [pc, #32]	; (13c4 <can_get_rx_fifo_0_element+0x4c>)
    13a4:	1889      	adds	r1, r1, r2
    13a6:	2210      	movs	r2, #16
    13a8:	0028      	movs	r0, r5
    13aa:	4b05      	ldr	r3, [pc, #20]	; (13c0 <can_get_rx_fifo_0_element+0x48>)
    13ac:	4798      	blx	r3
		return STATUS_OK;
    13ae:	2000      	movs	r0, #0
    13b0:	e7ec      	b.n	138c <can_get_rx_fifo_0_element+0x14>
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	42001c00 	.word	0x42001c00
    13b8:	42002000 	.word	0x42002000
    13bc:	2000010c 	.word	0x2000010c
    13c0:	00003c95 	.word	0x00003c95
    13c4:	2000024c 	.word	0x2000024c

000013c8 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    13cc:	6803      	ldr	r3, [r0, #0]
    13ce:	4c0d      	ldr	r4, [pc, #52]	; (1404 <can_get_rx_fifo_1_element+0x3c>)
    13d0:	42a3      	cmp	r3, r4
    13d2:	d004      	beq.n	13de <can_get_rx_fifo_1_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    13d4:	4c0c      	ldr	r4, [pc, #48]	; (1408 <can_get_rx_fifo_1_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    13d6:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    13d8:	42a3      	cmp	r3, r4
    13da:	d009      	beq.n	13f0 <can_get_rx_fifo_1_element+0x28>
}
    13dc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    13de:	0112      	lsls	r2, r2, #4
    13e0:	490a      	ldr	r1, [pc, #40]	; (140c <can_get_rx_fifo_1_element+0x44>)
    13e2:	1889      	adds	r1, r1, r2
    13e4:	2210      	movs	r2, #16
    13e6:	0028      	movs	r0, r5
    13e8:	4b09      	ldr	r3, [pc, #36]	; (1410 <can_get_rx_fifo_1_element+0x48>)
    13ea:	4798      	blx	r3
		return STATUS_OK;
    13ec:	2000      	movs	r0, #0
    13ee:	e7f5      	b.n	13dc <can_get_rx_fifo_1_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    13f0:	0112      	lsls	r2, r2, #4
    13f2:	4908      	ldr	r1, [pc, #32]	; (1414 <can_get_rx_fifo_1_element+0x4c>)
    13f4:	1889      	adds	r1, r1, r2
    13f6:	2210      	movs	r2, #16
    13f8:	0028      	movs	r0, r5
    13fa:	4b05      	ldr	r3, [pc, #20]	; (1410 <can_get_rx_fifo_1_element+0x48>)
    13fc:	4798      	blx	r3
		return STATUS_OK;
    13fe:	2000      	movs	r0, #0
    1400:	e7ec      	b.n	13dc <can_get_rx_fifo_1_element+0x14>
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	42001c00 	.word	0x42001c00
    1408:	42002000 	.word	0x42002000
    140c:	2000014c 	.word	0x2000014c
    1410:	00003c95 	.word	0x00003c95
    1414:	2000028c 	.word	0x2000028c

00001418 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    1418:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    141a:	6803      	ldr	r3, [r0, #0]
    141c:	4817      	ldr	r0, [pc, #92]	; (147c <can_set_tx_buffer_element+0x64>)
    141e:	4283      	cmp	r3, r0
    1420:	d004      	beq.n	142c <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1422:	4c17      	ldr	r4, [pc, #92]	; (1480 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1424:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1426:	42a3      	cmp	r3, r4
    1428:	d014      	beq.n	1454 <can_set_tx_buffer_element+0x3c>
}
    142a:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    142c:	680b      	ldr	r3, [r1, #0]
    142e:	4815      	ldr	r0, [pc, #84]	; (1484 <can_set_tx_buffer_element+0x6c>)
    1430:	0112      	lsls	r2, r2, #4
    1432:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    1434:	684c      	ldr	r4, [r1, #4]
    1436:	1883      	adds	r3, r0, r2
    1438:	605c      	str	r4, [r3, #4]
    143a:	000b      	movs	r3, r1
    143c:	3308      	adds	r3, #8
    143e:	3208      	adds	r2, #8
    1440:	1882      	adds	r2, r0, r2
    1442:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    1444:	7818      	ldrb	r0, [r3, #0]
    1446:	7010      	strb	r0, [r2, #0]
    1448:	3301      	adds	r3, #1
    144a:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    144c:	428b      	cmp	r3, r1
    144e:	d1f9      	bne.n	1444 <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
    1450:	2000      	movs	r0, #0
    1452:	e7ea      	b.n	142a <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    1454:	680b      	ldr	r3, [r1, #0]
    1456:	480c      	ldr	r0, [pc, #48]	; (1488 <can_set_tx_buffer_element+0x70>)
    1458:	0112      	lsls	r2, r2, #4
    145a:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    145c:	684c      	ldr	r4, [r1, #4]
    145e:	1883      	adds	r3, r0, r2
    1460:	605c      	str	r4, [r3, #4]
    1462:	000b      	movs	r3, r1
    1464:	3308      	adds	r3, #8
    1466:	3208      	adds	r2, #8
    1468:	1882      	adds	r2, r0, r2
    146a:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    146c:	7818      	ldrb	r0, [r3, #0]
    146e:	7010      	strb	r0, [r2, #0]
    1470:	3301      	adds	r3, #1
    1472:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    1474:	428b      	cmp	r3, r1
    1476:	d1f9      	bne.n	146c <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
    1478:	2000      	movs	r0, #0
    147a:	e7d6      	b.n	142a <can_set_tx_buffer_element+0x12>
    147c:	42001c00 	.word	0x42001c00
    1480:	42002000 	.word	0x42002000
    1484:	2000019c 	.word	0x2000019c
    1488:	200002dc 	.word	0x200002dc

0000148c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    148c:	b500      	push	{lr}
    148e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1490:	ab01      	add	r3, sp, #4
    1492:	2280      	movs	r2, #128	; 0x80
    1494:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1496:	780a      	ldrb	r2, [r1, #0]
    1498:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    149a:	784a      	ldrb	r2, [r1, #1]
    149c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    149e:	788a      	ldrb	r2, [r1, #2]
    14a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    14a2:	0019      	movs	r1, r3
    14a4:	4b01      	ldr	r3, [pc, #4]	; (14ac <port_pin_set_config+0x20>)
    14a6:	4798      	blx	r3
}
    14a8:	b003      	add	sp, #12
    14aa:	bd00      	pop	{pc}
    14ac:	000025c9 	.word	0x000025c9

000014b0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    14b0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    14b2:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14b4:	2340      	movs	r3, #64	; 0x40
    14b6:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    14b8:	4281      	cmp	r1, r0
    14ba:	d202      	bcs.n	14c2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    14bc:	0018      	movs	r0, r3
    14be:	bd10      	pop	{r4, pc}
		baud_calculated++;
    14c0:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    14c2:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    14c4:	1c63      	adds	r3, r4, #1
    14c6:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    14c8:	4288      	cmp	r0, r1
    14ca:	d9f9      	bls.n	14c0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14cc:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    14ce:	2cff      	cmp	r4, #255	; 0xff
    14d0:	d8f4      	bhi.n	14bc <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    14d2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    14d4:	2300      	movs	r3, #0
    14d6:	e7f1      	b.n	14bc <_sercom_get_sync_baud_val+0xc>

000014d8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14da:	46de      	mov	lr, fp
    14dc:	4657      	mov	r7, sl
    14de:	464e      	mov	r6, r9
    14e0:	4645      	mov	r5, r8
    14e2:	b5e0      	push	{r5, r6, r7, lr}
    14e4:	b089      	sub	sp, #36	; 0x24
    14e6:	000c      	movs	r4, r1
    14e8:	9205      	str	r2, [sp, #20]
    14ea:	aa12      	add	r2, sp, #72	; 0x48
    14ec:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    14ee:	0005      	movs	r5, r0
    14f0:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    14f2:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    14f4:	42a5      	cmp	r5, r4
    14f6:	d907      	bls.n	1508 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    14f8:	0010      	movs	r0, r2
    14fa:	b009      	add	sp, #36	; 0x24
    14fc:	bc3c      	pop	{r2, r3, r4, r5}
    14fe:	4690      	mov	r8, r2
    1500:	4699      	mov	r9, r3
    1502:	46a2      	mov	sl, r4
    1504:	46ab      	mov	fp, r5
    1506:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1508:	2b00      	cmp	r3, #0
    150a:	d155      	bne.n	15b8 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    150c:	0002      	movs	r2, r0
    150e:	0008      	movs	r0, r1
    1510:	2100      	movs	r1, #0
    1512:	4d63      	ldr	r5, [pc, #396]	; (16a0 <_sercom_get_async_baud_val+0x1c8>)
    1514:	47a8      	blx	r5
    1516:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1518:	0026      	movs	r6, r4
    151a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    151c:	2300      	movs	r3, #0
    151e:	2400      	movs	r4, #0
    1520:	9300      	str	r3, [sp, #0]
    1522:	9401      	str	r4, [sp, #4]
    1524:	2200      	movs	r2, #0
    1526:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1528:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    152a:	2120      	movs	r1, #32
    152c:	468c      	mov	ip, r1
    152e:	391f      	subs	r1, #31
    1530:	9602      	str	r6, [sp, #8]
    1532:	9703      	str	r7, [sp, #12]
    1534:	e014      	b.n	1560 <_sercom_get_async_baud_val+0x88>
    1536:	4664      	mov	r4, ip
    1538:	1a24      	subs	r4, r4, r0
    153a:	000d      	movs	r5, r1
    153c:	40e5      	lsrs	r5, r4
    153e:	46a8      	mov	r8, r5
    1540:	e015      	b.n	156e <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1542:	9c02      	ldr	r4, [sp, #8]
    1544:	9d03      	ldr	r5, [sp, #12]
    1546:	1b12      	subs	r2, r2, r4
    1548:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    154a:	464d      	mov	r5, r9
    154c:	9e00      	ldr	r6, [sp, #0]
    154e:	9f01      	ldr	r7, [sp, #4]
    1550:	4335      	orrs	r5, r6
    1552:	003c      	movs	r4, r7
    1554:	4646      	mov	r6, r8
    1556:	4334      	orrs	r4, r6
    1558:	9500      	str	r5, [sp, #0]
    155a:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    155c:	3801      	subs	r0, #1
    155e:	d31d      	bcc.n	159c <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    1560:	2420      	movs	r4, #32
    1562:	4264      	negs	r4, r4
    1564:	1904      	adds	r4, r0, r4
    1566:	d4e6      	bmi.n	1536 <_sercom_get_async_baud_val+0x5e>
    1568:	000d      	movs	r5, r1
    156a:	40a5      	lsls	r5, r4
    156c:	46a8      	mov	r8, r5
    156e:	000c      	movs	r4, r1
    1570:	4084      	lsls	r4, r0
    1572:	46a1      	mov	r9, r4
		r = r << 1;
    1574:	1892      	adds	r2, r2, r2
    1576:	415b      	adcs	r3, r3
    1578:	0014      	movs	r4, r2
    157a:	001d      	movs	r5, r3
		if (n & bit_shift) {
    157c:	4646      	mov	r6, r8
    157e:	465f      	mov	r7, fp
    1580:	423e      	tst	r6, r7
    1582:	d003      	beq.n	158c <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    1584:	000e      	movs	r6, r1
    1586:	4326      	orrs	r6, r4
    1588:	0032      	movs	r2, r6
    158a:	002b      	movs	r3, r5
		if (r >= d) {
    158c:	9c02      	ldr	r4, [sp, #8]
    158e:	9d03      	ldr	r5, [sp, #12]
    1590:	429d      	cmp	r5, r3
    1592:	d8e3      	bhi.n	155c <_sercom_get_async_baud_val+0x84>
    1594:	d1d5      	bne.n	1542 <_sercom_get_async_baud_val+0x6a>
    1596:	4294      	cmp	r4, r2
    1598:	d8e0      	bhi.n	155c <_sercom_get_async_baud_val+0x84>
    159a:	e7d2      	b.n	1542 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    159c:	2200      	movs	r2, #0
    159e:	2301      	movs	r3, #1
    15a0:	9800      	ldr	r0, [sp, #0]
    15a2:	9901      	ldr	r1, [sp, #4]
    15a4:	1a12      	subs	r2, r2, r0
    15a6:	418b      	sbcs	r3, r1
    15a8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    15aa:	0c13      	lsrs	r3, r2, #16
    15ac:	040a      	lsls	r2, r1, #16
    15ae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    15b0:	9b05      	ldr	r3, [sp, #20]
    15b2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    15b4:	2200      	movs	r2, #0
    15b6:	e79f      	b.n	14f8 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    15b8:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    15ba:	2b01      	cmp	r3, #1
    15bc:	d1f8      	bne.n	15b0 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    15be:	0f63      	lsrs	r3, r4, #29
    15c0:	9304      	str	r3, [sp, #16]
    15c2:	00e3      	lsls	r3, r4, #3
    15c4:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    15c6:	000a      	movs	r2, r1
    15c8:	2300      	movs	r3, #0
    15ca:	2100      	movs	r1, #0
    15cc:	4c34      	ldr	r4, [pc, #208]	; (16a0 <_sercom_get_async_baud_val+0x1c8>)
    15ce:	47a0      	blx	r4
    15d0:	0004      	movs	r4, r0
    15d2:	000d      	movs	r5, r1
    15d4:	2300      	movs	r3, #0
    15d6:	469c      	mov	ip, r3
    15d8:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    15da:	3320      	adds	r3, #32
    15dc:	469b      	mov	fp, r3
    15de:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    15e0:	4663      	mov	r3, ip
    15e2:	9307      	str	r3, [sp, #28]
    15e4:	e048      	b.n	1678 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    15e6:	4659      	mov	r1, fp
    15e8:	1bc9      	subs	r1, r1, r7
    15ea:	0030      	movs	r0, r6
    15ec:	40c8      	lsrs	r0, r1
    15ee:	4682      	mov	sl, r0
    15f0:	e010      	b.n	1614 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    15f2:	9800      	ldr	r0, [sp, #0]
    15f4:	9901      	ldr	r1, [sp, #4]
    15f6:	1a12      	subs	r2, r2, r0
    15f8:	418b      	sbcs	r3, r1
			q |= bit_shift;
    15fa:	9902      	ldr	r1, [sp, #8]
    15fc:	4648      	mov	r0, r9
    15fe:	4301      	orrs	r1, r0
    1600:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    1602:	3f01      	subs	r7, #1
    1604:	d325      	bcc.n	1652 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    1606:	2120      	movs	r1, #32
    1608:	4249      	negs	r1, r1
    160a:	1879      	adds	r1, r7, r1
    160c:	d4eb      	bmi.n	15e6 <_sercom_get_async_baud_val+0x10e>
    160e:	0030      	movs	r0, r6
    1610:	4088      	lsls	r0, r1
    1612:	4682      	mov	sl, r0
    1614:	0031      	movs	r1, r6
    1616:	40b9      	lsls	r1, r7
    1618:	4689      	mov	r9, r1
		r = r << 1;
    161a:	1892      	adds	r2, r2, r2
    161c:	415b      	adcs	r3, r3
    161e:	0010      	movs	r0, r2
    1620:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1622:	4644      	mov	r4, r8
    1624:	464d      	mov	r5, r9
    1626:	402c      	ands	r4, r5
    1628:	46a4      	mov	ip, r4
    162a:	4654      	mov	r4, sl
    162c:	9d04      	ldr	r5, [sp, #16]
    162e:	402c      	ands	r4, r5
    1630:	46a2      	mov	sl, r4
    1632:	4664      	mov	r4, ip
    1634:	4655      	mov	r5, sl
    1636:	432c      	orrs	r4, r5
    1638:	d003      	beq.n	1642 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    163a:	0034      	movs	r4, r6
    163c:	4304      	orrs	r4, r0
    163e:	0022      	movs	r2, r4
    1640:	000b      	movs	r3, r1
		if (r >= d) {
    1642:	9800      	ldr	r0, [sp, #0]
    1644:	9901      	ldr	r1, [sp, #4]
    1646:	4299      	cmp	r1, r3
    1648:	d8db      	bhi.n	1602 <_sercom_get_async_baud_val+0x12a>
    164a:	d1d2      	bne.n	15f2 <_sercom_get_async_baud_val+0x11a>
    164c:	4290      	cmp	r0, r2
    164e:	d8d8      	bhi.n	1602 <_sercom_get_async_baud_val+0x12a>
    1650:	e7cf      	b.n	15f2 <_sercom_get_async_baud_val+0x11a>
    1652:	9c00      	ldr	r4, [sp, #0]
    1654:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    1656:	9902      	ldr	r1, [sp, #8]
    1658:	9a07      	ldr	r2, [sp, #28]
    165a:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    165c:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    165e:	4911      	ldr	r1, [pc, #68]	; (16a4 <_sercom_get_async_baud_val+0x1cc>)
    1660:	428b      	cmp	r3, r1
    1662:	d914      	bls.n	168e <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    1664:	9b06      	ldr	r3, [sp, #24]
    1666:	3301      	adds	r3, #1
    1668:	b2db      	uxtb	r3, r3
    166a:	0019      	movs	r1, r3
    166c:	9306      	str	r3, [sp, #24]
    166e:	0013      	movs	r3, r2
    1670:	3301      	adds	r3, #1
    1672:	9307      	str	r3, [sp, #28]
    1674:	2908      	cmp	r1, #8
    1676:	d008      	beq.n	168a <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    1678:	2300      	movs	r3, #0
    167a:	9302      	str	r3, [sp, #8]
    167c:	2200      	movs	r2, #0
    167e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1680:	213f      	movs	r1, #63	; 0x3f
    1682:	9400      	str	r4, [sp, #0]
    1684:	9501      	str	r5, [sp, #4]
    1686:	000f      	movs	r7, r1
    1688:	e7bd      	b.n	1606 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    168a:	2240      	movs	r2, #64	; 0x40
    168c:	e734      	b.n	14f8 <_sercom_get_async_baud_val+0x20>
    168e:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    1690:	9906      	ldr	r1, [sp, #24]
    1692:	2908      	cmp	r1, #8
    1694:	d100      	bne.n	1698 <_sercom_get_async_baud_val+0x1c0>
    1696:	e72f      	b.n	14f8 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    1698:	034a      	lsls	r2, r1, #13
    169a:	431a      	orrs	r2, r3
    169c:	e788      	b.n	15b0 <_sercom_get_async_baud_val+0xd8>
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00003a25 	.word	0x00003a25
    16a4:	00001fff 	.word	0x00001fff

000016a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    16a8:	b510      	push	{r4, lr}
    16aa:	b082      	sub	sp, #8
    16ac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    16ae:	4b0e      	ldr	r3, [pc, #56]	; (16e8 <sercom_set_gclk_generator+0x40>)
    16b0:	781b      	ldrb	r3, [r3, #0]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d007      	beq.n	16c6 <sercom_set_gclk_generator+0x1e>
    16b6:	2900      	cmp	r1, #0
    16b8:	d105      	bne.n	16c6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    16ba:	4b0b      	ldr	r3, [pc, #44]	; (16e8 <sercom_set_gclk_generator+0x40>)
    16bc:	785b      	ldrb	r3, [r3, #1]
    16be:	4283      	cmp	r3, r0
    16c0:	d010      	beq.n	16e4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    16c2:	201d      	movs	r0, #29
    16c4:	e00c      	b.n	16e0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    16c6:	a901      	add	r1, sp, #4
    16c8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    16ca:	2012      	movs	r0, #18
    16cc:	4b07      	ldr	r3, [pc, #28]	; (16ec <sercom_set_gclk_generator+0x44>)
    16ce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    16d0:	2012      	movs	r0, #18
    16d2:	4b07      	ldr	r3, [pc, #28]	; (16f0 <sercom_set_gclk_generator+0x48>)
    16d4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    16d6:	4b04      	ldr	r3, [pc, #16]	; (16e8 <sercom_set_gclk_generator+0x40>)
    16d8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    16da:	2201      	movs	r2, #1
    16dc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    16de:	2000      	movs	r0, #0
}
    16e0:	b002      	add	sp, #8
    16e2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    16e4:	2000      	movs	r0, #0
    16e6:	e7fb      	b.n	16e0 <sercom_set_gclk_generator+0x38>
    16e8:	2000033c 	.word	0x2000033c
    16ec:	000024cd 	.word	0x000024cd
    16f0:	0000245d 	.word	0x0000245d

000016f4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    16f4:	4b40      	ldr	r3, [pc, #256]	; (17f8 <_sercom_get_default_pad+0x104>)
    16f6:	4298      	cmp	r0, r3
    16f8:	d031      	beq.n	175e <_sercom_get_default_pad+0x6a>
    16fa:	d90a      	bls.n	1712 <_sercom_get_default_pad+0x1e>
    16fc:	4b3f      	ldr	r3, [pc, #252]	; (17fc <_sercom_get_default_pad+0x108>)
    16fe:	4298      	cmp	r0, r3
    1700:	d04d      	beq.n	179e <_sercom_get_default_pad+0xaa>
    1702:	4b3f      	ldr	r3, [pc, #252]	; (1800 <_sercom_get_default_pad+0x10c>)
    1704:	4298      	cmp	r0, r3
    1706:	d05a      	beq.n	17be <_sercom_get_default_pad+0xca>
    1708:	4b3e      	ldr	r3, [pc, #248]	; (1804 <_sercom_get_default_pad+0x110>)
    170a:	4298      	cmp	r0, r3
    170c:	d037      	beq.n	177e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    170e:	2000      	movs	r0, #0
}
    1710:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1712:	4b3d      	ldr	r3, [pc, #244]	; (1808 <_sercom_get_default_pad+0x114>)
    1714:	4298      	cmp	r0, r3
    1716:	d00c      	beq.n	1732 <_sercom_get_default_pad+0x3e>
    1718:	4b3c      	ldr	r3, [pc, #240]	; (180c <_sercom_get_default_pad+0x118>)
    171a:	4298      	cmp	r0, r3
    171c:	d1f7      	bne.n	170e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    171e:	2901      	cmp	r1, #1
    1720:	d017      	beq.n	1752 <_sercom_get_default_pad+0x5e>
    1722:	2900      	cmp	r1, #0
    1724:	d05d      	beq.n	17e2 <_sercom_get_default_pad+0xee>
    1726:	2902      	cmp	r1, #2
    1728:	d015      	beq.n	1756 <_sercom_get_default_pad+0x62>
    172a:	2903      	cmp	r1, #3
    172c:	d015      	beq.n	175a <_sercom_get_default_pad+0x66>
	return 0;
    172e:	2000      	movs	r0, #0
    1730:	e7ee      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1732:	2901      	cmp	r1, #1
    1734:	d007      	beq.n	1746 <_sercom_get_default_pad+0x52>
    1736:	2900      	cmp	r1, #0
    1738:	d051      	beq.n	17de <_sercom_get_default_pad+0xea>
    173a:	2902      	cmp	r1, #2
    173c:	d005      	beq.n	174a <_sercom_get_default_pad+0x56>
    173e:	2903      	cmp	r1, #3
    1740:	d005      	beq.n	174e <_sercom_get_default_pad+0x5a>
	return 0;
    1742:	2000      	movs	r0, #0
    1744:	e7e4      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1746:	4832      	ldr	r0, [pc, #200]	; (1810 <_sercom_get_default_pad+0x11c>)
    1748:	e7e2      	b.n	1710 <_sercom_get_default_pad+0x1c>
    174a:	4832      	ldr	r0, [pc, #200]	; (1814 <_sercom_get_default_pad+0x120>)
    174c:	e7e0      	b.n	1710 <_sercom_get_default_pad+0x1c>
    174e:	4832      	ldr	r0, [pc, #200]	; (1818 <_sercom_get_default_pad+0x124>)
    1750:	e7de      	b.n	1710 <_sercom_get_default_pad+0x1c>
    1752:	4832      	ldr	r0, [pc, #200]	; (181c <_sercom_get_default_pad+0x128>)
    1754:	e7dc      	b.n	1710 <_sercom_get_default_pad+0x1c>
    1756:	4832      	ldr	r0, [pc, #200]	; (1820 <_sercom_get_default_pad+0x12c>)
    1758:	e7da      	b.n	1710 <_sercom_get_default_pad+0x1c>
    175a:	4832      	ldr	r0, [pc, #200]	; (1824 <_sercom_get_default_pad+0x130>)
    175c:	e7d8      	b.n	1710 <_sercom_get_default_pad+0x1c>
    175e:	2901      	cmp	r1, #1
    1760:	d007      	beq.n	1772 <_sercom_get_default_pad+0x7e>
    1762:	2900      	cmp	r1, #0
    1764:	d03f      	beq.n	17e6 <_sercom_get_default_pad+0xf2>
    1766:	2902      	cmp	r1, #2
    1768:	d005      	beq.n	1776 <_sercom_get_default_pad+0x82>
    176a:	2903      	cmp	r1, #3
    176c:	d005      	beq.n	177a <_sercom_get_default_pad+0x86>
	return 0;
    176e:	2000      	movs	r0, #0
    1770:	e7ce      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1772:	482d      	ldr	r0, [pc, #180]	; (1828 <_sercom_get_default_pad+0x134>)
    1774:	e7cc      	b.n	1710 <_sercom_get_default_pad+0x1c>
    1776:	482d      	ldr	r0, [pc, #180]	; (182c <_sercom_get_default_pad+0x138>)
    1778:	e7ca      	b.n	1710 <_sercom_get_default_pad+0x1c>
    177a:	482d      	ldr	r0, [pc, #180]	; (1830 <_sercom_get_default_pad+0x13c>)
    177c:	e7c8      	b.n	1710 <_sercom_get_default_pad+0x1c>
    177e:	2901      	cmp	r1, #1
    1780:	d007      	beq.n	1792 <_sercom_get_default_pad+0x9e>
    1782:	2900      	cmp	r1, #0
    1784:	d031      	beq.n	17ea <_sercom_get_default_pad+0xf6>
    1786:	2902      	cmp	r1, #2
    1788:	d005      	beq.n	1796 <_sercom_get_default_pad+0xa2>
    178a:	2903      	cmp	r1, #3
    178c:	d005      	beq.n	179a <_sercom_get_default_pad+0xa6>
	return 0;
    178e:	2000      	movs	r0, #0
    1790:	e7be      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1792:	4828      	ldr	r0, [pc, #160]	; (1834 <_sercom_get_default_pad+0x140>)
    1794:	e7bc      	b.n	1710 <_sercom_get_default_pad+0x1c>
    1796:	4828      	ldr	r0, [pc, #160]	; (1838 <_sercom_get_default_pad+0x144>)
    1798:	e7ba      	b.n	1710 <_sercom_get_default_pad+0x1c>
    179a:	4828      	ldr	r0, [pc, #160]	; (183c <_sercom_get_default_pad+0x148>)
    179c:	e7b8      	b.n	1710 <_sercom_get_default_pad+0x1c>
    179e:	2901      	cmp	r1, #1
    17a0:	d007      	beq.n	17b2 <_sercom_get_default_pad+0xbe>
    17a2:	2900      	cmp	r1, #0
    17a4:	d023      	beq.n	17ee <_sercom_get_default_pad+0xfa>
    17a6:	2902      	cmp	r1, #2
    17a8:	d005      	beq.n	17b6 <_sercom_get_default_pad+0xc2>
    17aa:	2903      	cmp	r1, #3
    17ac:	d005      	beq.n	17ba <_sercom_get_default_pad+0xc6>
	return 0;
    17ae:	2000      	movs	r0, #0
    17b0:	e7ae      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17b2:	4823      	ldr	r0, [pc, #140]	; (1840 <_sercom_get_default_pad+0x14c>)
    17b4:	e7ac      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17b6:	4823      	ldr	r0, [pc, #140]	; (1844 <_sercom_get_default_pad+0x150>)
    17b8:	e7aa      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17ba:	4823      	ldr	r0, [pc, #140]	; (1848 <_sercom_get_default_pad+0x154>)
    17bc:	e7a8      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17be:	2901      	cmp	r1, #1
    17c0:	d007      	beq.n	17d2 <_sercom_get_default_pad+0xde>
    17c2:	2900      	cmp	r1, #0
    17c4:	d015      	beq.n	17f2 <_sercom_get_default_pad+0xfe>
    17c6:	2902      	cmp	r1, #2
    17c8:	d005      	beq.n	17d6 <_sercom_get_default_pad+0xe2>
    17ca:	2903      	cmp	r1, #3
    17cc:	d005      	beq.n	17da <_sercom_get_default_pad+0xe6>
	return 0;
    17ce:	2000      	movs	r0, #0
    17d0:	e79e      	b.n	1710 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17d2:	481e      	ldr	r0, [pc, #120]	; (184c <_sercom_get_default_pad+0x158>)
    17d4:	e79c      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17d6:	481e      	ldr	r0, [pc, #120]	; (1850 <_sercom_get_default_pad+0x15c>)
    17d8:	e79a      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17da:	481e      	ldr	r0, [pc, #120]	; (1854 <_sercom_get_default_pad+0x160>)
    17dc:	e798      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17de:	481e      	ldr	r0, [pc, #120]	; (1858 <_sercom_get_default_pad+0x164>)
    17e0:	e796      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17e2:	481e      	ldr	r0, [pc, #120]	; (185c <_sercom_get_default_pad+0x168>)
    17e4:	e794      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17e6:	481e      	ldr	r0, [pc, #120]	; (1860 <_sercom_get_default_pad+0x16c>)
    17e8:	e792      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17ea:	481e      	ldr	r0, [pc, #120]	; (1864 <_sercom_get_default_pad+0x170>)
    17ec:	e790      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17ee:	481e      	ldr	r0, [pc, #120]	; (1868 <_sercom_get_default_pad+0x174>)
    17f0:	e78e      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17f2:	481e      	ldr	r0, [pc, #120]	; (186c <_sercom_get_default_pad+0x178>)
    17f4:	e78c      	b.n	1710 <_sercom_get_default_pad+0x1c>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	42000c00 	.word	0x42000c00
    17fc:	42001400 	.word	0x42001400
    1800:	42001800 	.word	0x42001800
    1804:	42001000 	.word	0x42001000
    1808:	42000400 	.word	0x42000400
    180c:	42000800 	.word	0x42000800
    1810:	00050003 	.word	0x00050003
    1814:	00060003 	.word	0x00060003
    1818:	00070003 	.word	0x00070003
    181c:	00110002 	.word	0x00110002
    1820:	00120002 	.word	0x00120002
    1824:	00130002 	.word	0x00130002
    1828:	000d0002 	.word	0x000d0002
    182c:	000e0002 	.word	0x000e0002
    1830:	000f0002 	.word	0x000f0002
    1834:	00170002 	.word	0x00170002
    1838:	00180002 	.word	0x00180002
    183c:	00190002 	.word	0x00190002
    1840:	00290003 	.word	0x00290003
    1844:	002a0003 	.word	0x002a0003
    1848:	002b0003 	.word	0x002b0003
    184c:	00230003 	.word	0x00230003
    1850:	00200003 	.word	0x00200003
    1854:	00210003 	.word	0x00210003
    1858:	00040003 	.word	0x00040003
    185c:	00100002 	.word	0x00100002
    1860:	000c0002 	.word	0x000c0002
    1864:	00160002 	.word	0x00160002
    1868:	00280003 	.word	0x00280003
    186c:	00220003 	.word	0x00220003

00001870 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1870:	b530      	push	{r4, r5, lr}
    1872:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1874:	4b0b      	ldr	r3, [pc, #44]	; (18a4 <_sercom_get_sercom_inst_index+0x34>)
    1876:	466a      	mov	r2, sp
    1878:	cb32      	ldmia	r3!, {r1, r4, r5}
    187a:	c232      	stmia	r2!, {r1, r4, r5}
    187c:	cb32      	ldmia	r3!, {r1, r4, r5}
    187e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1880:	9b00      	ldr	r3, [sp, #0]
    1882:	4283      	cmp	r3, r0
    1884:	d00b      	beq.n	189e <_sercom_get_sercom_inst_index+0x2e>
    1886:	2301      	movs	r3, #1
    1888:	009a      	lsls	r2, r3, #2
    188a:	4669      	mov	r1, sp
    188c:	5852      	ldr	r2, [r2, r1]
    188e:	4282      	cmp	r2, r0
    1890:	d006      	beq.n	18a0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1892:	3301      	adds	r3, #1
    1894:	2b06      	cmp	r3, #6
    1896:	d1f7      	bne.n	1888 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1898:	2000      	movs	r0, #0
}
    189a:	b007      	add	sp, #28
    189c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    189e:	2300      	movs	r3, #0
			return i;
    18a0:	b2d8      	uxtb	r0, r3
    18a2:	e7fa      	b.n	189a <_sercom_get_sercom_inst_index+0x2a>
    18a4:	00004ef4 	.word	0x00004ef4

000018a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    18a8:	4770      	bx	lr
	...

000018ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    18ae:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <_sercom_set_handler+0x2c>)
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d10c      	bne.n	18d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18b6:	4f09      	ldr	r7, [pc, #36]	; (18dc <_sercom_set_handler+0x30>)
    18b8:	4e09      	ldr	r6, [pc, #36]	; (18e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    18ba:	4d0a      	ldr	r5, [pc, #40]	; (18e4 <_sercom_set_handler+0x38>)
    18bc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    18c0:	195a      	adds	r2, r3, r5
    18c2:	6014      	str	r4, [r2, #0]
    18c4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18c6:	2b18      	cmp	r3, #24
    18c8:	d1f9      	bne.n	18be <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    18ca:	2201      	movs	r2, #1
    18cc:	4b02      	ldr	r3, [pc, #8]	; (18d8 <_sercom_set_handler+0x2c>)
    18ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    18d0:	0080      	lsls	r0, r0, #2
    18d2:	4b02      	ldr	r3, [pc, #8]	; (18dc <_sercom_set_handler+0x30>)
    18d4:	50c1      	str	r1, [r0, r3]
}
    18d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18d8:	2000033e 	.word	0x2000033e
    18dc:	20000340 	.word	0x20000340
    18e0:	000018a9 	.word	0x000018a9
    18e4:	20000480 	.word	0x20000480

000018e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    18e8:	b500      	push	{lr}
    18ea:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    18ec:	2309      	movs	r3, #9
    18ee:	466a      	mov	r2, sp
    18f0:	7013      	strb	r3, [r2, #0]
    18f2:	3301      	adds	r3, #1
    18f4:	7053      	strb	r3, [r2, #1]
    18f6:	3301      	adds	r3, #1
    18f8:	7093      	strb	r3, [r2, #2]
    18fa:	3301      	adds	r3, #1
    18fc:	70d3      	strb	r3, [r2, #3]
    18fe:	3301      	adds	r3, #1
    1900:	7113      	strb	r3, [r2, #4]
    1902:	3301      	adds	r3, #1
    1904:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1906:	4b03      	ldr	r3, [pc, #12]	; (1914 <_sercom_get_interrupt_vector+0x2c>)
    1908:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    190a:	466b      	mov	r3, sp
    190c:	5618      	ldrsb	r0, [r3, r0]
}
    190e:	b003      	add	sp, #12
    1910:	bd00      	pop	{pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	00001871 	.word	0x00001871

00001918 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1918:	b510      	push	{r4, lr}
    191a:	4b02      	ldr	r3, [pc, #8]	; (1924 <SERCOM0_Handler+0xc>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	2000      	movs	r0, #0
    1920:	4798      	blx	r3
    1922:	bd10      	pop	{r4, pc}
    1924:	20000340 	.word	0x20000340

00001928 <SERCOM1_Handler>:
    1928:	b510      	push	{r4, lr}
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <SERCOM1_Handler+0xc>)
    192c:	685b      	ldr	r3, [r3, #4]
    192e:	2001      	movs	r0, #1
    1930:	4798      	blx	r3
    1932:	bd10      	pop	{r4, pc}
    1934:	20000340 	.word	0x20000340

00001938 <SERCOM2_Handler>:
    1938:	b510      	push	{r4, lr}
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <SERCOM2_Handler+0xc>)
    193c:	689b      	ldr	r3, [r3, #8]
    193e:	2002      	movs	r0, #2
    1940:	4798      	blx	r3
    1942:	bd10      	pop	{r4, pc}
    1944:	20000340 	.word	0x20000340

00001948 <SERCOM3_Handler>:
    1948:	b510      	push	{r4, lr}
    194a:	4b02      	ldr	r3, [pc, #8]	; (1954 <SERCOM3_Handler+0xc>)
    194c:	68db      	ldr	r3, [r3, #12]
    194e:	2003      	movs	r0, #3
    1950:	4798      	blx	r3
    1952:	bd10      	pop	{r4, pc}
    1954:	20000340 	.word	0x20000340

00001958 <SERCOM4_Handler>:
    1958:	b510      	push	{r4, lr}
    195a:	4b02      	ldr	r3, [pc, #8]	; (1964 <SERCOM4_Handler+0xc>)
    195c:	691b      	ldr	r3, [r3, #16]
    195e:	2004      	movs	r0, #4
    1960:	4798      	blx	r3
    1962:	bd10      	pop	{r4, pc}
    1964:	20000340 	.word	0x20000340

00001968 <SERCOM5_Handler>:
    1968:	b510      	push	{r4, lr}
    196a:	4b02      	ldr	r3, [pc, #8]	; (1974 <SERCOM5_Handler+0xc>)
    196c:	695b      	ldr	r3, [r3, #20]
    196e:	2005      	movs	r0, #5
    1970:	4798      	blx	r3
    1972:	bd10      	pop	{r4, pc}
    1974:	20000340 	.word	0x20000340

00001978 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	46de      	mov	lr, fp
    197c:	4657      	mov	r7, sl
    197e:	464e      	mov	r6, r9
    1980:	4645      	mov	r5, r8
    1982:	b5e0      	push	{r5, r6, r7, lr}
    1984:	b091      	sub	sp, #68	; 0x44
    1986:	0005      	movs	r5, r0
    1988:	000c      	movs	r4, r1
    198a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    198c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    198e:	0008      	movs	r0, r1
    1990:	4bd4      	ldr	r3, [pc, #848]	; (1ce4 <usart_init+0x36c>)
    1992:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1994:	2805      	cmp	r0, #5
    1996:	d00d      	beq.n	19b4 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1998:	0007      	movs	r7, r0
    199a:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    199c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    199e:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    19a0:	07d2      	lsls	r2, r2, #31
    19a2:	d509      	bpl.n	19b8 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    19a4:	0018      	movs	r0, r3
    19a6:	b011      	add	sp, #68	; 0x44
    19a8:	bc3c      	pop	{r2, r3, r4, r5}
    19aa:	4690      	mov	r8, r2
    19ac:	4699      	mov	r9, r3
    19ae:	46a2      	mov	sl, r4
    19b0:	46ab      	mov	fp, r5
    19b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    19b4:	2719      	movs	r7, #25
    19b6:	e7f1      	b.n	199c <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19b8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    19ba:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19bc:	0792      	lsls	r2, r2, #30
    19be:	d4f1      	bmi.n	19a4 <usart_init+0x2c>
			MCLK->APBCMASK.reg |= mask;
    19c0:	4ac9      	ldr	r2, [pc, #804]	; (1ce8 <usart_init+0x370>)
    19c2:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    19c4:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    19c6:	3b1b      	subs	r3, #27
    19c8:	4083      	lsls	r3, r0
    19ca:	430b      	orrs	r3, r1
    19cc:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    19ce:	a90f      	add	r1, sp, #60	; 0x3c
    19d0:	2335      	movs	r3, #53	; 0x35
    19d2:	4698      	mov	r8, r3
    19d4:	5cf3      	ldrb	r3, [r6, r3]
    19d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    19d8:	b2ff      	uxtb	r7, r7
    19da:	0038      	movs	r0, r7
    19dc:	4bc3      	ldr	r3, [pc, #780]	; (1cec <usart_init+0x374>)
    19de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    19e0:	0038      	movs	r0, r7
    19e2:	4bc3      	ldr	r3, [pc, #780]	; (1cf0 <usart_init+0x378>)
    19e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    19e6:	4643      	mov	r3, r8
    19e8:	5cf0      	ldrb	r0, [r6, r3]
    19ea:	2100      	movs	r1, #0
    19ec:	4bc1      	ldr	r3, [pc, #772]	; (1cf4 <usart_init+0x37c>)
    19ee:	4798      	blx	r3
	module->character_size = config->character_size;
    19f0:	7af3      	ldrb	r3, [r6, #11]
    19f2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    19f4:	232c      	movs	r3, #44	; 0x2c
    19f6:	5cf3      	ldrb	r3, [r6, r3]
    19f8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    19fa:	232d      	movs	r3, #45	; 0x2d
    19fc:	5cf3      	ldrb	r3, [r6, r3]
    19fe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1a00:	7ef3      	ldrb	r3, [r6, #27]
    1a02:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a04:	2324      	movs	r3, #36	; 0x24
    1a06:	5cf3      	ldrb	r3, [r6, r3]
    1a08:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a0a:	682b      	ldr	r3, [r5, #0]
    1a0c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a0e:	0018      	movs	r0, r3
    1a10:	4bb4      	ldr	r3, [pc, #720]	; (1ce4 <usart_init+0x36c>)
    1a12:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a14:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1a16:	2200      	movs	r2, #0
    1a18:	230e      	movs	r3, #14
    1a1a:	a906      	add	r1, sp, #24
    1a1c:	468c      	mov	ip, r1
    1a1e:	4463      	add	r3, ip
    1a20:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1a22:	8a33      	ldrh	r3, [r6, #16]
    1a24:	4698      	mov	r8, r3
    1a26:	2380      	movs	r3, #128	; 0x80
    1a28:	01db      	lsls	r3, r3, #7
    1a2a:	4598      	cmp	r8, r3
    1a2c:	d100      	bne.n	1a30 <usart_init+0xb8>
    1a2e:	e0c3      	b.n	1bb8 <usart_init+0x240>
    1a30:	d90e      	bls.n	1a50 <usart_init+0xd8>
    1a32:	23c0      	movs	r3, #192	; 0xc0
    1a34:	01db      	lsls	r3, r3, #7
    1a36:	4598      	cmp	r8, r3
    1a38:	d100      	bne.n	1a3c <usart_init+0xc4>
    1a3a:	e0b8      	b.n	1bae <usart_init+0x236>
    1a3c:	2380      	movs	r3, #128	; 0x80
    1a3e:	021b      	lsls	r3, r3, #8
    1a40:	4598      	cmp	r8, r3
    1a42:	d000      	beq.n	1a46 <usart_init+0xce>
    1a44:	e148      	b.n	1cd8 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1a46:	2303      	movs	r3, #3
    1a48:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a4a:	2300      	movs	r3, #0
    1a4c:	9307      	str	r3, [sp, #28]
    1a4e:	e008      	b.n	1a62 <usart_init+0xea>
	switch (config->sample_rate) {
    1a50:	2380      	movs	r3, #128	; 0x80
    1a52:	019b      	lsls	r3, r3, #6
    1a54:	4598      	cmp	r8, r3
    1a56:	d000      	beq.n	1a5a <usart_init+0xe2>
    1a58:	e13e      	b.n	1cd8 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a5a:	2310      	movs	r3, #16
    1a5c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a5e:	3b0f      	subs	r3, #15
    1a60:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1a62:	6833      	ldr	r3, [r6, #0]
    1a64:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1a66:	68f3      	ldr	r3, [r6, #12]
    1a68:	469b      	mov	fp, r3
		config->sample_adjustment |
    1a6a:	6973      	ldr	r3, [r6, #20]
    1a6c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a6e:	7e33      	ldrb	r3, [r6, #24]
    1a70:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a72:	232e      	movs	r3, #46	; 0x2e
    1a74:	5cf3      	ldrb	r3, [r6, r3]
    1a76:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1a78:	6873      	ldr	r3, [r6, #4]
    1a7a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d100      	bne.n	1a82 <usart_init+0x10a>
    1a80:	e0c7      	b.n	1c12 <usart_init+0x29a>
    1a82:	2380      	movs	r3, #128	; 0x80
    1a84:	055b      	lsls	r3, r3, #21
    1a86:	4599      	cmp	r9, r3
    1a88:	d100      	bne.n	1a8c <usart_init+0x114>
    1a8a:	e0aa      	b.n	1be2 <usart_init+0x26a>
	if(config->encoding_format_enable) {
    1a8c:	7e73      	ldrb	r3, [r6, #25]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d002      	beq.n	1a98 <usart_init+0x120>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1a92:	7eb3      	ldrb	r3, [r6, #26]
    1a94:	9a02      	ldr	r2, [sp, #8]
    1a96:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1a98:	682a      	ldr	r2, [r5, #0]
    1a9a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1a9c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d1fc      	bne.n	1a9c <usart_init+0x124>
    1aa2:	9702      	str	r7, [sp, #8]
	usart_hw->BAUD.reg = baud;
    1aa4:	330e      	adds	r3, #14
    1aa6:	a906      	add	r1, sp, #24
    1aa8:	468c      	mov	ip, r1
    1aaa:	4463      	add	r3, ip
    1aac:	881b      	ldrh	r3, [r3, #0]
    1aae:	81bb      	strh	r3, [r7, #12]
	ctrla |= transfer_mode;
    1ab0:	9a05      	ldr	r2, [sp, #20]
    1ab2:	465b      	mov	r3, fp
    1ab4:	431a      	orrs	r2, r3
    1ab6:	9b03      	ldr	r3, [sp, #12]
    1ab8:	431a      	orrs	r2, r3
    1aba:	464b      	mov	r3, r9
    1abc:	431a      	orrs	r2, r3
    1abe:	4643      	mov	r3, r8
    1ac0:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ac2:	9b04      	ldr	r3, [sp, #16]
    1ac4:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ac6:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ac8:	4653      	mov	r3, sl
    1aca:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1acc:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    1ace:	232f      	movs	r3, #47	; 0x2f
    1ad0:	5cf3      	ldrb	r3, [r6, r3]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d101      	bne.n	1ada <usart_init+0x162>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1ad6:	3304      	adds	r3, #4
    1ad8:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ada:	7e73      	ldrb	r3, [r6, #25]
    1adc:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1ade:	2124      	movs	r1, #36	; 0x24
    1ae0:	5c71      	ldrb	r1, [r6, r1]
    1ae2:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ae4:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1ae6:	2126      	movs	r1, #38	; 0x26
    1ae8:	5c71      	ldrb	r1, [r6, r1]
    1aea:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1aec:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1aee:	212c      	movs	r1, #44	; 0x2c
    1af0:	5c71      	ldrb	r1, [r6, r1]
    1af2:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1af4:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1af6:	212d      	movs	r1, #45	; 0x2d
    1af8:	5c71      	ldrb	r1, [r6, r1]
    1afa:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1afc:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1afe:	7af1      	ldrb	r1, [r6, #11]
    1b00:	4319      	orrs	r1, r3
    1b02:	468c      	mov	ip, r1
	if (config->parity != USART_PARITY_NONE) {
    1b04:	8933      	ldrh	r3, [r6, #8]
    1b06:	2bff      	cmp	r3, #255	; 0xff
    1b08:	d100      	bne.n	1b0c <usart_init+0x194>
    1b0a:	e0a8      	b.n	1c5e <usart_init+0x2e6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1b0c:	2180      	movs	r1, #128	; 0x80
    1b0e:	0449      	lsls	r1, r1, #17
    1b10:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    1b12:	4661      	mov	r1, ip
    1b14:	4319      	orrs	r1, r3
    1b16:	468c      	mov	ip, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1b18:	9f02      	ldr	r7, [sp, #8]
    1b1a:	68bb      	ldr	r3, [r7, #8]
						| config->lin_break_length;
    1b1c:	8c31      	ldrh	r1, [r6, #32]
    1b1e:	8c70      	ldrh	r0, [r6, #34]	; 0x22
    1b20:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1b22:	2007      	movs	r0, #7
    1b24:	4018      	ands	r0, r3
						| config->lin_break_length;
    1b26:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1b28:	60b9      	str	r1, [r7, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1b2a:	69f3      	ldr	r3, [r6, #28]
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d002      	beq.n	1b36 <usart_init+0x1be>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1b30:	4971      	ldr	r1, [pc, #452]	; (1cf8 <usart_init+0x380>)
    1b32:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1b34:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1b36:	2334      	movs	r3, #52	; 0x34
    1b38:	5cf3      	ldrb	r3, [r6, r3]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d103      	bne.n	1b46 <usart_init+0x1ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1b3e:	4b6f      	ldr	r3, [pc, #444]	; (1cfc <usart_init+0x384>)
    1b40:	789b      	ldrb	r3, [r3, #2]
    1b42:	079b      	lsls	r3, r3, #30
    1b44:	d501      	bpl.n	1b4a <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1b46:	2380      	movs	r3, #128	; 0x80
    1b48:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b4a:	6829      	ldr	r1, [r5, #0]
    1b4c:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1b4e:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1b50:	2b00      	cmp	r3, #0
    1b52:	d1fc      	bne.n	1b4e <usart_init+0x1d6>
	usart_hw->CTRLB.reg = ctrlb;
    1b54:	4663      	mov	r3, ip
    1b56:	607b      	str	r3, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b58:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b5a:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d1fc      	bne.n	1b5a <usart_init+0x1e2>
	usart_hw->CTRLA.reg = ctrla;
    1b60:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1b62:	683b      	ldr	r3, [r7, #0]
    1b64:	22f0      	movs	r2, #240	; 0xf0
    1b66:	0512      	lsls	r2, r2, #20
    1b68:	4013      	ands	r3, r2
    1b6a:	22e0      	movs	r2, #224	; 0xe0
    1b6c:	04d2      	lsls	r2, r2, #19
    1b6e:	4293      	cmp	r3, r2
    1b70:	d00a      	beq.n	1b88 <usart_init+0x210>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1b72:	68bb      	ldr	r3, [r7, #8]
    1b74:	2207      	movs	r2, #7
    1b76:	4393      	bics	r3, r2
    1b78:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1b7a:	68ba      	ldr	r2, [r7, #8]
    1b7c:	2325      	movs	r3, #37	; 0x25
    1b7e:	5cf1      	ldrb	r1, [r6, r3]
    1b80:	3b1e      	subs	r3, #30
    1b82:	400b      	ands	r3, r1
    1b84:	4313      	orrs	r3, r2
    1b86:	60bb      	str	r3, [r7, #8]
    1b88:	ab0e      	add	r3, sp, #56	; 0x38
    1b8a:	2280      	movs	r2, #128	; 0x80
    1b8c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b8e:	2200      	movs	r2, #0
    1b90:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1b92:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b94:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1b96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1b98:	930a      	str	r3, [sp, #40]	; 0x28
    1b9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1b9c:	930b      	str	r3, [sp, #44]	; 0x2c
    1b9e:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1ba0:	930c      	str	r3, [sp, #48]	; 0x30
    1ba2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1ba4:	9302      	str	r3, [sp, #8]
    1ba6:	930d      	str	r3, [sp, #52]	; 0x34
    1ba8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1baa:	ae0a      	add	r6, sp, #40	; 0x28
    1bac:	e066      	b.n	1c7c <usart_init+0x304>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1bae:	2308      	movs	r3, #8
    1bb0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1bb2:	3b07      	subs	r3, #7
    1bb4:	9307      	str	r3, [sp, #28]
    1bb6:	e754      	b.n	1a62 <usart_init+0xea>
	ctrla = (uint32_t)config->data_order |
    1bb8:	6833      	ldr	r3, [r6, #0]
    1bba:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1bbc:	68f3      	ldr	r3, [r6, #12]
    1bbe:	469b      	mov	fp, r3
		config->sample_adjustment |
    1bc0:	6973      	ldr	r3, [r6, #20]
    1bc2:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1bc4:	7e33      	ldrb	r3, [r6, #24]
    1bc6:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1bc8:	232e      	movs	r3, #46	; 0x2e
    1bca:	5cf3      	ldrb	r3, [r6, r3]
    1bcc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1bce:	6873      	ldr	r3, [r6, #4]
    1bd0:	4699      	mov	r9, r3
	switch (transfer_mode)
    1bd2:	2b00      	cmp	r3, #0
    1bd4:	d019      	beq.n	1c0a <usart_init+0x292>
    1bd6:	2380      	movs	r3, #128	; 0x80
    1bd8:	055b      	lsls	r3, r3, #21
    1bda:	4599      	cmp	r9, r3
    1bdc:	d001      	beq.n	1be2 <usart_init+0x26a>
	enum status_code status_code = STATUS_OK;
    1bde:	2300      	movs	r3, #0
    1be0:	e027      	b.n	1c32 <usart_init+0x2ba>
			if (!config->use_external_clock) {
    1be2:	232f      	movs	r3, #47	; 0x2f
    1be4:	5cf3      	ldrb	r3, [r6, r3]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d000      	beq.n	1bec <usart_init+0x274>
    1bea:	e74f      	b.n	1a8c <usart_init+0x114>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1bec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1bee:	001f      	movs	r7, r3
    1bf0:	b2c0      	uxtb	r0, r0
    1bf2:	4b43      	ldr	r3, [pc, #268]	; (1d00 <usart_init+0x388>)
    1bf4:	4798      	blx	r3
    1bf6:	0001      	movs	r1, r0
    1bf8:	220e      	movs	r2, #14
    1bfa:	ab06      	add	r3, sp, #24
    1bfc:	469c      	mov	ip, r3
    1bfe:	4462      	add	r2, ip
    1c00:	0038      	movs	r0, r7
    1c02:	4b40      	ldr	r3, [pc, #256]	; (1d04 <usart_init+0x38c>)
    1c04:	4798      	blx	r3
    1c06:	0003      	movs	r3, r0
    1c08:	e013      	b.n	1c32 <usart_init+0x2ba>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1c0a:	2308      	movs	r3, #8
    1c0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c0e:	2300      	movs	r3, #0
    1c10:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1c12:	232f      	movs	r3, #47	; 0x2f
    1c14:	5cf3      	ldrb	r3, [r6, r3]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d00f      	beq.n	1c3a <usart_init+0x2c2>
				status_code =
    1c1a:	9b06      	ldr	r3, [sp, #24]
    1c1c:	9300      	str	r3, [sp, #0]
    1c1e:	9b07      	ldr	r3, [sp, #28]
    1c20:	220e      	movs	r2, #14
    1c22:	a906      	add	r1, sp, #24
    1c24:	468c      	mov	ip, r1
    1c26:	4462      	add	r2, ip
    1c28:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1c2a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1c2c:	4f36      	ldr	r7, [pc, #216]	; (1d08 <usart_init+0x390>)
    1c2e:	47b8      	blx	r7
    1c30:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    1c32:	2b00      	cmp	r3, #0
    1c34:	d000      	beq.n	1c38 <usart_init+0x2c0>
    1c36:	e6b5      	b.n	19a4 <usart_init+0x2c>
    1c38:	e728      	b.n	1a8c <usart_init+0x114>
						_sercom_get_async_baud_val(config->baudrate,
    1c3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1c3c:	001f      	movs	r7, r3
    1c3e:	b2c0      	uxtb	r0, r0
    1c40:	4b2f      	ldr	r3, [pc, #188]	; (1d00 <usart_init+0x388>)
    1c42:	4798      	blx	r3
    1c44:	0001      	movs	r1, r0
				status_code =
    1c46:	9b06      	ldr	r3, [sp, #24]
    1c48:	9300      	str	r3, [sp, #0]
    1c4a:	9b07      	ldr	r3, [sp, #28]
    1c4c:	220e      	movs	r2, #14
    1c4e:	a806      	add	r0, sp, #24
    1c50:	4684      	mov	ip, r0
    1c52:	4462      	add	r2, ip
    1c54:	0038      	movs	r0, r7
    1c56:	4f2c      	ldr	r7, [pc, #176]	; (1d08 <usart_init+0x390>)
    1c58:	47b8      	blx	r7
    1c5a:	0003      	movs	r3, r0
    1c5c:	e7e9      	b.n	1c32 <usart_init+0x2ba>
		if(config->lin_slave_enable) {
    1c5e:	7ef3      	ldrb	r3, [r6, #27]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d100      	bne.n	1c66 <usart_init+0x2ee>
    1c64:	e758      	b.n	1b18 <usart_init+0x1a0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1c66:	2380      	movs	r3, #128	; 0x80
    1c68:	04db      	lsls	r3, r3, #19
    1c6a:	431a      	orrs	r2, r3
    1c6c:	e754      	b.n	1b18 <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c6e:	0020      	movs	r0, r4
    1c70:	4b26      	ldr	r3, [pc, #152]	; (1d0c <usart_init+0x394>)
    1c72:	4798      	blx	r3
    1c74:	e007      	b.n	1c86 <usart_init+0x30e>
    1c76:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c78:	2f04      	cmp	r7, #4
    1c7a:	d00d      	beq.n	1c98 <usart_init+0x320>
    1c7c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c7e:	00bb      	lsls	r3, r7, #2
    1c80:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1c82:	2800      	cmp	r0, #0
    1c84:	d0f3      	beq.n	1c6e <usart_init+0x2f6>
		if (current_pinmux != PINMUX_UNUSED) {
    1c86:	1c43      	adds	r3, r0, #1
    1c88:	d0f5      	beq.n	1c76 <usart_init+0x2fe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1c8a:	a90e      	add	r1, sp, #56	; 0x38
    1c8c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c8e:	0c00      	lsrs	r0, r0, #16
    1c90:	b2c0      	uxtb	r0, r0
    1c92:	4b1f      	ldr	r3, [pc, #124]	; (1d10 <usart_init+0x398>)
    1c94:	4798      	blx	r3
    1c96:	e7ee      	b.n	1c76 <usart_init+0x2fe>
		module->callback[i]            = NULL;
    1c98:	2300      	movs	r3, #0
    1c9a:	60eb      	str	r3, [r5, #12]
    1c9c:	612b      	str	r3, [r5, #16]
    1c9e:	616b      	str	r3, [r5, #20]
    1ca0:	61ab      	str	r3, [r5, #24]
    1ca2:	61eb      	str	r3, [r5, #28]
    1ca4:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1ca6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1ca8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1caa:	2200      	movs	r2, #0
    1cac:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1cae:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1cb0:	3330      	adds	r3, #48	; 0x30
    1cb2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1cb4:	3301      	adds	r3, #1
    1cb6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1cb8:	3301      	adds	r3, #1
    1cba:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1cbc:	3301      	adds	r3, #1
    1cbe:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cc0:	6828      	ldr	r0, [r5, #0]
    1cc2:	4b08      	ldr	r3, [pc, #32]	; (1ce4 <usart_init+0x36c>)
    1cc4:	4798      	blx	r3
    1cc6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1cc8:	4912      	ldr	r1, [pc, #72]	; (1d14 <usart_init+0x39c>)
    1cca:	4b13      	ldr	r3, [pc, #76]	; (1d18 <usart_init+0x3a0>)
    1ccc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1cce:	00a4      	lsls	r4, r4, #2
    1cd0:	4b12      	ldr	r3, [pc, #72]	; (1d1c <usart_init+0x3a4>)
    1cd2:	50e5      	str	r5, [r4, r3]
	return status_code;
    1cd4:	2300      	movs	r3, #0
    1cd6:	e665      	b.n	19a4 <usart_init+0x2c>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1cd8:	2310      	movs	r3, #16
    1cda:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1cdc:	2300      	movs	r3, #0
    1cde:	9307      	str	r3, [sp, #28]
    1ce0:	e6bf      	b.n	1a62 <usart_init+0xea>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00001871 	.word	0x00001871
    1ce8:	40000800 	.word	0x40000800
    1cec:	000024cd 	.word	0x000024cd
    1cf0:	0000245d 	.word	0x0000245d
    1cf4:	000016a9 	.word	0x000016a9
    1cf8:	f0ffffff 	.word	0xf0ffffff
    1cfc:	41002000 	.word	0x41002000
    1d00:	000024f1 	.word	0x000024f1
    1d04:	000014b1 	.word	0x000014b1
    1d08:	000014d9 	.word	0x000014d9
    1d0c:	000016f5 	.word	0x000016f5
    1d10:	000025c9 	.word	0x000025c9
    1d14:	00001dbd 	.word	0x00001dbd
    1d18:	000018ad 	.word	0x000018ad
    1d1c:	20000480 	.word	0x20000480

00001d20 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1d20:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1d22:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1d24:	2a00      	cmp	r2, #0
    1d26:	d101      	bne.n	1d2c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1d28:	0018      	movs	r0, r3
    1d2a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1d2c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1d2e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d30:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1d32:	2a00      	cmp	r2, #0
    1d34:	d1f8      	bne.n	1d28 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d36:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d38:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1d3a:	2a00      	cmp	r2, #0
    1d3c:	d1fc      	bne.n	1d38 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1d3e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d40:	2102      	movs	r1, #2
    1d42:	7e1a      	ldrb	r2, [r3, #24]
    1d44:	420a      	tst	r2, r1
    1d46:	d0fc      	beq.n	1d42 <usart_write_wait+0x22>
	return STATUS_OK;
    1d48:	2300      	movs	r3, #0
    1d4a:	e7ed      	b.n	1d28 <usart_write_wait+0x8>

00001d4c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1d4c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1d4e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1d50:	2a00      	cmp	r2, #0
    1d52:	d101      	bne.n	1d58 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1d54:	0018      	movs	r0, r3
    1d56:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1d58:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1d5a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d5c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d1f8      	bne.n	1d54 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d62:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1d64:	7e10      	ldrb	r0, [r2, #24]
    1d66:	0740      	lsls	r0, r0, #29
    1d68:	d5f4      	bpl.n	1d54 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1d6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d1fc      	bne.n	1d6a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d70:	8b53      	ldrh	r3, [r2, #26]
    1d72:	b2db      	uxtb	r3, r3
	if (error_code) {
    1d74:	0658      	lsls	r0, r3, #25
    1d76:	d01d      	beq.n	1db4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1d78:	0798      	lsls	r0, r3, #30
    1d7a:	d503      	bpl.n	1d84 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d7c:	2302      	movs	r3, #2
    1d7e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1d80:	3318      	adds	r3, #24
    1d82:	e7e7      	b.n	1d54 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d84:	0758      	lsls	r0, r3, #29
    1d86:	d503      	bpl.n	1d90 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d88:	2304      	movs	r3, #4
    1d8a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1d8c:	331a      	adds	r3, #26
    1d8e:	e7e1      	b.n	1d54 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d90:	07d8      	lsls	r0, r3, #31
    1d92:	d503      	bpl.n	1d9c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1d94:	2301      	movs	r3, #1
    1d96:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1d98:	3312      	adds	r3, #18
    1d9a:	e7db      	b.n	1d54 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d9c:	06d8      	lsls	r0, r3, #27
    1d9e:	d503      	bpl.n	1da8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1da0:	2310      	movs	r3, #16
    1da2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1da4:	3332      	adds	r3, #50	; 0x32
    1da6:	e7d5      	b.n	1d54 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1da8:	069b      	lsls	r3, r3, #26
    1daa:	d503      	bpl.n	1db4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1dac:	2320      	movs	r3, #32
    1dae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1db0:	3321      	adds	r3, #33	; 0x21
    1db2:	e7cf      	b.n	1d54 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1db4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1db6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1db8:	2300      	movs	r3, #0
    1dba:	e7cb      	b.n	1d54 <usart_read_wait+0x8>

00001dbc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1dbe:	0080      	lsls	r0, r0, #2
    1dc0:	4b64      	ldr	r3, [pc, #400]	; (1f54 <_usart_interrupt_handler+0x198>)
    1dc2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1dc4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1dc6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d1fc      	bne.n	1dc6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1dcc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1dce:	7da6      	ldrb	r6, [r4, #22]
    1dd0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1dd2:	2330      	movs	r3, #48	; 0x30
    1dd4:	5ceb      	ldrb	r3, [r5, r3]
    1dd6:	2231      	movs	r2, #49	; 0x31
    1dd8:	5caf      	ldrb	r7, [r5, r2]
    1dda:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1ddc:	07f3      	lsls	r3, r6, #31
    1dde:	d522      	bpl.n	1e26 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1de0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1de2:	b29b      	uxth	r3, r3
    1de4:	2b00      	cmp	r3, #0
    1de6:	d01c      	beq.n	1e22 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1de8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1dea:	7813      	ldrb	r3, [r2, #0]
    1dec:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1dee:	1c51      	adds	r1, r2, #1
    1df0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1df2:	7969      	ldrb	r1, [r5, #5]
    1df4:	2901      	cmp	r1, #1
    1df6:	d00e      	beq.n	1e16 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1df8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1dfa:	05db      	lsls	r3, r3, #23
    1dfc:	0ddb      	lsrs	r3, r3, #23
    1dfe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e02:	3b01      	subs	r3, #1
    1e04:	b29b      	uxth	r3, r3
    1e06:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d10c      	bne.n	1e26 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e0c:	3301      	adds	r3, #1
    1e0e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e10:	3301      	adds	r3, #1
    1e12:	75a3      	strb	r3, [r4, #22]
    1e14:	e007      	b.n	1e26 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e16:	7851      	ldrb	r1, [r2, #1]
    1e18:	0209      	lsls	r1, r1, #8
    1e1a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1e1c:	3202      	adds	r2, #2
    1e1e:	62aa      	str	r2, [r5, #40]	; 0x28
    1e20:	e7eb      	b.n	1dfa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e22:	2301      	movs	r3, #1
    1e24:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e26:	07b3      	lsls	r3, r6, #30
    1e28:	d506      	bpl.n	1e38 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1e2a:	2302      	movs	r3, #2
    1e2c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1e2e:	2200      	movs	r2, #0
    1e30:	3331      	adds	r3, #49	; 0x31
    1e32:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1e34:	07fb      	lsls	r3, r7, #31
    1e36:	d41e      	bmi.n	1e76 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1e38:	0773      	lsls	r3, r6, #29
    1e3a:	d568      	bpl.n	1f0e <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
    1e3c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1e3e:	b29b      	uxth	r3, r3
    1e40:	2b00      	cmp	r3, #0
    1e42:	d062      	beq.n	1f0a <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e44:	8b63      	ldrh	r3, [r4, #26]
    1e46:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1e48:	071a      	lsls	r2, r3, #28
    1e4a:	d418      	bmi.n	1e7e <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e4c:	227f      	movs	r2, #127	; 0x7f
    1e4e:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1e50:	065a      	lsls	r2, r3, #25
    1e52:	d501      	bpl.n	1e58 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1e54:	2240      	movs	r2, #64	; 0x40
    1e56:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d033      	beq.n	1ec4 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1e5c:	079a      	lsls	r2, r3, #30
    1e5e:	d511      	bpl.n	1e84 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1e60:	221a      	movs	r2, #26
    1e62:	2332      	movs	r3, #50	; 0x32
    1e64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1e66:	3b30      	subs	r3, #48	; 0x30
    1e68:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1e6a:	077b      	lsls	r3, r7, #29
    1e6c:	d54f      	bpl.n	1f0e <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1e6e:	0028      	movs	r0, r5
    1e70:	696b      	ldr	r3, [r5, #20]
    1e72:	4798      	blx	r3
    1e74:	e04b      	b.n	1f0e <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1e76:	0028      	movs	r0, r5
    1e78:	68eb      	ldr	r3, [r5, #12]
    1e7a:	4798      	blx	r3
    1e7c:	e7dc      	b.n	1e38 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1e7e:	2277      	movs	r2, #119	; 0x77
    1e80:	4013      	ands	r3, r2
    1e82:	e7e5      	b.n	1e50 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1e84:	075a      	lsls	r2, r3, #29
    1e86:	d505      	bpl.n	1e94 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1e88:	221e      	movs	r2, #30
    1e8a:	2332      	movs	r3, #50	; 0x32
    1e8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1e8e:	3b2e      	subs	r3, #46	; 0x2e
    1e90:	8363      	strh	r3, [r4, #26]
    1e92:	e7ea      	b.n	1e6a <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e94:	07da      	lsls	r2, r3, #31
    1e96:	d505      	bpl.n	1ea4 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1e98:	2213      	movs	r2, #19
    1e9a:	2332      	movs	r3, #50	; 0x32
    1e9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1e9e:	3b31      	subs	r3, #49	; 0x31
    1ea0:	8363      	strh	r3, [r4, #26]
    1ea2:	e7e2      	b.n	1e6a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ea4:	06da      	lsls	r2, r3, #27
    1ea6:	d505      	bpl.n	1eb4 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ea8:	2242      	movs	r2, #66	; 0x42
    1eaa:	2332      	movs	r3, #50	; 0x32
    1eac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1eae:	3b22      	subs	r3, #34	; 0x22
    1eb0:	8363      	strh	r3, [r4, #26]
    1eb2:	e7da      	b.n	1e6a <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1eb4:	069b      	lsls	r3, r3, #26
    1eb6:	d5d8      	bpl.n	1e6a <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1eb8:	2241      	movs	r2, #65	; 0x41
    1eba:	2332      	movs	r3, #50	; 0x32
    1ebc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1ebe:	3b12      	subs	r3, #18
    1ec0:	8363      	strh	r3, [r4, #26]
    1ec2:	e7d2      	b.n	1e6a <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1ec4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1ec6:	05db      	lsls	r3, r3, #23
    1ec8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1eca:	b2da      	uxtb	r2, r3
    1ecc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1ece:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1ed0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1ed2:	1c51      	adds	r1, r2, #1
    1ed4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ed6:	7969      	ldrb	r1, [r5, #5]
    1ed8:	2901      	cmp	r1, #1
    1eda:	d010      	beq.n	1efe <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1edc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1ede:	3b01      	subs	r3, #1
    1ee0:	b29b      	uxth	r3, r3
    1ee2:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d112      	bne.n	1f0e <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1ee8:	3304      	adds	r3, #4
    1eea:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1eec:	2200      	movs	r2, #0
    1eee:	332e      	adds	r3, #46	; 0x2e
    1ef0:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1ef2:	07bb      	lsls	r3, r7, #30
    1ef4:	d50b      	bpl.n	1f0e <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1ef6:	0028      	movs	r0, r5
    1ef8:	692b      	ldr	r3, [r5, #16]
    1efa:	4798      	blx	r3
    1efc:	e007      	b.n	1f0e <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1efe:	0a1b      	lsrs	r3, r3, #8
    1f00:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f04:	3301      	adds	r3, #1
    1f06:	626b      	str	r3, [r5, #36]	; 0x24
    1f08:	e7e8      	b.n	1edc <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f0a:	2304      	movs	r3, #4
    1f0c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f0e:	06f3      	lsls	r3, r6, #27
    1f10:	d504      	bpl.n	1f1c <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f12:	2310      	movs	r3, #16
    1f14:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f16:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f18:	06fb      	lsls	r3, r7, #27
    1f1a:	d40e      	bmi.n	1f3a <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f1c:	06b3      	lsls	r3, r6, #26
    1f1e:	d504      	bpl.n	1f2a <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f20:	2320      	movs	r3, #32
    1f22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1f26:	073b      	lsls	r3, r7, #28
    1f28:	d40b      	bmi.n	1f42 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1f2a:	0733      	lsls	r3, r6, #28
    1f2c:	d504      	bpl.n	1f38 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1f2e:	2308      	movs	r3, #8
    1f30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1f32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1f34:	06bb      	lsls	r3, r7, #26
    1f36:	d408      	bmi.n	1f4a <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f3a:	0028      	movs	r0, r5
    1f3c:	69eb      	ldr	r3, [r5, #28]
    1f3e:	4798      	blx	r3
    1f40:	e7ec      	b.n	1f1c <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1f42:	0028      	movs	r0, r5
    1f44:	69ab      	ldr	r3, [r5, #24]
    1f46:	4798      	blx	r3
    1f48:	e7ef      	b.n	1f2a <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1f4a:	6a2b      	ldr	r3, [r5, #32]
    1f4c:	0028      	movs	r0, r5
    1f4e:	4798      	blx	r3
}
    1f50:	e7f2      	b.n	1f38 <_usart_interrupt_handler+0x17c>
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	20000480 	.word	0x20000480

00001f58 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1f58:	b510      	push	{r4, lr}
	switch (clock_source) {
    1f5a:	2807      	cmp	r0, #7
    1f5c:	d803      	bhi.n	1f66 <system_clock_source_get_hz+0xe>
    1f5e:	0080      	lsls	r0, r0, #2
    1f60:	4b0f      	ldr	r3, [pc, #60]	; (1fa0 <system_clock_source_get_hz+0x48>)
    1f62:	581b      	ldr	r3, [r3, r0]
    1f64:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1f66:	2000      	movs	r0, #0
    1f68:	e018      	b.n	1f9c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    1f6a:	4b0e      	ldr	r3, [pc, #56]	; (1fa4 <system_clock_source_get_hz+0x4c>)
    1f6c:	6858      	ldr	r0, [r3, #4]
    1f6e:	e015      	b.n	1f9c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    1f70:	4b0d      	ldr	r3, [pc, #52]	; (1fa8 <system_clock_source_get_hz+0x50>)
    1f72:	7d59      	ldrb	r1, [r3, #21]
    1f74:	0709      	lsls	r1, r1, #28
    1f76:	0f09      	lsrs	r1, r1, #28
    1f78:	3101      	adds	r1, #1
    1f7a:	480c      	ldr	r0, [pc, #48]	; (1fac <system_clock_source_get_hz+0x54>)
    1f7c:	4b0c      	ldr	r3, [pc, #48]	; (1fb0 <system_clock_source_get_hz+0x58>)
    1f7e:	4798      	blx	r3
    1f80:	e00c      	b.n	1f9c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    1f82:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <system_clock_source_get_hz+0x4c>)
    1f84:	6898      	ldr	r0, [r3, #8]
    1f86:	e009      	b.n	1f9c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1f88:	4b07      	ldr	r3, [pc, #28]	; (1fa8 <system_clock_source_get_hz+0x50>)
    1f8a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    1f8c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1f8e:	079b      	lsls	r3, r3, #30
    1f90:	d504      	bpl.n	1f9c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    1f92:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <system_clock_source_get_hz+0x4c>)
    1f94:	6818      	ldr	r0, [r3, #0]
    1f96:	e001      	b.n	1f9c <system_clock_source_get_hz+0x44>
		return 32768UL;
    1f98:	2080      	movs	r0, #128	; 0x80
    1f9a:	0200      	lsls	r0, r0, #8
	}
}
    1f9c:	bd10      	pop	{r4, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00004f0c 	.word	0x00004f0c
    1fa4:	20000358 	.word	0x20000358
    1fa8:	40001000 	.word	0x40001000
    1fac:	02dc6c00 	.word	0x02dc6c00
    1fb0:	000036f9 	.word	0x000036f9

00001fb4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	46de      	mov	lr, fp
    1fb8:	4657      	mov	r7, sl
    1fba:	464e      	mov	r6, r9
    1fbc:	4645      	mov	r5, r8
    1fbe:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1fc0:	4a25      	ldr	r2, [pc, #148]	; (2058 <STACK_SIZE+0x58>)
    1fc2:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    1fc4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1fc6:	7801      	ldrb	r1, [r0, #0]
    1fc8:	424c      	negs	r4, r1
    1fca:	414c      	adcs	r4, r1
    1fcc:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    1fce:	7881      	ldrb	r1, [r0, #2]
    1fd0:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1fd2:	78c1      	ldrb	r1, [r0, #3]
    1fd4:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1fd6:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1fd8:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    1fda:	7a81      	ldrb	r1, [r0, #10]
    1fdc:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1fde:	491f      	ldr	r1, [pc, #124]	; (205c <STACK_SIZE+0x5c>)
    1fe0:	6844      	ldr	r4, [r0, #4]
    1fe2:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    1fe4:	7ac1      	ldrb	r1, [r0, #11]
    1fe6:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    1fe8:	7b84      	ldrb	r4, [r0, #14]
    1fea:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    1fec:	4321      	orrs	r1, r4
    1fee:	7b44      	ldrb	r4, [r0, #13]
    1ff0:	4321      	orrs	r1, r4
    1ff2:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    1ff4:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    1ff6:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    1ff8:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    1ffa:	2101      	movs	r1, #1
    1ffc:	4648      	mov	r0, r9
    1ffe:	0080      	lsls	r0, r0, #2
    2000:	2404      	movs	r4, #4
    2002:	43a3      	bics	r3, r4
    2004:	4303      	orrs	r3, r0
    2006:	4640      	mov	r0, r8
    2008:	4008      	ands	r0, r1
    200a:	00c0      	lsls	r0, r0, #3
    200c:	3404      	adds	r4, #4
    200e:	43a3      	bics	r3, r4
    2010:	4303      	orrs	r3, r0
    2012:	4660      	mov	r0, ip
    2014:	4008      	ands	r0, r1
    2016:	0100      	lsls	r0, r0, #4
    2018:	3408      	adds	r4, #8
    201a:	43a3      	bics	r3, r4
    201c:	4303      	orrs	r3, r0
    201e:	400f      	ands	r7, r1
    2020:	01bf      	lsls	r7, r7, #6
    2022:	2040      	movs	r0, #64	; 0x40
    2024:	4383      	bics	r3, r0
    2026:	433b      	orrs	r3, r7
    2028:	400e      	ands	r6, r1
    202a:	01f6      	lsls	r6, r6, #7
    202c:	3040      	adds	r0, #64	; 0x40
    202e:	4383      	bics	r3, r0
    2030:	4333      	orrs	r3, r6
    2032:	3879      	subs	r0, #121	; 0x79
    2034:	4005      	ands	r5, r0
    2036:	022d      	lsls	r5, r5, #8
    2038:	4809      	ldr	r0, [pc, #36]	; (2060 <STACK_SIZE+0x60>)
    203a:	4003      	ands	r3, r0
    203c:	432b      	orrs	r3, r5
    203e:	4658      	mov	r0, fp
    2040:	4001      	ands	r1, r0
    2042:	0309      	lsls	r1, r1, #12
    2044:	4807      	ldr	r0, [pc, #28]	; (2064 <STACK_SIZE+0x64>)
    2046:	4003      	ands	r3, r0
    2048:	430b      	orrs	r3, r1
    204a:	8293      	strh	r3, [r2, #20]
}
    204c:	bc3c      	pop	{r2, r3, r4, r5}
    204e:	4690      	mov	r8, r2
    2050:	4699      	mov	r9, r3
    2052:	46a2      	mov	sl, r4
    2054:	46ab      	mov	fp, r5
    2056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2058:	40001400 	.word	0x40001400
    205c:	20000358 	.word	0x20000358
    2060:	fffff8ff 	.word	0xfffff8ff
    2064:	ffffefff 	.word	0xffffefff

00002068 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2068:	b570      	push	{r4, r5, r6, lr}
    206a:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    206c:	68c3      	ldr	r3, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    206e:	7d02      	ldrb	r2, [r0, #20]
    2070:	2a01      	cmp	r2, #1
    2072:	d04e      	beq.n	2112 <system_clock_source_dpll_set_config+0xaa>
		refclk = refclk / config->reference_divider;
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2074:	68a2      	ldr	r2, [r4, #8]
    2076:	0110      	lsls	r0, r2, #4
    2078:	0019      	movs	r1, r3
    207a:	4b29      	ldr	r3, [pc, #164]	; (2120 <system_clock_source_dpll_set_config+0xb8>)
    207c:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    207e:	220f      	movs	r2, #15
    2080:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    2082:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2084:	7821      	ldrb	r1, [r4, #0]
    2086:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    2088:	7865      	ldrb	r5, [r4, #1]
    208a:	01ad      	lsls	r5, r5, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    208c:	4329      	orrs	r1, r5
    208e:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    2090:	4d24      	ldr	r5, [pc, #144]	; (2124 <system_clock_source_dpll_set_config+0xbc>)
    2092:	7729      	strb	r1, [r5, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2094:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    2096:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    2098:	051b      	lsls	r3, r3, #20
    209a:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    209c:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    209e:	622b      	str	r3, [r5, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    20a0:	002e      	movs	r6, r5
    20a2:	252c      	movs	r5, #44	; 0x2c
    20a4:	2104      	movs	r1, #4
    20a6:	5d73      	ldrb	r3, [r6, r5]
    20a8:	420b      	tst	r3, r1
    20aa:	d1fc      	bne.n	20a6 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    20ac:	78a3      	ldrb	r3, [r4, #2]
    20ae:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    20b0:	78e1      	ldrb	r1, [r4, #3]
    20b2:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    20b4:	430b      	orrs	r3, r1
    20b6:	7921      	ldrb	r1, [r4, #4]
    20b8:	0089      	lsls	r1, r1, #2
    20ba:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    20bc:	7ca1      	ldrb	r1, [r4, #18]
    20be:	2503      	movs	r5, #3
    20c0:	4029      	ands	r1, r5
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    20c2:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    20c4:	8a21      	ldrh	r1, [r4, #16]
    20c6:	0409      	lsls	r1, r1, #16
    20c8:	4e17      	ldr	r6, [pc, #92]	; (2128 <system_clock_source_dpll_set_config+0xc0>)
    20ca:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    20cc:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    20ce:	7ce1      	ldrb	r1, [r4, #19]
    20d0:	0209      	lsls	r1, r1, #8
    20d2:	26e0      	movs	r6, #224	; 0xe0
    20d4:	00f6      	lsls	r6, r6, #3
    20d6:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    20d8:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    20da:	7d26      	ldrb	r6, [r4, #20]
    20dc:	0136      	lsls	r6, r6, #4
    20de:	2130      	movs	r1, #48	; 0x30
    20e0:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    20e2:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    20e4:	490f      	ldr	r1, [pc, #60]	; (2124 <system_clock_source_dpll_set_config+0xbc>)
    20e6:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    20e8:	7d63      	ldrb	r3, [r4, #21]
    20ea:	401d      	ands	r5, r3
    20ec:	2328      	movs	r3, #40	; 0x28
    20ee:	54cd      	strb	r5, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    20f0:	000e      	movs	r6, r1
    20f2:	252c      	movs	r5, #44	; 0x2c
    20f4:	2108      	movs	r1, #8
    20f6:	5d73      	ldrb	r3, [r6, r5]
    20f8:	420b      	tst	r3, r1
    20fa:	d1fc      	bne.n	20f6 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    20fc:	230f      	movs	r3, #15
    20fe:	4398      	bics	r0, r3
    2100:	1882      	adds	r2, r0, r2
			(config->reference_frequency *
    2102:	68e3      	ldr	r3, [r4, #12]
    2104:	435a      	muls	r2, r3
			) >> (4 + config->prescaler);
    2106:	7d63      	ldrb	r3, [r4, #21]
    2108:	3304      	adds	r3, #4
    210a:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    210c:	4b07      	ldr	r3, [pc, #28]	; (212c <system_clock_source_dpll_set_config+0xc4>)
    210e:	601a      	str	r2, [r3, #0]
}
    2110:	bd70      	pop	{r4, r5, r6, pc}
		refclk = refclk / config->reference_divider;
    2112:	8a01      	ldrh	r1, [r0, #16]
    2114:	0018      	movs	r0, r3
    2116:	4b02      	ldr	r3, [pc, #8]	; (2120 <system_clock_source_dpll_set_config+0xb8>)
    2118:	4798      	blx	r3
    211a:	0003      	movs	r3, r0
    211c:	e7aa      	b.n	2074 <system_clock_source_dpll_set_config+0xc>
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	000036f9 	.word	0x000036f9
    2124:	40001000 	.word	0x40001000
    2128:	07ff0000 	.word	0x07ff0000
    212c:	20000358 	.word	0x20000358

00002130 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2130:	2807      	cmp	r0, #7
    2132:	d803      	bhi.n	213c <system_clock_source_enable+0xc>
    2134:	0080      	lsls	r0, r0, #2
    2136:	4b18      	ldr	r3, [pc, #96]	; (2198 <system_clock_source_enable+0x68>)
    2138:	581b      	ldr	r3, [r3, r0]
    213a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    213c:	2017      	movs	r0, #23
    213e:	e029      	b.n	2194 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    2140:	4a16      	ldr	r2, [pc, #88]	; (219c <system_clock_source_enable+0x6c>)
    2142:	7d13      	ldrb	r3, [r2, #20]
    2144:	2102      	movs	r1, #2
    2146:	430b      	orrs	r3, r1
    2148:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    214a:	2000      	movs	r0, #0
    214c:	e022      	b.n	2194 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    214e:	4a14      	ldr	r2, [pc, #80]	; (21a0 <system_clock_source_enable+0x70>)
    2150:	6993      	ldr	r3, [r2, #24]
    2152:	2102      	movs	r1, #2
    2154:	430b      	orrs	r3, r1
    2156:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2158:	2000      	movs	r0, #0
		break;
    215a:	e01b      	b.n	2194 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    215c:	4a0f      	ldr	r2, [pc, #60]	; (219c <system_clock_source_enable+0x6c>)
    215e:	8a13      	ldrh	r3, [r2, #16]
    2160:	2102      	movs	r1, #2
    2162:	430b      	orrs	r3, r1
    2164:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2166:	2000      	movs	r0, #0
		break;
    2168:	e014      	b.n	2194 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    216a:	4a0d      	ldr	r2, [pc, #52]	; (21a0 <system_clock_source_enable+0x70>)
    216c:	8a93      	ldrh	r3, [r2, #20]
    216e:	2102      	movs	r1, #2
    2170:	430b      	orrs	r3, r1
    2172:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2174:	2000      	movs	r0, #0
		break;
    2176:	e00d      	b.n	2194 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2178:	4a08      	ldr	r2, [pc, #32]	; (219c <system_clock_source_enable+0x6c>)
    217a:	7f13      	ldrb	r3, [r2, #28]
    217c:	2102      	movs	r1, #2
    217e:	430b      	orrs	r3, r1
    2180:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2182:	0010      	movs	r0, r2
    2184:	312a      	adds	r1, #42	; 0x2a
    2186:	2202      	movs	r2, #2
    2188:	5c43      	ldrb	r3, [r0, r1]
    218a:	4213      	tst	r3, r2
    218c:	d1fc      	bne.n	2188 <system_clock_source_enable+0x58>
	return STATUS_OK;
    218e:	2000      	movs	r0, #0
    2190:	e000      	b.n	2194 <system_clock_source_enable+0x64>
		return STATUS_OK;
    2192:	2000      	movs	r0, #0
}
    2194:	4770      	bx	lr
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	00004f2c 	.word	0x00004f2c
    219c:	40001000 	.word	0x40001000
    21a0:	40001400 	.word	0x40001400

000021a4 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    21a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a6:	46c6      	mov	lr, r8
    21a8:	b500      	push	{lr}
    21aa:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    21ac:	2203      	movs	r2, #3
    21ae:	4b3f      	ldr	r3, [pc, #252]	; (22ac <system_clock_init+0x108>)
    21b0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21b2:	4a3f      	ldr	r2, [pc, #252]	; (22b0 <system_clock_init+0x10c>)
    21b4:	6853      	ldr	r3, [r2, #4]
    21b6:	211e      	movs	r1, #30
    21b8:	438b      	bics	r3, r1
    21ba:	3918      	subs	r1, #24
    21bc:	430b      	orrs	r3, r1
    21be:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    21c0:	a80a      	add	r0, sp, #40	; 0x28
    21c2:	2300      	movs	r3, #0
    21c4:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    21c6:	2280      	movs	r2, #128	; 0x80
    21c8:	0212      	lsls	r2, r2, #8
    21ca:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    21cc:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    21ce:	2201      	movs	r2, #1
    21d0:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    21d2:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    21d4:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    21d6:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    21d8:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    21da:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    21dc:	3902      	subs	r1, #2
    21de:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    21e0:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    21e2:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    21e4:	4b33      	ldr	r3, [pc, #204]	; (22b4 <system_clock_init+0x110>)
    21e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    21e8:	2005      	movs	r0, #5
    21ea:	4b33      	ldr	r3, [pc, #204]	; (22b8 <system_clock_init+0x114>)
    21ec:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    21ee:	4933      	ldr	r1, [pc, #204]	; (22bc <system_clock_init+0x118>)
    21f0:	2201      	movs	r2, #1
    21f2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    21f4:	421a      	tst	r2, r3
    21f6:	d0fc      	beq.n	21f2 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    21f8:	4b31      	ldr	r3, [pc, #196]	; (22c0 <system_clock_init+0x11c>)
    21fa:	7d1a      	ldrb	r2, [r3, #20]
    21fc:	2180      	movs	r1, #128	; 0x80
    21fe:	430a      	orrs	r2, r1
    2200:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    2202:	2202      	movs	r2, #2
    2204:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    2206:	001a      	movs	r2, r3
    2208:	6993      	ldr	r3, [r2, #24]
    220a:	2b00      	cmp	r3, #0
    220c:	d1fc      	bne.n	2208 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    220e:	4b2d      	ldr	r3, [pc, #180]	; (22c4 <system_clock_init+0x120>)
    2210:	4798      	blx	r3
	config->division_factor    = 1;
    2212:	ad01      	add	r5, sp, #4
    2214:	2601      	movs	r6, #1
    2216:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2218:	2400      	movs	r4, #0
    221a:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    221c:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    221e:	2305      	movs	r3, #5
    2220:	702b      	strb	r3, [r5, #0]
    2222:	722e      	strb	r6, [r5, #8]
    2224:	0029      	movs	r1, r5
    2226:	2001      	movs	r0, #1
    2228:	4b27      	ldr	r3, [pc, #156]	; (22c8 <system_clock_init+0x124>)
    222a:	4698      	mov	r8, r3
    222c:	4798      	blx	r3
    222e:	2001      	movs	r0, #1
    2230:	4f26      	ldr	r7, [pc, #152]	; (22cc <system_clock_init+0x128>)
    2232:	47b8      	blx	r7
	config->division_factor    = 1;
    2234:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    2236:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    2238:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    223a:	726c      	strb	r4, [r5, #9]
    223c:	2307      	movs	r3, #7
    223e:	702b      	strb	r3, [r5, #0]
    2240:	0029      	movs	r1, r5
    2242:	2008      	movs	r0, #8
    2244:	47c0      	blx	r8
    2246:	2008      	movs	r0, #8
    2248:	47b8      	blx	r7
	config->lock_bypass         = false;
    224a:	a804      	add	r0, sp, #16
    224c:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    224e:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    2250:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    2252:	4b1f      	ldr	r3, [pc, #124]	; (22d0 <system_clock_init+0x12c>)
    2254:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    2256:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    2258:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    225a:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    225c:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    225e:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    2260:	2301      	movs	r3, #1
    2262:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    2264:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    2266:	4b1b      	ldr	r3, [pc, #108]	; (22d4 <system_clock_init+0x130>)
    2268:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    226a:	4b1b      	ldr	r3, [pc, #108]	; (22d8 <system_clock_init+0x134>)
    226c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    226e:	2007      	movs	r0, #7
    2270:	4b11      	ldr	r3, [pc, #68]	; (22b8 <system_clock_init+0x114>)
    2272:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    2274:	4812      	ldr	r0, [pc, #72]	; (22c0 <system_clock_init+0x11c>)
    2276:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    2278:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    227a:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    227c:	4013      	ands	r3, r2
    227e:	2b03      	cmp	r3, #3
    2280:	d1fb      	bne.n	227a <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    2282:	3b02      	subs	r3, #2
    2284:	4a15      	ldr	r2, [pc, #84]	; (22dc <system_clock_init+0x138>)
    2286:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    2288:	a901      	add	r1, sp, #4
    228a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    228c:	2200      	movs	r2, #0
    228e:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    2290:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2292:	3207      	adds	r2, #7
    2294:	700a      	strb	r2, [r1, #0]
    2296:	720b      	strb	r3, [r1, #8]
    2298:	2000      	movs	r0, #0
    229a:	4b0b      	ldr	r3, [pc, #44]	; (22c8 <system_clock_init+0x124>)
    229c:	4798      	blx	r3
    229e:	2000      	movs	r0, #0
    22a0:	4b0a      	ldr	r3, [pc, #40]	; (22cc <system_clock_init+0x128>)
    22a2:	4798      	blx	r3
#endif

}
    22a4:	b00e      	add	sp, #56	; 0x38
    22a6:	bc04      	pop	{r2}
    22a8:	4690      	mov	r8, r2
    22aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ac:	40001800 	.word	0x40001800
    22b0:	41004000 	.word	0x41004000
    22b4:	00001fb5 	.word	0x00001fb5
    22b8:	00002131 	.word	0x00002131
    22bc:	40001400 	.word	0x40001400
    22c0:	40001000 	.word	0x40001000
    22c4:	000022e1 	.word	0x000022e1
    22c8:	00002305 	.word	0x00002305
    22cc:	000023b1 	.word	0x000023b1
    22d0:	02dc6c00 	.word	0x02dc6c00
    22d4:	00007fff 	.word	0x00007fff
    22d8:	00002069 	.word	0x00002069
    22dc:	40000800 	.word	0x40000800

000022e0 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    22e0:	4a06      	ldr	r2, [pc, #24]	; (22fc <system_gclk_init+0x1c>)
    22e2:	6953      	ldr	r3, [r2, #20]
    22e4:	2180      	movs	r1, #128	; 0x80
    22e6:	430b      	orrs	r3, r1
    22e8:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    22ea:	2201      	movs	r2, #1
    22ec:	4b04      	ldr	r3, [pc, #16]	; (2300 <system_gclk_init+0x20>)
    22ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    22f0:	0019      	movs	r1, r3
    22f2:	780b      	ldrb	r3, [r1, #0]
    22f4:	4213      	tst	r3, r2
    22f6:	d1fc      	bne.n	22f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    22f8:	4770      	bx	lr
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	40000800 	.word	0x40000800
    2300:	40001c00 	.word	0x40001c00

00002304 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2304:	b570      	push	{r4, r5, r6, lr}
    2306:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2308:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    230a:	784b      	ldrb	r3, [r1, #1]
    230c:	2b00      	cmp	r3, #0
    230e:	d002      	beq.n	2316 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2310:	2380      	movs	r3, #128	; 0x80
    2312:	00db      	lsls	r3, r3, #3
    2314:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2316:	7a4b      	ldrb	r3, [r1, #9]
    2318:	2b00      	cmp	r3, #0
    231a:	d002      	beq.n	2322 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    231c:	2380      	movs	r3, #128	; 0x80
    231e:	011b      	lsls	r3, r3, #4
    2320:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2322:	6848      	ldr	r0, [r1, #4]
    2324:	2801      	cmp	r0, #1
    2326:	d90f      	bls.n	2348 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2328:	1e43      	subs	r3, r0, #1
    232a:	4218      	tst	r0, r3
    232c:	d131      	bne.n	2392 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    232e:	2802      	cmp	r0, #2
    2330:	d92d      	bls.n	238e <system_gclk_gen_set_config+0x8a>
    2332:	2302      	movs	r3, #2
    2334:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2336:	3201      	adds	r2, #1
						mask <<= 1) {
    2338:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    233a:	4298      	cmp	r0, r3
    233c:	d8fb      	bhi.n	2336 <system_gclk_gen_set_config+0x32>
    233e:	2380      	movs	r3, #128	; 0x80
    2340:	015b      	lsls	r3, r3, #5
    2342:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2344:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2346:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2348:	7a0b      	ldrb	r3, [r1, #8]
    234a:	2b00      	cmp	r3, #0
    234c:	d002      	beq.n	2354 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    234e:	2380      	movs	r3, #128	; 0x80
    2350:	019b      	lsls	r3, r3, #6
    2352:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2354:	2604      	movs	r6, #4
    2356:	40a6      	lsls	r6, r4
    2358:	4911      	ldr	r1, [pc, #68]	; (23a0 <system_gclk_gen_set_config+0x9c>)
    235a:	4a12      	ldr	r2, [pc, #72]	; (23a4 <system_gclk_gen_set_config+0xa0>)
    235c:	684b      	ldr	r3, [r1, #4]
    235e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    2360:	421e      	tst	r6, r3
    2362:	d1fb      	bne.n	235c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    2364:	4b10      	ldr	r3, [pc, #64]	; (23a8 <system_gclk_gen_set_config+0xa4>)
    2366:	4798      	blx	r3
    2368:	00a4      	lsls	r4, r4, #2
    236a:	4b0d      	ldr	r3, [pc, #52]	; (23a0 <system_gclk_gen_set_config+0x9c>)
    236c:	469c      	mov	ip, r3
    236e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    2370:	6a22      	ldr	r2, [r4, #32]
    2372:	2380      	movs	r3, #128	; 0x80
    2374:	005b      	lsls	r3, r3, #1
    2376:	401a      	ands	r2, r3
    2378:	432a      	orrs	r2, r5
    237a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    237c:	4661      	mov	r1, ip
    237e:	4a09      	ldr	r2, [pc, #36]	; (23a4 <system_gclk_gen_set_config+0xa0>)
    2380:	684b      	ldr	r3, [r1, #4]
    2382:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    2384:	421e      	tst	r6, r3
    2386:	d1fb      	bne.n	2380 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    2388:	4b08      	ldr	r3, [pc, #32]	; (23ac <system_gclk_gen_set_config+0xa8>)
    238a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    238c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    238e:	2200      	movs	r2, #0
    2390:	e7d5      	b.n	233e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    2392:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2394:	2380      	movs	r3, #128	; 0x80
    2396:	009b      	lsls	r3, r3, #2
    2398:	4318      	orrs	r0, r3
    239a:	4305      	orrs	r5, r0
    239c:	e7d4      	b.n	2348 <system_gclk_gen_set_config+0x44>
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	40001c00 	.word	0x40001c00
    23a4:	000007fc 	.word	0x000007fc
    23a8:	00000f05 	.word	0x00000f05
    23ac:	00000f45 	.word	0x00000f45

000023b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    23b0:	b510      	push	{r4, lr}
    23b2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23b4:	2204      	movs	r2, #4
    23b6:	4082      	lsls	r2, r0
    23b8:	4809      	ldr	r0, [pc, #36]	; (23e0 <system_gclk_gen_enable+0x30>)
    23ba:	490a      	ldr	r1, [pc, #40]	; (23e4 <system_gclk_gen_enable+0x34>)
    23bc:	6843      	ldr	r3, [r0, #4]
    23be:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    23c0:	421a      	tst	r2, r3
    23c2:	d1fb      	bne.n	23bc <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    23c4:	4b08      	ldr	r3, [pc, #32]	; (23e8 <system_gclk_gen_enable+0x38>)
    23c6:	4798      	blx	r3
    23c8:	00a4      	lsls	r4, r4, #2
    23ca:	4b05      	ldr	r3, [pc, #20]	; (23e0 <system_gclk_gen_enable+0x30>)
    23cc:	469c      	mov	ip, r3
    23ce:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    23d0:	6a22      	ldr	r2, [r4, #32]
    23d2:	2380      	movs	r3, #128	; 0x80
    23d4:	005b      	lsls	r3, r3, #1
    23d6:	4313      	orrs	r3, r2
    23d8:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    23da:	4b04      	ldr	r3, [pc, #16]	; (23ec <system_gclk_gen_enable+0x3c>)
    23dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23de:	bd10      	pop	{r4, pc}
    23e0:	40001c00 	.word	0x40001c00
    23e4:	000007fc 	.word	0x000007fc
    23e8:	00000f05 	.word	0x00000f05
    23ec:	00000f45 	.word	0x00000f45

000023f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    23f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23f2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    23f4:	2204      	movs	r2, #4
    23f6:	4082      	lsls	r2, r0
    23f8:	4812      	ldr	r0, [pc, #72]	; (2444 <system_gclk_gen_get_hz+0x54>)
    23fa:	4913      	ldr	r1, [pc, #76]	; (2448 <system_gclk_gen_get_hz+0x58>)
    23fc:	6843      	ldr	r3, [r0, #4]
    23fe:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2400:	421a      	tst	r2, r3
    2402:	d1fb      	bne.n	23fc <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2404:	4b11      	ldr	r3, [pc, #68]	; (244c <system_gclk_gen_get_hz+0x5c>)
    2406:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2408:	4f0e      	ldr	r7, [pc, #56]	; (2444 <system_gclk_gen_get_hz+0x54>)
    240a:	3408      	adds	r4, #8
    240c:	00a4      	lsls	r4, r4, #2
    240e:	59e0      	ldr	r0, [r4, r7]
    2410:	0740      	lsls	r0, r0, #29
    2412:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2414:	4b0e      	ldr	r3, [pc, #56]	; (2450 <system_gclk_gen_get_hz+0x60>)
    2416:	4798      	blx	r3
    2418:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    241a:	59e5      	ldr	r5, [r4, r7]
    241c:	04ed      	lsls	r5, r5, #19
    241e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2420:	59e4      	ldr	r4, [r4, r7]
    2422:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2424:	4b0b      	ldr	r3, [pc, #44]	; (2454 <system_gclk_gen_get_hz+0x64>)
    2426:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2428:	2d00      	cmp	r5, #0
    242a:	d107      	bne.n	243c <system_gclk_gen_get_hz+0x4c>
    242c:	2c01      	cmp	r4, #1
    242e:	d907      	bls.n	2440 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2430:	0021      	movs	r1, r4
    2432:	0030      	movs	r0, r6
    2434:	4b08      	ldr	r3, [pc, #32]	; (2458 <system_gclk_gen_get_hz+0x68>)
    2436:	4798      	blx	r3
    2438:	0006      	movs	r6, r0
    243a:	e001      	b.n	2440 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    243c:	3401      	adds	r4, #1
    243e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2440:	0030      	movs	r0, r6
    2442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2444:	40001c00 	.word	0x40001c00
    2448:	000007fc 	.word	0x000007fc
    244c:	00000f05 	.word	0x00000f05
    2450:	00001f59 	.word	0x00001f59
    2454:	00000f45 	.word	0x00000f45
    2458:	000036f9 	.word	0x000036f9

0000245c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    245c:	b510      	push	{r4, lr}
    245e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2460:	4b09      	ldr	r3, [pc, #36]	; (2488 <system_gclk_chan_enable+0x2c>)
    2462:	4798      	blx	r3
    2464:	00a0      	lsls	r0, r4, #2
    2466:	4b09      	ldr	r3, [pc, #36]	; (248c <system_gclk_chan_enable+0x30>)
    2468:	469c      	mov	ip, r3
    246a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    246c:	2280      	movs	r2, #128	; 0x80
    246e:	5883      	ldr	r3, [r0, r2]
    2470:	2140      	movs	r1, #64	; 0x40
    2472:	430b      	orrs	r3, r1
    2474:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    2476:	3140      	adds	r1, #64	; 0x40
    2478:	3a40      	subs	r2, #64	; 0x40
    247a:	5843      	ldr	r3, [r0, r1]
    247c:	421a      	tst	r2, r3
    247e:	d0fc      	beq.n	247a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    2480:	4b03      	ldr	r3, [pc, #12]	; (2490 <system_gclk_chan_enable+0x34>)
    2482:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    2484:	bd10      	pop	{r4, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	00000f05 	.word	0x00000f05
    248c:	40001c00 	.word	0x40001c00
    2490:	00000f45 	.word	0x00000f45

00002494 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2494:	b510      	push	{r4, lr}
    2496:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <system_gclk_chan_disable+0x2c>)
    249a:	4798      	blx	r3
    249c:	00a0      	lsls	r0, r4, #2
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <system_gclk_chan_disable+0x30>)
    24a0:	469c      	mov	ip, r3
    24a2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    24a4:	2280      	movs	r2, #128	; 0x80
    24a6:	5883      	ldr	r3, [r0, r2]
    24a8:	2140      	movs	r1, #64	; 0x40
    24aa:	438b      	bics	r3, r1
    24ac:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    24ae:	3140      	adds	r1, #64	; 0x40
    24b0:	3a40      	subs	r2, #64	; 0x40
    24b2:	5843      	ldr	r3, [r0, r1]
    24b4:	421a      	tst	r2, r3
    24b6:	d1fc      	bne.n	24b2 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    24b8:	4b03      	ldr	r3, [pc, #12]	; (24c8 <system_gclk_chan_disable+0x34>)
    24ba:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    24bc:	bd10      	pop	{r4, pc}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	00000f05 	.word	0x00000f05
    24c4:	40001c00 	.word	0x40001c00
    24c8:	00000f45 	.word	0x00000f45

000024cc <system_gclk_chan_set_config>:
{
    24cc:	b570      	push	{r4, r5, r6, lr}
    24ce:	0004      	movs	r4, r0
    24d0:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    24d2:	4b05      	ldr	r3, [pc, #20]	; (24e8 <system_gclk_chan_set_config+0x1c>)
    24d4:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    24d6:	782a      	ldrb	r2, [r5, #0]
    24d8:	230f      	movs	r3, #15
    24da:	4013      	ands	r3, r2
    24dc:	3420      	adds	r4, #32
    24de:	00a4      	lsls	r4, r4, #2
    24e0:	4a02      	ldr	r2, [pc, #8]	; (24ec <system_gclk_chan_set_config+0x20>)
    24e2:	50a3      	str	r3, [r4, r2]
}
    24e4:	bd70      	pop	{r4, r5, r6, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	00002495 	.word	0x00002495
    24ec:	40001c00 	.word	0x40001c00

000024f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    24f0:	b510      	push	{r4, lr}
    24f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24f4:	4b06      	ldr	r3, [pc, #24]	; (2510 <system_gclk_chan_get_hz+0x20>)
    24f6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    24f8:	3420      	adds	r4, #32
    24fa:	00a4      	lsls	r4, r4, #2
    24fc:	4b05      	ldr	r3, [pc, #20]	; (2514 <system_gclk_chan_get_hz+0x24>)
    24fe:	58e4      	ldr	r4, [r4, r3]
    2500:	0724      	lsls	r4, r4, #28
    2502:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <system_gclk_chan_get_hz+0x28>)
    2506:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2508:	0020      	movs	r0, r4
    250a:	4b04      	ldr	r3, [pc, #16]	; (251c <system_gclk_chan_get_hz+0x2c>)
    250c:	4798      	blx	r3
}
    250e:	bd10      	pop	{r4, pc}
    2510:	00000f05 	.word	0x00000f05
    2514:	40001c00 	.word	0x40001c00
    2518:	00000f45 	.word	0x00000f45
    251c:	000023f1 	.word	0x000023f1

00002520 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2520:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2522:	78d3      	ldrb	r3, [r2, #3]
    2524:	2b00      	cmp	r3, #0
    2526:	d135      	bne.n	2594 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2528:	7813      	ldrb	r3, [r2, #0]
    252a:	2b80      	cmp	r3, #128	; 0x80
    252c:	d029      	beq.n	2582 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    252e:	061b      	lsls	r3, r3, #24
    2530:	2480      	movs	r4, #128	; 0x80
    2532:	0264      	lsls	r4, r4, #9
    2534:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2536:	7854      	ldrb	r4, [r2, #1]
    2538:	2502      	movs	r5, #2
    253a:	43ac      	bics	r4, r5
    253c:	d106      	bne.n	254c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    253e:	7894      	ldrb	r4, [r2, #2]
    2540:	2c00      	cmp	r4, #0
    2542:	d120      	bne.n	2586 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2544:	2480      	movs	r4, #128	; 0x80
    2546:	02a4      	lsls	r4, r4, #10
    2548:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    254a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    254c:	7854      	ldrb	r4, [r2, #1]
    254e:	3c01      	subs	r4, #1
    2550:	2c01      	cmp	r4, #1
    2552:	d91c      	bls.n	258e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2554:	040d      	lsls	r5, r1, #16
    2556:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2558:	24a0      	movs	r4, #160	; 0xa0
    255a:	05e4      	lsls	r4, r4, #23
    255c:	432c      	orrs	r4, r5
    255e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2560:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2562:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2564:	24d0      	movs	r4, #208	; 0xd0
    2566:	0624      	lsls	r4, r4, #24
    2568:	432c      	orrs	r4, r5
    256a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    256c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    256e:	78d4      	ldrb	r4, [r2, #3]
    2570:	2c00      	cmp	r4, #0
    2572:	d122      	bne.n	25ba <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2574:	035b      	lsls	r3, r3, #13
    2576:	d51c      	bpl.n	25b2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2578:	7893      	ldrb	r3, [r2, #2]
    257a:	2b01      	cmp	r3, #1
    257c:	d01e      	beq.n	25bc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    257e:	6141      	str	r1, [r0, #20]
    2580:	e017      	b.n	25b2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2582:	2300      	movs	r3, #0
    2584:	e7d7      	b.n	2536 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2586:	24c0      	movs	r4, #192	; 0xc0
    2588:	02e4      	lsls	r4, r4, #11
    258a:	4323      	orrs	r3, r4
    258c:	e7dd      	b.n	254a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    258e:	4c0d      	ldr	r4, [pc, #52]	; (25c4 <_system_pinmux_config+0xa4>)
    2590:	4023      	ands	r3, r4
    2592:	e7df      	b.n	2554 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2594:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2596:	040c      	lsls	r4, r1, #16
    2598:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    259a:	23a0      	movs	r3, #160	; 0xa0
    259c:	05db      	lsls	r3, r3, #23
    259e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25a0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    25a2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    25a4:	23d0      	movs	r3, #208	; 0xd0
    25a6:	061b      	lsls	r3, r3, #24
    25a8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25aa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    25ac:	78d3      	ldrb	r3, [r2, #3]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d103      	bne.n	25ba <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25b2:	7853      	ldrb	r3, [r2, #1]
    25b4:	3b01      	subs	r3, #1
    25b6:	2b01      	cmp	r3, #1
    25b8:	d902      	bls.n	25c0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    25ba:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    25bc:	6181      	str	r1, [r0, #24]
    25be:	e7f8      	b.n	25b2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    25c0:	6081      	str	r1, [r0, #8]
}
    25c2:	e7fa      	b.n	25ba <_system_pinmux_config+0x9a>
    25c4:	fffbffff 	.word	0xfffbffff

000025c8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    25c8:	b510      	push	{r4, lr}
    25ca:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    25cc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    25ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    25d0:	2900      	cmp	r1, #0
    25d2:	d105      	bne.n	25e0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    25d4:	0943      	lsrs	r3, r0, #5
    25d6:	01db      	lsls	r3, r3, #7
    25d8:	2182      	movs	r1, #130	; 0x82
    25da:	05c9      	lsls	r1, r1, #23
    25dc:	468c      	mov	ip, r1
    25de:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    25e0:	241f      	movs	r4, #31
    25e2:	4020      	ands	r0, r4
    25e4:	2101      	movs	r1, #1
    25e6:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    25e8:	0018      	movs	r0, r3
    25ea:	4b01      	ldr	r3, [pc, #4]	; (25f0 <system_pinmux_pin_set_config+0x28>)
    25ec:	4798      	blx	r3
}
    25ee:	bd10      	pop	{r4, pc}
    25f0:	00002521 	.word	0x00002521

000025f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    25f4:	4770      	bx	lr
	...

000025f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    25f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    25fa:	4b05      	ldr	r3, [pc, #20]	; (2610 <system_init+0x18>)
    25fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    25fe:	4b05      	ldr	r3, [pc, #20]	; (2614 <system_init+0x1c>)
    2600:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2602:	4b05      	ldr	r3, [pc, #20]	; (2618 <system_init+0x20>)
    2604:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2606:	4b05      	ldr	r3, [pc, #20]	; (261c <system_init+0x24>)
    2608:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    260a:	4b05      	ldr	r3, [pc, #20]	; (2620 <system_init+0x28>)
    260c:	4798      	blx	r3
}
    260e:	bd10      	pop	{r4, pc}
    2610:	000021a5 	.word	0x000021a5
    2614:	00000f75 	.word	0x00000f75
    2618:	00000de5 	.word	0x00000de5
    261c:	000025f5 	.word	0x000025f5
    2620:	000025f5 	.word	0x000025f5

00002624 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2624:	e7fe      	b.n	2624 <Dummy_Handler>
	...

00002628 <Reset_Handler>:
{
    2628:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    262a:	4a17      	ldr	r2, [pc, #92]	; (2688 <Reset_Handler+0x60>)
    262c:	4b17      	ldr	r3, [pc, #92]	; (268c <Reset_Handler+0x64>)
    262e:	429a      	cmp	r2, r3
    2630:	d011      	beq.n	2656 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2632:	001a      	movs	r2, r3
    2634:	4b16      	ldr	r3, [pc, #88]	; (2690 <Reset_Handler+0x68>)
    2636:	429a      	cmp	r2, r3
    2638:	d20d      	bcs.n	2656 <Reset_Handler+0x2e>
    263a:	4a16      	ldr	r2, [pc, #88]	; (2694 <Reset_Handler+0x6c>)
    263c:	3303      	adds	r3, #3
    263e:	1a9b      	subs	r3, r3, r2
    2640:	089b      	lsrs	r3, r3, #2
    2642:	3301      	adds	r3, #1
    2644:	009b      	lsls	r3, r3, #2
    2646:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2648:	4810      	ldr	r0, [pc, #64]	; (268c <Reset_Handler+0x64>)
    264a:	490f      	ldr	r1, [pc, #60]	; (2688 <Reset_Handler+0x60>)
    264c:	588c      	ldr	r4, [r1, r2]
    264e:	5084      	str	r4, [r0, r2]
    2650:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2652:	429a      	cmp	r2, r3
    2654:	d1fa      	bne.n	264c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2656:	4a10      	ldr	r2, [pc, #64]	; (2698 <Reset_Handler+0x70>)
    2658:	4b10      	ldr	r3, [pc, #64]	; (269c <Reset_Handler+0x74>)
    265a:	429a      	cmp	r2, r3
    265c:	d20a      	bcs.n	2674 <Reset_Handler+0x4c>
    265e:	43d3      	mvns	r3, r2
    2660:	490e      	ldr	r1, [pc, #56]	; (269c <Reset_Handler+0x74>)
    2662:	185b      	adds	r3, r3, r1
    2664:	2103      	movs	r1, #3
    2666:	438b      	bics	r3, r1
    2668:	3304      	adds	r3, #4
    266a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    266c:	2100      	movs	r1, #0
    266e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2670:	4293      	cmp	r3, r2
    2672:	d1fc      	bne.n	266e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2674:	4a0a      	ldr	r2, [pc, #40]	; (26a0 <Reset_Handler+0x78>)
    2676:	21ff      	movs	r1, #255	; 0xff
    2678:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <Reset_Handler+0x7c>)
    267a:	438b      	bics	r3, r1
    267c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <Reset_Handler+0x80>)
    2680:	4798      	blx	r3
        main();
    2682:	4b0a      	ldr	r3, [pc, #40]	; (26ac <Reset_Handler+0x84>)
    2684:	4798      	blx	r3
    2686:	e7fe      	b.n	2686 <Reset_Handler+0x5e>
    2688:	00005398 	.word	0x00005398
    268c:	20000000 	.word	0x20000000
    2690:	20000094 	.word	0x20000094
    2694:	20000004 	.word	0x20000004
    2698:	20000098 	.word	0x20000098
    269c:	20000520 	.word	0x20000520
    26a0:	e000ed00 	.word	0xe000ed00
    26a4:	00000000 	.word	0x00000000
    26a8:	00003c4d 	.word	0x00003c4d
    26ac:	00003409 	.word	0x00003409

000026b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    26b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26b2:	46c6      	mov	lr, r8
    26b4:	b500      	push	{lr}
    26b6:	000c      	movs	r4, r1
    26b8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    26ba:	2800      	cmp	r0, #0
    26bc:	d10f      	bne.n	26de <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    26be:	2a00      	cmp	r2, #0
    26c0:	dd11      	ble.n	26e6 <_read+0x36>
    26c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    26c4:	4e09      	ldr	r6, [pc, #36]	; (26ec <_read+0x3c>)
    26c6:	4d0a      	ldr	r5, [pc, #40]	; (26f0 <_read+0x40>)
    26c8:	6830      	ldr	r0, [r6, #0]
    26ca:	0021      	movs	r1, r4
    26cc:	682b      	ldr	r3, [r5, #0]
    26ce:	4798      	blx	r3
		ptr++;
    26d0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    26d2:	42bc      	cmp	r4, r7
    26d4:	d1f8      	bne.n	26c8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    26d6:	4640      	mov	r0, r8
    26d8:	bc04      	pop	{r2}
    26da:	4690      	mov	r8, r2
    26dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    26de:	2301      	movs	r3, #1
    26e0:	425b      	negs	r3, r3
    26e2:	4698      	mov	r8, r3
    26e4:	e7f7      	b.n	26d6 <_read+0x26>
	for (; len > 0; --len) {
    26e6:	4680      	mov	r8, r0
    26e8:	e7f5      	b.n	26d6 <_read+0x26>
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	200004a0 	.word	0x200004a0
    26f0:	20000498 	.word	0x20000498

000026f4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    26f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26f6:	46c6      	mov	lr, r8
    26f8:	b500      	push	{lr}
    26fa:	000e      	movs	r6, r1
    26fc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    26fe:	3801      	subs	r0, #1
    2700:	2802      	cmp	r0, #2
    2702:	d810      	bhi.n	2726 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2704:	2a00      	cmp	r2, #0
    2706:	d011      	beq.n	272c <_write+0x38>
    2708:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    270a:	4b0c      	ldr	r3, [pc, #48]	; (273c <_write+0x48>)
    270c:	4698      	mov	r8, r3
    270e:	4f0c      	ldr	r7, [pc, #48]	; (2740 <_write+0x4c>)
    2710:	4643      	mov	r3, r8
    2712:	6818      	ldr	r0, [r3, #0]
    2714:	5d31      	ldrb	r1, [r6, r4]
    2716:	683b      	ldr	r3, [r7, #0]
    2718:	4798      	blx	r3
    271a:	2800      	cmp	r0, #0
    271c:	db08      	blt.n	2730 <_write+0x3c>
			return -1;
		}
		++nChars;
    271e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2720:	42a5      	cmp	r5, r4
    2722:	d1f5      	bne.n	2710 <_write+0x1c>
    2724:	e006      	b.n	2734 <_write+0x40>
		return -1;
    2726:	2401      	movs	r4, #1
    2728:	4264      	negs	r4, r4
    272a:	e003      	b.n	2734 <_write+0x40>
	for (; len != 0; --len) {
    272c:	0014      	movs	r4, r2
    272e:	e001      	b.n	2734 <_write+0x40>
			return -1;
    2730:	2401      	movs	r4, #1
    2732:	4264      	negs	r4, r4
	}
	return nChars;
}
    2734:	0020      	movs	r0, r4
    2736:	bc04      	pop	{r2}
    2738:	4690      	mov	r8, r2
    273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    273c:	200004a0 	.word	0x200004a0
    2740:	2000049c 	.word	0x2000049c

00002744 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2744:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2746:	4a06      	ldr	r2, [pc, #24]	; (2760 <_sbrk+0x1c>)
    2748:	6812      	ldr	r2, [r2, #0]
    274a:	2a00      	cmp	r2, #0
    274c:	d004      	beq.n	2758 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    274e:	4a04      	ldr	r2, [pc, #16]	; (2760 <_sbrk+0x1c>)
    2750:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2752:	18c3      	adds	r3, r0, r3
    2754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2756:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2758:	4902      	ldr	r1, [pc, #8]	; (2764 <_sbrk+0x20>)
    275a:	4a01      	ldr	r2, [pc, #4]	; (2760 <_sbrk+0x1c>)
    275c:	6011      	str	r1, [r2, #0]
    275e:	e7f6      	b.n	274e <_sbrk+0xa>
    2760:	20000364 	.word	0x20000364
    2764:	20002520 	.word	0x20002520

00002768 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2768:	2001      	movs	r0, #1
    276a:	4240      	negs	r0, r0
    276c:	4770      	bx	lr

0000276e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    276e:	2380      	movs	r3, #128	; 0x80
    2770:	019b      	lsls	r3, r3, #6
    2772:	604b      	str	r3, [r1, #4]

	return 0;
}
    2774:	2000      	movs	r0, #0
    2776:	4770      	bx	lr

00002778 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2778:	2001      	movs	r0, #1
    277a:	4770      	bx	lr

0000277c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    277c:	2000      	movs	r0, #0
    277e:	4770      	bx	lr

00002780 <setParameter>:
}

void setParameter(void)
{
	//to be done..
}
    2780:	4770      	bx	lr
	...

00002784 <can_send_standard_message>:
}


static void can_send_standard_message(uint32_t id_value, uint8_t *data,
uint32_t data_length)
{
    2784:	b510      	push	{r4, lr}
    2786:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    2788:	2300      	movs	r3, #0
    278a:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    278c:	2388      	movs	r3, #136	; 0x88
    278e:	041b      	lsls	r3, r3, #16
    2790:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
    2792:	9b00      	ldr	r3, [sp, #0]
    2794:	0480      	lsls	r0, r0, #18
    2796:	4c12      	ldr	r4, [pc, #72]	; (27e0 <can_send_standard_message+0x5c>)
    2798:	4020      	ands	r0, r4
    279a:	4318      	orrs	r0, r3
    279c:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
    279e:	9b01      	ldr	r3, [sp, #4]
    27a0:	200f      	movs	r0, #15
    27a2:	4010      	ands	r0, r2
    27a4:	0400      	lsls	r0, r0, #16
    27a6:	4c0f      	ldr	r4, [pc, #60]	; (27e4 <can_send_standard_message+0x60>)
    27a8:	4023      	ands	r3, r4
    27aa:	4303      	orrs	r3, r0
    27ac:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
    27ae:	2a00      	cmp	r2, #0
    27b0:	d007      	beq.n	27c2 <can_send_standard_message+0x3e>
    27b2:	2300      	movs	r3, #0
		tx_element.data[i] = *data;
    27b4:	0018      	movs	r0, r3
    27b6:	4468      	add	r0, sp
    27b8:	5ccc      	ldrb	r4, [r1, r3]
    27ba:	7204      	strb	r4, [r0, #8]
	for (i = 0; i < data_length; i++) {
    27bc:	3301      	adds	r3, #1
    27be:	429a      	cmp	r2, r3
    27c0:	d1f8      	bne.n	27b4 <can_send_standard_message+0x30>
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
    27c2:	4c09      	ldr	r4, [pc, #36]	; (27e8 <can_send_standard_message+0x64>)
    27c4:	2200      	movs	r2, #0
    27c6:	4669      	mov	r1, sp
    27c8:	0020      	movs	r0, r4
    27ca:	4b08      	ldr	r3, [pc, #32]	; (27ec <can_send_standard_message+0x68>)
    27cc:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    27ce:	6823      	ldr	r3, [r4, #0]
    27d0:	699a      	ldr	r2, [r3, #24]
    27d2:	0792      	lsls	r2, r2, #30
    27d4:	d402      	bmi.n	27dc <can_send_standard_message+0x58>
	module_inst->hw->TXBAR.reg = trig_mask;
    27d6:	2101      	movs	r1, #1
    27d8:	22d0      	movs	r2, #208	; 0xd0
    27da:	5099      	str	r1, [r3, r2]
	CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
    27dc:	b004      	add	sp, #16
    27de:	bd10      	pop	{r4, pc}
    27e0:	1ffc0000 	.word	0x1ffc0000
    27e4:	fff0ffff 	.word	0xfff0ffff
    27e8:	20000384 	.word	0x20000384
    27ec:	00001419 	.word	0x00001419

000027f0 <send_battery_data>:
{	
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f2:	b089      	sub	sp, #36	; 0x24
	rtc_calendar_get_time(&rtc_instance, &current_time);
    27f4:	a906      	add	r1, sp, #24
    27f6:	4822      	ldr	r0, [pc, #136]	; (2880 <send_battery_data+0x90>)
    27f8:	4b22      	ldr	r3, [pc, #136]	; (2884 <send_battery_data+0x94>)
    27fa:	4798      	blx	r3
	battery_data[0] = (uint8_t)(0x01);
    27fc:	4b22      	ldr	r3, [pc, #136]	; (2888 <send_battery_data+0x98>)
    27fe:	2201      	movs	r2, #1
    2800:	701a      	strb	r2, [r3, #0]
	battery_data[1] = (uint8_t)((avg_charge_current_reading >> 4) & 0xff );
    2802:	4d22      	ldr	r5, [pc, #136]	; (288c <send_battery_data+0x9c>)
    2804:	882a      	ldrh	r2, [r5, #0]
    2806:	0912      	lsrs	r2, r2, #4
    2808:	705a      	strb	r2, [r3, #1]
 	battery_data[2] = (uint8_t)((avg_discharge_current_reading >> 4) & 0xff);
    280a:	4c21      	ldr	r4, [pc, #132]	; (2890 <send_battery_data+0xa0>)
    280c:	8822      	ldrh	r2, [r4, #0]
    280e:	0912      	lsrs	r2, r2, #4
    2810:	709a      	strb	r2, [r3, #2]
	battery_data[3] = (uint8_t)((temprerature_value >> 8) & 0xff);
    2812:	4a20      	ldr	r2, [pc, #128]	; (2894 <send_battery_data+0xa4>)
    2814:	8812      	ldrh	r2, [r2, #0]
    2816:	0a12      	lsrs	r2, r2, #8
    2818:	70da      	strb	r2, [r3, #3]
	battery_data[4] = (uint8_t)(charge_remain_percentage);
    281a:	4f1f      	ldr	r7, [pc, #124]	; (2898 <send_battery_data+0xa8>)
    281c:	783a      	ldrb	r2, [r7, #0]
    281e:	711a      	strb	r2, [r3, #4]
	battery_data[5] = (uint8_t)((battery_status << 1) | (charger_status & 1));
    2820:	4a1e      	ldr	r2, [pc, #120]	; (289c <send_battery_data+0xac>)
    2822:	7811      	ldrb	r1, [r2, #0]
    2824:	4a1e      	ldr	r2, [pc, #120]	; (28a0 <send_battery_data+0xb0>)
    2826:	7810      	ldrb	r0, [r2, #0]
    2828:	2201      	movs	r2, #1
    282a:	4002      	ands	r2, r0
    282c:	0048      	lsls	r0, r1, #1
    282e:	4302      	orrs	r2, r0
    2830:	715a      	strb	r2, [r3, #5]
	printf("###########battery_status : %d\r\n", battery_status);
    2832:	481c      	ldr	r0, [pc, #112]	; (28a4 <send_battery_data+0xb4>)
    2834:	4e1c      	ldr	r6, [pc, #112]	; (28a8 <send_battery_data+0xb8>)
    2836:	47b0      	blx	r6
	printf("charge_remain_percentage : %d\r\n", charge_remain_percentage);
    2838:	2100      	movs	r1, #0
    283a:	5679      	ldrsb	r1, [r7, r1]
    283c:	481b      	ldr	r0, [pc, #108]	; (28ac <send_battery_data+0xbc>)
    283e:	47b0      	blx	r6
	printf("avg_charge_current_reading : %d\r\n", (avg_charge_current_reading >> 4) & 0xff);
    2840:	8829      	ldrh	r1, [r5, #0]
    2842:	0509      	lsls	r1, r1, #20
    2844:	0e09      	lsrs	r1, r1, #24
    2846:	481a      	ldr	r0, [pc, #104]	; (28b0 <send_battery_data+0xc0>)
    2848:	47b0      	blx	r6
	printf("avg_discharge_current_reading : %d\r\n", avg_discharge_current_reading);
    284a:	8821      	ldrh	r1, [r4, #0]
    284c:	4819      	ldr	r0, [pc, #100]	; (28b4 <send_battery_data+0xc4>)
    284e:	47b0      	blx	r6
	avg_charge_current_reading = 0;
    2850:	2300      	movs	r3, #0
    2852:	802b      	strh	r3, [r5, #0]
	avg_discharge_current_reading = 0;
    2854:	8023      	strh	r3, [r4, #0]
	tx_data[0] = commandType_report;
    2856:	ab01      	add	r3, sp, #4
    2858:	2204      	movs	r2, #4
    285a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = commandAction_data;
    285c:	3a02      	subs	r2, #2
    285e:	705a      	strb	r2, [r3, #1]
    2860:	2300      	movs	r3, #0
		tx_data[i+2] = battery_data[i];
    2862:	4809      	ldr	r0, [pc, #36]	; (2888 <send_battery_data+0x98>)
    2864:	aa01      	add	r2, sp, #4
    2866:	18d2      	adds	r2, r2, r3
    2868:	5c19      	ldrb	r1, [r3, r0]
    286a:	7091      	strb	r1, [r2, #2]
    286c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<6; i++)
    286e:	2b06      	cmp	r3, #6
    2870:	d1f8      	bne.n	2864 <send_battery_data+0x74>
	can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1,tx_data,CONF_CAN_ELEMENT_DATA_SIZE);
    2872:	2208      	movs	r2, #8
    2874:	a901      	add	r1, sp, #4
    2876:	4810      	ldr	r0, [pc, #64]	; (28b8 <send_battery_data+0xc8>)
    2878:	4b10      	ldr	r3, [pc, #64]	; (28bc <send_battery_data+0xcc>)
    287a:	4798      	blx	r3
}
    287c:	b009      	add	sp, #36	; 0x24
    287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2880:	200004a4 	.word	0x200004a4
    2884:	00000885 	.word	0x00000885
    2888:	20000370 	.word	0x20000370
    288c:	20000368 	.word	0x20000368
    2890:	2000036c 	.word	0x2000036c
    2894:	200004fa 	.word	0x200004fa
    2898:	200003bd 	.word	0x200003bd
    289c:	20000380 	.word	0x20000380
    28a0:	200003c4 	.word	0x200003c4
    28a4:	0000522c 	.word	0x0000522c
    28a8:	00003cb9 	.word	0x00003cb9
    28ac:	00005250 	.word	0x00005250
    28b0:	00005270 	.word	0x00005270
    28b4:	00005294 	.word	0x00005294
    28b8:	00000469 	.word	0x00000469
    28bc:	00002785 	.word	0x00002785

000028c0 <send_board_time_data>:
{
    28c0:	b510      	push	{r4, lr}
    28c2:	b088      	sub	sp, #32
	rtc_calendar_get_time(&rtc_instance, &current_time);
    28c4:	ac06      	add	r4, sp, #24
    28c6:	0021      	movs	r1, r4
    28c8:	4813      	ldr	r0, [pc, #76]	; (2918 <send_board_time_data+0x58>)
    28ca:	4b14      	ldr	r3, [pc, #80]	; (291c <send_board_time_data+0x5c>)
    28cc:	4798      	blx	r3
	time_data[0] = (uint8_t)((current_time.year >> 8) & 0xff);
    28ce:	88e2      	ldrh	r2, [r4, #6]
    28d0:	4b13      	ldr	r3, [pc, #76]	; (2920 <send_board_time_data+0x60>)
    28d2:	0a11      	lsrs	r1, r2, #8
    28d4:	7019      	strb	r1, [r3, #0]
	time_data[1] = (uint8_t)(current_time.year & 0xff);
    28d6:	705a      	strb	r2, [r3, #1]
	time_data[2] = current_time.month;
    28d8:	7962      	ldrb	r2, [r4, #5]
    28da:	709a      	strb	r2, [r3, #2]
	time_data[3] = current_time.day;
    28dc:	7922      	ldrb	r2, [r4, #4]
    28de:	70da      	strb	r2, [r3, #3]
	time_data[4] = current_time.hour;
    28e0:	78a2      	ldrb	r2, [r4, #2]
    28e2:	711a      	strb	r2, [r3, #4]
	time_data[5] = current_time.minute;
    28e4:	7862      	ldrb	r2, [r4, #1]
    28e6:	715a      	strb	r2, [r3, #5]
	time_data[6] = current_time.second;
    28e8:	7822      	ldrb	r2, [r4, #0]
    28ea:	719a      	strb	r2, [r3, #6]
	tx_data[0] = TX_TYPE_TIME_DATA;
    28ec:	ab01      	add	r3, sp, #4
    28ee:	2211      	movs	r2, #17
    28f0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = TIME_DATA_LENGTH;
    28f2:	3a0a      	subs	r2, #10
    28f4:	705a      	strb	r2, [r3, #1]
    28f6:	2300      	movs	r3, #0
		tx_data[i+2] = time_data[i];
    28f8:	4809      	ldr	r0, [pc, #36]	; (2920 <send_board_time_data+0x60>)
    28fa:	aa01      	add	r2, sp, #4
    28fc:	18d2      	adds	r2, r2, r3
    28fe:	5c19      	ldrb	r1, [r3, r0]
    2900:	7091      	strb	r1, [r2, #2]
    2902:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<sizeof(battery_data); i++)
    2904:	2b10      	cmp	r3, #16
    2906:	d1f8      	bne.n	28fa <send_board_time_data+0x3a>
	can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1,tx_data,CONF_CAN_ELEMENT_DATA_SIZE);
    2908:	2208      	movs	r2, #8
    290a:	a901      	add	r1, sp, #4
    290c:	4805      	ldr	r0, [pc, #20]	; (2924 <send_board_time_data+0x64>)
    290e:	4b06      	ldr	r3, [pc, #24]	; (2928 <send_board_time_data+0x68>)
    2910:	4798      	blx	r3
}
    2912:	b008      	add	sp, #32
    2914:	bd10      	pop	{r4, pc}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	200004a4 	.word	0x200004a4
    291c:	00000885 	.word	0x00000885
    2920:	20000440 	.word	0x20000440
    2924:	00000469 	.word	0x00000469
    2928:	00002785 	.word	0x00002785

0000292c <setTime>:
{
    292c:	b530      	push	{r4, r5, lr}
    292e:	b083      	sub	sp, #12
		struct rtc_calendar_time *const time)
{
	time->second = 0;
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    2930:	2300      	movs	r3, #0
    2932:	466a      	mov	r2, sp
    2934:	70d3      	strb	r3, [r2, #3]
	time.year   = (uint16_t)((commandData[0] << 8) + commandData[1]);
    2936:	480e      	ldr	r0, [pc, #56]	; (2970 <setTime+0x44>)
    2938:	7803      	ldrb	r3, [r0, #0]
    293a:	021b      	lsls	r3, r3, #8
    293c:	7841      	ldrb	r1, [r0, #1]
    293e:	18c9      	adds	r1, r1, r3
    2940:	b289      	uxth	r1, r1
    2942:	466b      	mov	r3, sp
    2944:	80d1      	strh	r1, [r2, #6]
	time.month  = commandData[2];
    2946:	7882      	ldrb	r2, [r0, #2]
    2948:	715a      	strb	r2, [r3, #5]
	time.day    = commandData[3];
    294a:	78c3      	ldrb	r3, [r0, #3]
    294c:	466c      	mov	r4, sp
    294e:	7123      	strb	r3, [r4, #4]
	time.hour   = commandData[4];
    2950:	7904      	ldrb	r4, [r0, #4]
    2952:	466d      	mov	r5, sp
    2954:	70ac      	strb	r4, [r5, #2]
	time.minute = commandData[5];
    2956:	7944      	ldrb	r4, [r0, #5]
    2958:	706c      	strb	r4, [r5, #1]
	time.second = commandData[6];
    295a:	7980      	ldrb	r0, [r0, #6]
    295c:	7028      	strb	r0, [r5, #0]
	printf( "year %d month %d day %d \r\n", time.year, time.month, time.day);
    295e:	4805      	ldr	r0, [pc, #20]	; (2974 <setTime+0x48>)
    2960:	4c05      	ldr	r4, [pc, #20]	; (2978 <setTime+0x4c>)
    2962:	47a0      	blx	r4
	rtc_calendar_set_time(&rtc_instance, &time);
    2964:	4669      	mov	r1, sp
    2966:	4805      	ldr	r0, [pc, #20]	; (297c <setTime+0x50>)
    2968:	4b05      	ldr	r3, [pc, #20]	; (2980 <setTime+0x54>)
    296a:	4798      	blx	r3
}
    296c:	b003      	add	sp, #12
    296e:	bd30      	pop	{r4, r5, pc}
    2970:	200003c8 	.word	0x200003c8
    2974:	000052bc 	.word	0x000052bc
    2978:	00003cb9 	.word	0x00003cb9
    297c:	200004a4 	.word	0x200004a4
    2980:	00000865 	.word	0x00000865

00002984 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2984:	b570      	push	{r4, r5, r6, lr}
    2986:	b082      	sub	sp, #8
    2988:	0005      	movs	r5, r0
    298a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    298c:	2200      	movs	r2, #0
    298e:	466b      	mov	r3, sp
    2990:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2992:	4c06      	ldr	r4, [pc, #24]	; (29ac <usart_serial_getchar+0x28>)
    2994:	466b      	mov	r3, sp
    2996:	1d99      	adds	r1, r3, #6
    2998:	0028      	movs	r0, r5
    299a:	47a0      	blx	r4
    299c:	2800      	cmp	r0, #0
    299e:	d1f9      	bne.n	2994 <usart_serial_getchar+0x10>

	*c = temp;
    29a0:	466b      	mov	r3, sp
    29a2:	3306      	adds	r3, #6
    29a4:	881b      	ldrh	r3, [r3, #0]
    29a6:	7033      	strb	r3, [r6, #0]
}
    29a8:	b002      	add	sp, #8
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	00001d4d 	.word	0x00001d4d

000029b0 <usart_serial_putchar>:
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    29b4:	b28c      	uxth	r4, r1
    29b6:	4e03      	ldr	r6, [pc, #12]	; (29c4 <usart_serial_putchar+0x14>)
    29b8:	0021      	movs	r1, r4
    29ba:	0028      	movs	r0, r5
    29bc:	47b0      	blx	r6
    29be:	2800      	cmp	r0, #0
    29c0:	d1fa      	bne.n	29b8 <usart_serial_putchar+0x8>
}
    29c2:	bd70      	pop	{r4, r5, r6, pc}
    29c4:	00001d21 	.word	0x00001d21

000029c8 <configure_port_pins>:
{
    29c8:	b570      	push	{r4, r5, r6, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    29ca:	4c07      	ldr	r4, [pc, #28]	; (29e8 <configure_port_pins+0x20>)
    29cc:	2300      	movs	r3, #0
    29ce:	7023      	strb	r3, [r4, #0]
	config->powersave  = false;
    29d0:	70a3      	strb	r3, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    29d2:	7063      	strb	r3, [r4, #1]
	port_pin_set_config(EXT1_PIN_5, &config_port_pin);
    29d4:	0021      	movs	r1, r4
    29d6:	2014      	movs	r0, #20
    29d8:	4d04      	ldr	r5, [pc, #16]	; (29ec <configure_port_pins+0x24>)
    29da:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    29dc:	2301      	movs	r3, #1
    29de:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EXT1_PIN_6, &config_port_pin);
    29e0:	0021      	movs	r1, r4
    29e2:	2015      	movs	r0, #21
    29e4:	47a8      	blx	r5
}
    29e6:	bd70      	pop	{r4, r5, r6, pc}
    29e8:	200004e4 	.word	0x200004e4
    29ec:	0000148d 	.word	0x0000148d

000029f0 <configure_adc>:
{
    29f0:	b530      	push	{r4, r5, lr}
    29f2:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&config_adc);
    29f4:	ac01      	add	r4, sp, #4
    29f6:	0020      	movs	r0, r4
    29f8:	4b19      	ldr	r3, [pc, #100]	; (2a60 <configure_adc+0x70>)
    29fa:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_0;
    29fc:	2300      	movs	r3, #0
    29fe:	7023      	strb	r3, [r4, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    2a00:	3303      	adds	r3, #3
    2a02:	70a3      	strb	r3, [r4, #2]
	config_adc.reference =  ADC_REFERENCE_INTVCC0;
    2a04:	3b02      	subs	r3, #2
    2a06:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8;
    2a08:	3307      	adds	r3, #7
    2a0a:	7123      	strb	r3, [r4, #4]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    2a0c:	23c0      	movs	r3, #192	; 0xc0
    2a0e:	015b      	lsls	r3, r3, #5
    2a10:	80e3      	strh	r3, [r4, #6]
	config_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    2a12:	2304      	movs	r3, #4
    2a14:	7563      	strb	r3, [r4, #21]
	adc_init(&adc_instance, ADC1, &config_adc);
    2a16:	4d13      	ldr	r5, [pc, #76]	; (2a64 <configure_adc+0x74>)
    2a18:	0022      	movs	r2, r4
    2a1a:	4913      	ldr	r1, [pc, #76]	; (2a68 <configure_adc+0x78>)
    2a1c:	0028      	movs	r0, r5
    2a1e:	4b13      	ldr	r3, [pc, #76]	; (2a6c <configure_adc+0x7c>)
    2a20:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2a22:	682c      	ldr	r4, [r5, #0]
    2a24:	8c23      	ldrh	r3, [r4, #32]
    2a26:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d1fb      	bne.n	2a24 <configure_adc+0x34>
			_adc_get_inst_index(adc_module)));
    2a2c:	0020      	movs	r0, r4
    2a2e:	4b10      	ldr	r3, [pc, #64]	; (2a70 <configure_adc+0x80>)
    2a30:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    2a32:	4b10      	ldr	r3, [pc, #64]	; (2a74 <configure_adc+0x84>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2a34:	5c1b      	ldrb	r3, [r3, r0]
    2a36:	221f      	movs	r2, #31
    2a38:	401a      	ands	r2, r3
    2a3a:	2301      	movs	r3, #1
    2a3c:	4093      	lsls	r3, r2
    2a3e:	4a0e      	ldr	r2, [pc, #56]	; (2a78 <configure_adc+0x88>)
    2a40:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2a42:	2307      	movs	r3, #7
    2a44:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2a46:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2a48:	7823      	ldrb	r3, [r4, #0]
    2a4a:	2202      	movs	r2, #2
    2a4c:	4313      	orrs	r3, r2
    2a4e:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
    2a50:	4b04      	ldr	r3, [pc, #16]	; (2a64 <configure_adc+0x74>)
    2a52:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    2a54:	8c13      	ldrh	r3, [r2, #32]
    2a56:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d1fb      	bne.n	2a54 <configure_adc+0x64>
}
    2a5c:	b00d      	add	sp, #52	; 0x34
    2a5e:	bd30      	pop	{r4, r5, pc}
    2a60:	00000141 	.word	0x00000141
    2a64:	200004fc 	.word	0x200004fc
    2a68:	42004800 	.word	0x42004800
    2a6c:	00000185 	.word	0x00000185
    2a70:	0000011d 	.word	0x0000011d
    2a74:	000050fc 	.word	0x000050fc
    2a78:	e000e100 	.word	0xe000e100

00002a7c <adc_sampling>:
{
    2a7c:	b570      	push	{r4, r5, r6, lr}
	if (0 == charger_status)//charger not connected
    2a7e:	4b63      	ldr	r3, [pc, #396]	; (2c0c <adc_sampling+0x190>)
    2a80:	781b      	ldrb	r3, [r3, #0]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d022      	beq.n	2acc <adc_sampling+0x50>
		discharge_signal_adc_result = 0;
    2a86:	2200      	movs	r2, #0
    2a88:	4b61      	ldr	r3, [pc, #388]	; (2c10 <adc_sampling+0x194>)
    2a8a:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2a8c:	4b61      	ldr	r3, [pc, #388]	; (2c14 <adc_sampling+0x198>)
    2a8e:	6818      	ldr	r0, [r3, #0]
    2a90:	8c03      	ldrh	r3, [r0, #32]
    2a92:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2a94:	2b00      	cmp	r3, #0
    2a96:	d1fb      	bne.n	2a90 <adc_sampling+0x14>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2a98:	8903      	ldrh	r3, [r0, #8]
    2a9a:	221f      	movs	r2, #31
    2a9c:	4393      	bics	r3, r2
    2a9e:	3a1a      	subs	r2, #26
    2aa0:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2aa2:	8103      	strh	r3, [r0, #8]
    2aa4:	8c03      	ldrh	r3, [r0, #32]
    2aa6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d1fb      	bne.n	2aa4 <adc_sampling+0x28>
    2aac:	8c03      	ldrh	r3, [r0, #32]
    2aae:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d1fb      	bne.n	2aac <adc_sampling+0x30>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2ab4:	7e03      	ldrb	r3, [r0, #24]
    2ab6:	2202      	movs	r2, #2
    2ab8:	4313      	orrs	r3, r2
    2aba:	7603      	strb	r3, [r0, #24]
    2abc:	8c03      	ldrh	r3, [r0, #32]
    2abe:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ac0:	2b00      	cmp	r3, #0
    2ac2:	d1fb      	bne.n	2abc <adc_sampling+0x40>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2ac4:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2ac6:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2ac8:	2402      	movs	r4, #2
    2aca:	e067      	b.n	2b9c <adc_sampling+0x120>
	{	charge_signal_adc_result = 0;
    2acc:	2200      	movs	r2, #0
    2ace:	4b52      	ldr	r3, [pc, #328]	; (2c18 <adc_sampling+0x19c>)
    2ad0:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    2ad2:	4b50      	ldr	r3, [pc, #320]	; (2c14 <adc_sampling+0x198>)
    2ad4:	6818      	ldr	r0, [r3, #0]
    2ad6:	8c03      	ldrh	r3, [r0, #32]
    2ad8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2ada:	2b00      	cmp	r3, #0
    2adc:	d1fb      	bne.n	2ad6 <adc_sampling+0x5a>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2ade:	8903      	ldrh	r3, [r0, #8]
    2ae0:	221f      	movs	r2, #31
    2ae2:	4393      	bics	r3, r2
    2ae4:	3a1b      	subs	r2, #27
    2ae6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2ae8:	8103      	strh	r3, [r0, #8]
    2aea:	8c03      	ldrh	r3, [r0, #32]
    2aec:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2aee:	2b00      	cmp	r3, #0
    2af0:	d1fb      	bne.n	2aea <adc_sampling+0x6e>
    2af2:	8c03      	ldrh	r3, [r0, #32]
    2af4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2af6:	2b00      	cmp	r3, #0
    2af8:	d1fb      	bne.n	2af2 <adc_sampling+0x76>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2afa:	7e03      	ldrb	r3, [r0, #24]
    2afc:	2202      	movs	r2, #2
    2afe:	4313      	orrs	r3, r2
    2b00:	7603      	strb	r3, [r0, #24]
    2b02:	8c03      	ldrh	r3, [r0, #32]
    2b04:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b06:	2b00      	cmp	r3, #0
    2b08:	d1fb      	bne.n	2b02 <adc_sampling+0x86>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2b0a:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b0c:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2b0e:	2402      	movs	r4, #2
    2b10:	e001      	b.n	2b16 <adc_sampling+0x9a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2b12:	4211      	tst	r1, r2
    2b14:	d10a      	bne.n	2b2c <adc_sampling+0xb0>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2b16:	7983      	ldrb	r3, [r0, #6]
    2b18:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2b1a:	000a      	movs	r2, r1
    2b1c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b1e:	421d      	tst	r5, r3
    2b20:	d000      	beq.n	2b24 <adc_sampling+0xa8>
		status_flags |= ADC_STATUS_WINDOW;
    2b22:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2b24:	421c      	tst	r4, r3
    2b26:	d0f4      	beq.n	2b12 <adc_sampling+0x96>
		status_flags |= ADC_STATUS_OVERRUN;
    2b28:	432a      	orrs	r2, r5
    2b2a:	e7f2      	b.n	2b12 <adc_sampling+0x96>
	*result = adc_module->RESULT.reg;
    2b2c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2b2e:	b289      	uxth	r1, r1
    2b30:	4b37      	ldr	r3, [pc, #220]	; (2c10 <adc_sampling+0x194>)
    2b32:	8019      	strh	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    2b34:	2301      	movs	r3, #1
    2b36:	7183      	strb	r3, [r0, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2b38:	7982      	ldrb	r2, [r0, #6]
    2b3a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2b3c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2b3e:	0754      	lsls	r4, r2, #29
    2b40:	d501      	bpl.n	2b46 <adc_sampling+0xca>
		status_flags |= ADC_STATUS_WINDOW;
    2b42:	2402      	movs	r4, #2
    2b44:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2b46:	0792      	lsls	r2, r2, #30
    2b48:	d501      	bpl.n	2b4e <adc_sampling+0xd2>
		status_flags |= ADC_STATUS_OVERRUN;
    2b4a:	2204      	movs	r2, #4
    2b4c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2b4e:	075b      	lsls	r3, r3, #29
    2b50:	d501      	bpl.n	2b56 <adc_sampling+0xda>
	adc_module->INTFLAG.reg = int_flags;
    2b52:	2302      	movs	r3, #2
    2b54:	7183      	strb	r3, [r0, #6]
		printf("\n\r Discharge_signal_adc_result is: %d \r\n",discharge_signal_adc_result);
    2b56:	4831      	ldr	r0, [pc, #196]	; (2c1c <adc_sampling+0x1a0>)
    2b58:	4e31      	ldr	r6, [pc, #196]	; (2c20 <adc_sampling+0x1a4>)
    2b5a:	47b0      	blx	r6
		printf("\n\r Voltage is: %d mv \r\n",discharge_signal_adc_result*3000/4096);
    2b5c:	4d2c      	ldr	r5, [pc, #176]	; (2c10 <adc_sampling+0x194>)
    2b5e:	8829      	ldrh	r1, [r5, #0]
    2b60:	4c30      	ldr	r4, [pc, #192]	; (2c24 <adc_sampling+0x1a8>)
    2b62:	4361      	muls	r1, r4
    2b64:	1309      	asrs	r1, r1, #12
    2b66:	4830      	ldr	r0, [pc, #192]	; (2c28 <adc_sampling+0x1ac>)
    2b68:	47b0      	blx	r6
		printf("\n\r Current is: %d ma \r\n",discharge_signal_adc_result*3000/(4096*13));
    2b6a:	8828      	ldrh	r0, [r5, #0]
    2b6c:	4360      	muls	r0, r4
    2b6e:	21d0      	movs	r1, #208	; 0xd0
    2b70:	0209      	lsls	r1, r1, #8
    2b72:	4b2e      	ldr	r3, [pc, #184]	; (2c2c <adc_sampling+0x1b0>)
    2b74:	4798      	blx	r3
    2b76:	0001      	movs	r1, r0
    2b78:	482d      	ldr	r0, [pc, #180]	; (2c30 <adc_sampling+0x1b4>)
    2b7a:	47b0      	blx	r6
 		total_discharge_current += discharge_signal_adc_result;
    2b7c:	492d      	ldr	r1, [pc, #180]	; (2c34 <adc_sampling+0x1b8>)
    2b7e:	882a      	ldrh	r2, [r5, #0]
    2b80:	2300      	movs	r3, #0
    2b82:	680c      	ldr	r4, [r1, #0]
    2b84:	684d      	ldr	r5, [r1, #4]
    2b86:	1912      	adds	r2, r2, r4
    2b88:	416b      	adcs	r3, r5
    2b8a:	600a      	str	r2, [r1, #0]
    2b8c:	604b      	str	r3, [r1, #4]
		discharge_sample_num ++;
    2b8e:	4a2a      	ldr	r2, [pc, #168]	; (2c38 <adc_sampling+0x1bc>)
    2b90:	6813      	ldr	r3, [r2, #0]
    2b92:	3301      	adds	r3, #1
    2b94:	6013      	str	r3, [r2, #0]
    2b96:	e038      	b.n	2c0a <adc_sampling+0x18e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2b98:	4211      	tst	r1, r2
    2b9a:	d10a      	bne.n	2bb2 <adc_sampling+0x136>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2b9c:	7983      	ldrb	r3, [r0, #6]
    2b9e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2ba0:	000a      	movs	r2, r1
    2ba2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2ba4:	421d      	tst	r5, r3
    2ba6:	d000      	beq.n	2baa <adc_sampling+0x12e>
		status_flags |= ADC_STATUS_WINDOW;
    2ba8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2baa:	421c      	tst	r4, r3
    2bac:	d0f4      	beq.n	2b98 <adc_sampling+0x11c>
		status_flags |= ADC_STATUS_OVERRUN;
    2bae:	432a      	orrs	r2, r5
    2bb0:	e7f2      	b.n	2b98 <adc_sampling+0x11c>
	*result = adc_module->RESULT.reg;
    2bb2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2bb4:	b289      	uxth	r1, r1
    2bb6:	4b18      	ldr	r3, [pc, #96]	; (2c18 <adc_sampling+0x19c>)
    2bb8:	8019      	strh	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    2bba:	2301      	movs	r3, #1
    2bbc:	7183      	strb	r3, [r0, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2bbe:	7982      	ldrb	r2, [r0, #6]
    2bc0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2bc2:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2bc4:	0754      	lsls	r4, r2, #29
    2bc6:	d501      	bpl.n	2bcc <adc_sampling+0x150>
		status_flags |= ADC_STATUS_WINDOW;
    2bc8:	2402      	movs	r4, #2
    2bca:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2bcc:	0792      	lsls	r2, r2, #30
    2bce:	d501      	bpl.n	2bd4 <adc_sampling+0x158>
		status_flags |= ADC_STATUS_OVERRUN;
    2bd0:	2204      	movs	r2, #4
    2bd2:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2bd4:	075b      	lsls	r3, r3, #29
    2bd6:	d501      	bpl.n	2bdc <adc_sampling+0x160>
	adc_module->INTFLAG.reg = int_flags;
    2bd8:	2302      	movs	r3, #2
    2bda:	7183      	strb	r3, [r0, #6]
		printf("\n\r Charge_signal_adc_result is: %d \r\n",charge_signal_adc_result);
    2bdc:	4817      	ldr	r0, [pc, #92]	; (2c3c <adc_sampling+0x1c0>)
    2bde:	4d10      	ldr	r5, [pc, #64]	; (2c20 <adc_sampling+0x1a4>)
    2be0:	47a8      	blx	r5
		printf("\n\r Voltage is: %d mv \r\n",charge_signal_adc_result*3000/(4096));
    2be2:	4c0d      	ldr	r4, [pc, #52]	; (2c18 <adc_sampling+0x19c>)
    2be4:	8823      	ldrh	r3, [r4, #0]
    2be6:	490f      	ldr	r1, [pc, #60]	; (2c24 <adc_sampling+0x1a8>)
    2be8:	4359      	muls	r1, r3
    2bea:	1309      	asrs	r1, r1, #12
    2bec:	480e      	ldr	r0, [pc, #56]	; (2c28 <adc_sampling+0x1ac>)
    2bee:	47a8      	blx	r5
		total_charge_current += charge_signal_adc_result;
    2bf0:	4913      	ldr	r1, [pc, #76]	; (2c40 <adc_sampling+0x1c4>)
    2bf2:	8822      	ldrh	r2, [r4, #0]
    2bf4:	2300      	movs	r3, #0
    2bf6:	680c      	ldr	r4, [r1, #0]
    2bf8:	684d      	ldr	r5, [r1, #4]
    2bfa:	1912      	adds	r2, r2, r4
    2bfc:	416b      	adcs	r3, r5
    2bfe:	600a      	str	r2, [r1, #0]
    2c00:	604b      	str	r3, [r1, #4]
		charge_sample_num++;
    2c02:	4a10      	ldr	r2, [pc, #64]	; (2c44 <adc_sampling+0x1c8>)
    2c04:	6813      	ldr	r3, [r2, #0]
    2c06:	3301      	adds	r3, #1
    2c08:	6013      	str	r3, [r2, #0]
}
    2c0a:	bd70      	pop	{r4, r5, r6, pc}
    2c0c:	200003c4 	.word	0x200003c4
    2c10:	200004f8 	.word	0x200004f8
    2c14:	200004fc 	.word	0x200004fc
    2c18:	200004e0 	.word	0x200004e0
    2c1c:	00005100 	.word	0x00005100
    2c20:	00003cb9 	.word	0x00003cb9
    2c24:	00000bb8 	.word	0x00000bb8
    2c28:	0000512c 	.word	0x0000512c
    2c2c:	0000380d 	.word	0x0000380d
    2c30:	00005144 	.word	0x00005144
    2c34:	20000450 	.word	0x20000450
    2c38:	20000400 	.word	0x20000400
    2c3c:	0000515c 	.word	0x0000515c
    2c40:	20000448 	.word	0x20000448
    2c44:	200003c0 	.word	0x200003c0

00002c48 <battery_status_update>:
{
    2c48:	b510      	push	{r4, lr}
	if (charger_status == 1)
    2c4a:	4b1b      	ldr	r3, [pc, #108]	; (2cb8 <battery_status_update+0x70>)
    2c4c:	781b      	ldrb	r3, [r3, #0]
    2c4e:	2b01      	cmp	r3, #1
    2c50:	d00e      	beq.n	2c70 <battery_status_update+0x28>
	else if (discharge_signal_adc_result > 0xff)
    2c52:	4b1a      	ldr	r3, [pc, #104]	; (2cbc <battery_status_update+0x74>)
    2c54:	881b      	ldrh	r3, [r3, #0]
    2c56:	2bff      	cmp	r3, #255	; 0xff
    2c58:	d827      	bhi.n	2caa <battery_status_update+0x62>
		battery_status = 0;
    2c5a:	2300      	movs	r3, #0
    2c5c:	4a18      	ldr	r2, [pc, #96]	; (2cc0 <battery_status_update+0x78>)
    2c5e:	7013      	strb	r3, [r2, #0]
		discharge_signal_adc_result = 0;
    2c60:	4a16      	ldr	r2, [pc, #88]	; (2cbc <battery_status_update+0x74>)
    2c62:	8013      	strh	r3, [r2, #0]
		charge_from_empty_flag = 1;	
    2c64:	2201      	movs	r2, #1
    2c66:	4b17      	ldr	r3, [pc, #92]	; (2cc4 <battery_status_update+0x7c>)
    2c68:	701a      	strb	r2, [r3, #0]
	return battery_status;
    2c6a:	4b15      	ldr	r3, [pc, #84]	; (2cc0 <battery_status_update+0x78>)
    2c6c:	7818      	ldrb	r0, [r3, #0]
}
    2c6e:	bd10      	pop	{r4, pc}
		printf("\n\rcharge_signal_adc_result %d \r\n",  charge_signal_adc_result);
    2c70:	4c15      	ldr	r4, [pc, #84]	; (2cc8 <battery_status_update+0x80>)
    2c72:	8821      	ldrh	r1, [r4, #0]
    2c74:	4815      	ldr	r0, [pc, #84]	; (2ccc <battery_status_update+0x84>)
    2c76:	4b16      	ldr	r3, [pc, #88]	; (2cd0 <battery_status_update+0x88>)
    2c78:	4798      	blx	r3
		if (charge_signal_adc_result > 0x00ff)
    2c7a:	8823      	ldrh	r3, [r4, #0]
    2c7c:	2bff      	cmp	r3, #255	; 0xff
    2c7e:	d80a      	bhi.n	2c96 <battery_status_update+0x4e>
		else if (charge_signal_adc_result < 0x20)
    2c80:	2b1f      	cmp	r3, #31
    2c82:	d8f2      	bhi.n	2c6a <battery_status_update+0x22>
			battery_status = 0;//no current in/out for battery, battery is full
    2c84:	2300      	movs	r3, #0
    2c86:	4a0e      	ldr	r2, [pc, #56]	; (2cc0 <battery_status_update+0x78>)
    2c88:	7013      	strb	r3, [r2, #0]
			charge_signal_adc_result = 0;
    2c8a:	4a0f      	ldr	r2, [pc, #60]	; (2cc8 <battery_status_update+0x80>)
    2c8c:	8013      	strh	r3, [r2, #0]
			discharge_from_full_flag = 1;
    2c8e:	2201      	movs	r2, #1
    2c90:	4b10      	ldr	r3, [pc, #64]	; (2cd4 <battery_status_update+0x8c>)
    2c92:	701a      	strb	r2, [r3, #0]
    2c94:	e7e9      	b.n	2c6a <battery_status_update+0x22>
			battery_status = 1; //charging, battery is not full
    2c96:	2201      	movs	r2, #1
    2c98:	4b09      	ldr	r3, [pc, #36]	; (2cc0 <battery_status_update+0x78>)
    2c9a:	701a      	strb	r2, [r3, #0]
			printf("\n\r here*********** \n\r");
    2c9c:	480e      	ldr	r0, [pc, #56]	; (2cd8 <battery_status_update+0x90>)
    2c9e:	4b0c      	ldr	r3, [pc, #48]	; (2cd0 <battery_status_update+0x88>)
    2ca0:	4798      	blx	r3
			discharge_from_full_flag = 0;
    2ca2:	2200      	movs	r2, #0
    2ca4:	4b0b      	ldr	r3, [pc, #44]	; (2cd4 <battery_status_update+0x8c>)
    2ca6:	701a      	strb	r2, [r3, #0]
    2ca8:	e7df      	b.n	2c6a <battery_status_update+0x22>
		battery_status = 2;    //discharging
    2caa:	2202      	movs	r2, #2
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <battery_status_update+0x78>)
    2cae:	701a      	strb	r2, [r3, #0]
		charge_from_empty_flag = 0;
    2cb0:	2200      	movs	r2, #0
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <battery_status_update+0x7c>)
    2cb4:	701a      	strb	r2, [r3, #0]
    2cb6:	e7d8      	b.n	2c6a <battery_status_update+0x22>
    2cb8:	200003c4 	.word	0x200003c4
    2cbc:	200004f8 	.word	0x200004f8
    2cc0:	20000380 	.word	0x20000380
    2cc4:	200003bc 	.word	0x200003bc
    2cc8:	200004e0 	.word	0x200004e0
    2ccc:	000051a0 	.word	0x000051a0
    2cd0:	00003cb9 	.word	0x00003cb9
    2cd4:	200003fc 	.word	0x200003fc
    2cd8:	000051c4 	.word	0x000051c4

00002cdc <charger_detection>:
{
    2cdc:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    2cde:	2382      	movs	r3, #130	; 0x82
    2ce0:	05db      	lsls	r3, r3, #23
    2ce2:	6a19      	ldr	r1, [r3, #32]
    2ce4:	02c9      	lsls	r1, r1, #11
    2ce6:	0fc9      	lsrs	r1, r1, #31
	charger_status = port_pin_get_input_level(EXT1_PIN_5);
    2ce8:	4c09      	ldr	r4, [pc, #36]	; (2d10 <charger_detection+0x34>)
    2cea:	7021      	strb	r1, [r4, #0]
	printf("charger_status %d \r\n", charger_status);
    2cec:	4809      	ldr	r0, [pc, #36]	; (2d14 <charger_detection+0x38>)
    2cee:	4b0a      	ldr	r3, [pc, #40]	; (2d18 <charger_detection+0x3c>)
    2cf0:	4798      	blx	r3
	if (level) {
    2cf2:	7823      	ldrb	r3, [r4, #0]
    2cf4:	2b00      	cmp	r3, #0
    2cf6:	d105      	bne.n	2d04 <charger_detection+0x28>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	0392      	lsls	r2, r2, #14
    2cfc:	2382      	movs	r3, #130	; 0x82
    2cfe:	05db      	lsls	r3, r3, #23
    2d00:	615a      	str	r2, [r3, #20]
}
    2d02:	bd10      	pop	{r4, pc}
		port_base->OUTSET.reg = pin_mask;
    2d04:	2280      	movs	r2, #128	; 0x80
    2d06:	0392      	lsls	r2, r2, #14
    2d08:	2382      	movs	r3, #130	; 0x82
    2d0a:	05db      	lsls	r3, r3, #23
    2d0c:	619a      	str	r2, [r3, #24]
    2d0e:	e7f8      	b.n	2d02 <charger_detection+0x26>
    2d10:	200003c4 	.word	0x200003c4
    2d14:	000051dc 	.word	0x000051dc
    2d18:	00003cb9 	.word	0x00003cb9

00002d1c <ADC_event>:
{
    2d1c:	b510      	push	{r4, lr}
    2d1e:	0004      	movs	r4, r0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
    2d20:	2101      	movs	r1, #1
    2d22:	4b0d      	ldr	r3, [pc, #52]	; (2d58 <ADC_event+0x3c>)
    2d24:	4798      	blx	r3
    2d26:	2800      	cmp	r0, #0
    2d28:	d100      	bne.n	2d2c <ADC_event+0x10>
}
    2d2a:	bd10      	pop	{r4, pc}
		charger_detection();
    2d2c:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <ADC_event+0x40>)
    2d2e:	4798      	blx	r3
		adc_sampling();
    2d30:	4b0b      	ldr	r3, [pc, #44]	; (2d60 <ADC_event+0x44>)
    2d32:	4798      	blx	r3
		battery_status_new = battery_status_update();
    2d34:	4b0b      	ldr	r3, [pc, #44]	; (2d64 <ADC_event+0x48>)
    2d36:	4798      	blx	r3
    2d38:	4b0b      	ldr	r3, [pc, #44]	; (2d68 <ADC_event+0x4c>)
    2d3a:	7018      	strb	r0, [r3, #0]
		if (battery_status_new != battery_status_old) //if battery charging status changes, send data to pc to update
    2d3c:	4b0b      	ldr	r3, [pc, #44]	; (2d6c <ADC_event+0x50>)
    2d3e:	781b      	ldrb	r3, [r3, #0]
    2d40:	4283      	cmp	r3, r0
    2d42:	d004      	beq.n	2d4e <ADC_event+0x32>
			dateReportFlag = 1;
    2d44:	2201      	movs	r2, #1
    2d46:	4b0a      	ldr	r3, [pc, #40]	; (2d70 <ADC_event+0x54>)
    2d48:	701a      	strb	r2, [r3, #0]
			battery_status_old = battery_status_new;
    2d4a:	4b08      	ldr	r3, [pc, #32]	; (2d6c <ADC_event+0x50>)
    2d4c:	7018      	strb	r0, [r3, #0]
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
    2d4e:	2101      	movs	r1, #1
    2d50:	0020      	movs	r0, r4
    2d52:	4b08      	ldr	r3, [pc, #32]	; (2d74 <ADC_event+0x58>)
    2d54:	4798      	blx	r3
}
    2d56:	e7e8      	b.n	2d2a <ADC_event+0xe>
    2d58:	00000d31 	.word	0x00000d31
    2d5c:	00002cdd 	.word	0x00002cdd
    2d60:	00002a7d 	.word	0x00002a7d
    2d64:	00002c49 	.word	0x00002c49
    2d68:	20000381 	.word	0x20000381
    2d6c:	20000382 	.word	0x20000382
    2d70:	200003f6 	.word	0x200003f6
    2d74:	00000d6d 	.word	0x00000d6d

00002d78 <processCommandMsg>:
	commandType = commandMsg[0]; //get commandType
    2d78:	4b12      	ldr	r3, [pc, #72]	; (2dc4 <processCommandMsg+0x4c>)
    2d7a:	7819      	ldrb	r1, [r3, #0]
    2d7c:	4a12      	ldr	r2, [pc, #72]	; (2dc8 <processCommandMsg+0x50>)
    2d7e:	7011      	strb	r1, [r2, #0]
	commandIndex = commandMsg[1];//get commandIndex
    2d80:	7859      	ldrb	r1, [r3, #1]
    2d82:	4a12      	ldr	r2, [pc, #72]	; (2dcc <processCommandMsg+0x54>)
    2d84:	7011      	strb	r1, [r2, #0]
	commandDataLength = commandMsg[2];//get commandDataLength
    2d86:	7899      	ldrb	r1, [r3, #2]
    2d88:	4b11      	ldr	r3, [pc, #68]	; (2dd0 <processCommandMsg+0x58>)
    2d8a:	7019      	strb	r1, [r3, #0]
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
    2d8c:	2900      	cmp	r1, #0
    2d8e:	d00a      	beq.n	2da6 <processCommandMsg+0x2e>
    2d90:	480c      	ldr	r0, [pc, #48]	; (2dc4 <processCommandMsg+0x4c>)
    2d92:	1cc3      	adds	r3, r0, #3
    2d94:	4a0f      	ldr	r2, [pc, #60]	; (2dd4 <processCommandMsg+0x5c>)
    2d96:	3103      	adds	r1, #3
    2d98:	1840      	adds	r0, r0, r1
			commandData[i] = commandMsg[i+3];
    2d9a:	7819      	ldrb	r1, [r3, #0]
    2d9c:	7011      	strb	r1, [r2, #0]
    2d9e:	3301      	adds	r3, #1
    2da0:	3201      	adds	r2, #1
		for (int i=0;i<commandDataLength;i++)
    2da2:	4283      	cmp	r3, r0
    2da4:	d1f9      	bne.n	2d9a <processCommandMsg+0x22>
    2da6:	4b07      	ldr	r3, [pc, #28]	; (2dc4 <processCommandMsg+0x4c>)
    2da8:	0019      	movs	r1, r3
    2daa:	3114      	adds	r1, #20
		commandMsg[i] = 0;
    2dac:	2200      	movs	r2, #0
    2dae:	701a      	strb	r2, [r3, #0]
    2db0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
    2db2:	428b      	cmp	r3, r1
    2db4:	d1fb      	bne.n	2dae <processCommandMsg+0x36>
	canMsgInFlag = 0; //reset MsgIn flag
    2db6:	2200      	movs	r2, #0
    2db8:	4b07      	ldr	r3, [pc, #28]	; (2dd8 <processCommandMsg+0x60>)
    2dba:	701a      	strb	r2, [r3, #0]
	commandReady = 1;//set commandReady to be executed
    2dbc:	3201      	adds	r2, #1
    2dbe:	4b07      	ldr	r3, [pc, #28]	; (2ddc <processCommandMsg+0x64>)
    2dc0:	701a      	strb	r2, [r3, #0]
}
    2dc2:	4770      	bx	lr
    2dc4:	200003e0 	.word	0x200003e0
    2dc8:	200003f5 	.word	0x200003f5
    2dcc:	200003dd 	.word	0x200003dd
    2dd0:	200003dc 	.word	0x200003dc
    2dd4:	200003c8 	.word	0x200003c8
    2dd8:	20000383 	.word	0x20000383
    2ddc:	200003f4 	.word	0x200003f4

00002de0 <execute_system_command>:
{	
    2de0:	b510      	push	{r4, lr}
	system_busy_flag = 1;
    2de2:	2201      	movs	r2, #1
    2de4:	4b13      	ldr	r3, [pc, #76]	; (2e34 <execute_system_command+0x54>)
    2de6:	701a      	strb	r2, [r3, #0]
	commandReady = 0;
    2de8:	2200      	movs	r2, #0
    2dea:	4b13      	ldr	r3, [pc, #76]	; (2e38 <execute_system_command+0x58>)
    2dec:	701a      	strb	r2, [r3, #0]
	printf("commandType == %d", commandType);
    2dee:	4c13      	ldr	r4, [pc, #76]	; (2e3c <execute_system_command+0x5c>)
    2df0:	7821      	ldrb	r1, [r4, #0]
    2df2:	4813      	ldr	r0, [pc, #76]	; (2e40 <execute_system_command+0x60>)
    2df4:	4b13      	ldr	r3, [pc, #76]	; (2e44 <execute_system_command+0x64>)
    2df6:	4798      	blx	r3
	if(commandType == CMD_TYPE_REQUEST)
    2df8:	7823      	ldrb	r3, [r4, #0]
    2dfa:	2b01      	cmp	r3, #1
    2dfc:	d00b      	beq.n	2e16 <execute_system_command+0x36>
	}else if (commandType == CMD_TYPE_SET)
    2dfe:	2b02      	cmp	r3, #2
    2e00:	d010      	beq.n	2e24 <execute_system_command+0x44>
	commandType = 0; //reset commandType to 0
    2e02:	2300      	movs	r3, #0
    2e04:	4a0d      	ldr	r2, [pc, #52]	; (2e3c <execute_system_command+0x5c>)
    2e06:	7013      	strb	r3, [r2, #0]
	commandIndex = 0;//reset commandIndex to 0
    2e08:	4a0f      	ldr	r2, [pc, #60]	; (2e48 <execute_system_command+0x68>)
    2e0a:	7013      	strb	r3, [r2, #0]
	commandDataLength = 0;//reset commandDataLength to 0
    2e0c:	4a0f      	ldr	r2, [pc, #60]	; (2e4c <execute_system_command+0x6c>)
    2e0e:	7013      	strb	r3, [r2, #0]
	system_busy_flag = 0;
    2e10:	4a08      	ldr	r2, [pc, #32]	; (2e34 <execute_system_command+0x54>)
    2e12:	7013      	strb	r3, [r2, #0]
}
    2e14:	bd10      	pop	{r4, pc}
		requestAction[commandIndex]();		
    2e16:	4b0c      	ldr	r3, [pc, #48]	; (2e48 <execute_system_command+0x68>)
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	009b      	lsls	r3, r3, #2
    2e1c:	4a0c      	ldr	r2, [pc, #48]	; (2e50 <execute_system_command+0x70>)
    2e1e:	589b      	ldr	r3, [r3, r2]
    2e20:	4798      	blx	r3
    2e22:	e7ee      	b.n	2e02 <execute_system_command+0x22>
		setAction[commandIndex]();
    2e24:	4b08      	ldr	r3, [pc, #32]	; (2e48 <execute_system_command+0x68>)
    2e26:	781b      	ldrb	r3, [r3, #0]
    2e28:	009b      	lsls	r3, r3, #2
    2e2a:	4a0a      	ldr	r2, [pc, #40]	; (2e54 <execute_system_command+0x74>)
    2e2c:	589b      	ldr	r3, [r3, r2]
    2e2e:	4798      	blx	r3
    2e30:	e7e7      	b.n	2e02 <execute_system_command+0x22>
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	2000043c 	.word	0x2000043c
    2e38:	200003f4 	.word	0x200003f4
    2e3c:	200003f5 	.word	0x200003f5
    2e40:	000051f4 	.word	0x000051f4
    2e44:	00003cb9 	.word	0x00003cb9
    2e48:	200003dd 	.word	0x200003dd
    2e4c:	200003dc 	.word	0x200003dc
    2e50:	2000001c 	.word	0x2000001c
    2e54:	20000028 	.word	0x20000028

00002e58 <battery_charge_calculation>:
{
    2e58:	b570      	push	{r4, r5, r6, lr}
    2e5a:	0004      	movs	r4, r0
	printf("battery_charge_calculation\r\n");
    2e5c:	4846      	ldr	r0, [pc, #280]	; (2f78 <battery_charge_calculation+0x120>)
    2e5e:	4b47      	ldr	r3, [pc, #284]	; (2f7c <battery_charge_calculation+0x124>)
    2e60:	4798      	blx	r3
	if (charge_sample_num >0)
    2e62:	4b47      	ldr	r3, [pc, #284]	; (2f80 <battery_charge_calculation+0x128>)
    2e64:	681a      	ldr	r2, [r3, #0]
    2e66:	2a00      	cmp	r2, #0
    2e68:	d022      	beq.n	2eb0 <battery_charge_calculation+0x58>
		avg_charge_current_reading = (uint16_t)(total_charge_current / charge_sample_num);
    2e6a:	4d46      	ldr	r5, [pc, #280]	; (2f84 <battery_charge_calculation+0x12c>)
    2e6c:	2300      	movs	r3, #0
    2e6e:	6828      	ldr	r0, [r5, #0]
    2e70:	6869      	ldr	r1, [r5, #4]
    2e72:	4e45      	ldr	r6, [pc, #276]	; (2f88 <battery_charge_calculation+0x130>)
    2e74:	47b0      	blx	r6
    2e76:	b283      	uxth	r3, r0
    2e78:	4a44      	ldr	r2, [pc, #272]	; (2f8c <battery_charge_calculation+0x134>)
    2e7a:	8013      	strh	r3, [r2, #0]
		total_charge_current = 0;
    2e7c:	2000      	movs	r0, #0
    2e7e:	2100      	movs	r1, #0
    2e80:	6028      	str	r0, [r5, #0]
    2e82:	6069      	str	r1, [r5, #4]
		charge_sample_num = 0;
    2e84:	4a3e      	ldr	r2, [pc, #248]	; (2f80 <battery_charge_calculation+0x128>)
    2e86:	2100      	movs	r1, #0
    2e88:	6011      	str	r1, [r2, #0]
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    2e8a:	4a41      	ldr	r2, [pc, #260]	; (2f90 <battery_charge_calculation+0x138>)
    2e8c:	8812      	ldrh	r2, [r2, #0]
    2e8e:	1a9a      	subs	r2, r3, r2
    2e90:	3214      	adds	r2, #20
    2e92:	b292      	uxth	r2, r2
    2e94:	2a28      	cmp	r2, #40	; 0x28
    2e96:	d904      	bls.n	2ea2 <battery_charge_calculation+0x4a>
			dateReportFlag = 1;
    2e98:	3101      	adds	r1, #1
    2e9a:	4a3e      	ldr	r2, [pc, #248]	; (2f94 <battery_charge_calculation+0x13c>)
    2e9c:	7011      	strb	r1, [r2, #0]
			avg_charge_current_reading_old = avg_charge_current_reading;
    2e9e:	4a3c      	ldr	r2, [pc, #240]	; (2f90 <battery_charge_calculation+0x138>)
    2ea0:	8013      	strh	r3, [r2, #0]
		delta_charge += avg_charge_current_reading / 4 * time;
    2ea2:	4a3d      	ldr	r2, [pc, #244]	; (2f98 <battery_charge_calculation+0x140>)
    2ea4:	089b      	lsrs	r3, r3, #2
    2ea6:	4363      	muls	r3, r4
    2ea8:	6811      	ldr	r1, [r2, #0]
    2eaa:	468c      	mov	ip, r1
    2eac:	4463      	add	r3, ip
    2eae:	6013      	str	r3, [r2, #0]
	if (discharge_sample_num > 0)
    2eb0:	4b3a      	ldr	r3, [pc, #232]	; (2f9c <battery_charge_calculation+0x144>)
    2eb2:	681a      	ldr	r2, [r3, #0]
    2eb4:	2a00      	cmp	r2, #0
    2eb6:	d025      	beq.n	2f04 <battery_charge_calculation+0xac>
		avg_discharge_current_reading = (uint16_t)(total_discharge_current / discharge_sample_num);
    2eb8:	4d39      	ldr	r5, [pc, #228]	; (2fa0 <battery_charge_calculation+0x148>)
    2eba:	2300      	movs	r3, #0
    2ebc:	6828      	ldr	r0, [r5, #0]
    2ebe:	6869      	ldr	r1, [r5, #4]
    2ec0:	4e31      	ldr	r6, [pc, #196]	; (2f88 <battery_charge_calculation+0x130>)
    2ec2:	47b0      	blx	r6
    2ec4:	b280      	uxth	r0, r0
    2ec6:	4b37      	ldr	r3, [pc, #220]	; (2fa4 <battery_charge_calculation+0x14c>)
    2ec8:	8018      	strh	r0, [r3, #0]
		total_discharge_current = 0;
    2eca:	2200      	movs	r2, #0
    2ecc:	2300      	movs	r3, #0
    2ece:	602a      	str	r2, [r5, #0]
    2ed0:	606b      	str	r3, [r5, #4]
		discharge_sample_num = 0;
    2ed2:	4b32      	ldr	r3, [pc, #200]	; (2f9c <battery_charge_calculation+0x144>)
    2ed4:	601a      	str	r2, [r3, #0]
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    2ed6:	4b34      	ldr	r3, [pc, #208]	; (2fa8 <battery_charge_calculation+0x150>)
    2ed8:	881b      	ldrh	r3, [r3, #0]
    2eda:	1ac3      	subs	r3, r0, r3
    2edc:	3314      	adds	r3, #20
    2ede:	b29b      	uxth	r3, r3
    2ee0:	2b28      	cmp	r3, #40	; 0x28
    2ee2:	d904      	bls.n	2eee <battery_charge_calculation+0x96>
			dateReportFlag = 1;
    2ee4:	3201      	adds	r2, #1
    2ee6:	4b2b      	ldr	r3, [pc, #172]	; (2f94 <battery_charge_calculation+0x13c>)
    2ee8:	701a      	strb	r2, [r3, #0]
			avg_discharge_current_reading_old = avg_discharge_current_reading;
    2eea:	4b2f      	ldr	r3, [pc, #188]	; (2fa8 <battery_charge_calculation+0x150>)
    2eec:	8018      	strh	r0, [r3, #0]
		delta_charge -= avg_discharge_current_reading * 1000 / 4095 / 5 * time;
    2eee:	4d2a      	ldr	r5, [pc, #168]	; (2f98 <battery_charge_calculation+0x140>)
    2ef0:	23fa      	movs	r3, #250	; 0xfa
    2ef2:	009b      	lsls	r3, r3, #2
    2ef4:	4358      	muls	r0, r3
    2ef6:	492d      	ldr	r1, [pc, #180]	; (2fac <battery_charge_calculation+0x154>)
    2ef8:	4b2d      	ldr	r3, [pc, #180]	; (2fb0 <battery_charge_calculation+0x158>)
    2efa:	4798      	blx	r3
    2efc:	4344      	muls	r4, r0
    2efe:	682b      	ldr	r3, [r5, #0]
    2f00:	1b1c      	subs	r4, r3, r4
    2f02:	602c      	str	r4, [r5, #0]
	if ((((uint32_t)(delta_charge) > calibrated_battery_capacity) && (charge_from_empty_flag == 1) ) ||
    2f04:	4b24      	ldr	r3, [pc, #144]	; (2f98 <battery_charge_calculation+0x140>)
    2f06:	6818      	ldr	r0, [r3, #0]
    2f08:	4b2a      	ldr	r3, [pc, #168]	; (2fb4 <battery_charge_calculation+0x15c>)
    2f0a:	681b      	ldr	r3, [r3, #0]
    2f0c:	4298      	cmp	r0, r3
    2f0e:	d903      	bls.n	2f18 <battery_charge_calculation+0xc0>
    2f10:	4a29      	ldr	r2, [pc, #164]	; (2fb8 <battery_charge_calculation+0x160>)
    2f12:	7812      	ldrb	r2, [r2, #0]
    2f14:	2a01      	cmp	r2, #1
    2f16:	d014      	beq.n	2f42 <battery_charge_calculation+0xea>
		(((uint32_t)(0 - delta_charge) > calibrated_battery_capacity) && (discharge_from_full_flag == 1)))
    2f18:	4242      	negs	r2, r0
	if ((((uint32_t)(delta_charge) > calibrated_battery_capacity) && (charge_from_empty_flag == 1) ) ||
    2f1a:	4293      	cmp	r3, r2
    2f1c:	d203      	bcs.n	2f26 <battery_charge_calculation+0xce>
		(((uint32_t)(0 - delta_charge) > calibrated_battery_capacity) && (discharge_from_full_flag == 1)))
    2f1e:	4b27      	ldr	r3, [pc, #156]	; (2fbc <battery_charge_calculation+0x164>)
    2f20:	781b      	ldrb	r3, [r3, #0]
    2f22:	2b01      	cmp	r3, #1
    2f24:	d00d      	beq.n	2f42 <battery_charge_calculation+0xea>
	if (delta_charge > 0)
    2f26:	2800      	cmp	r0, #0
    2f28:	dd15      	ble.n	2f56 <battery_charge_calculation+0xfe>
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
    2f2a:	2364      	movs	r3, #100	; 0x64
    2f2c:	4358      	muls	r0, r3
    2f2e:	4b21      	ldr	r3, [pc, #132]	; (2fb4 <battery_charge_calculation+0x15c>)
    2f30:	6819      	ldr	r1, [r3, #0]
    2f32:	4b23      	ldr	r3, [pc, #140]	; (2fc0 <battery_charge_calculation+0x168>)
    2f34:	4798      	blx	r3
    2f36:	b240      	sxtb	r0, r0
		if (charge_remain_percentage > 100)
    2f38:	2864      	cmp	r0, #100	; 0x64
    2f3a:	dc08      	bgt.n	2f4e <battery_charge_calculation+0xf6>
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
    2f3c:	4b21      	ldr	r3, [pc, #132]	; (2fc4 <battery_charge_calculation+0x16c>)
    2f3e:	7018      	strb	r0, [r3, #0]
}
    2f40:	bd70      	pop	{r4, r5, r6, pc}
		calibrated_battery_capacity = (uint32_t)(abs(delta_charge));
    2f42:	17c2      	asrs	r2, r0, #31
    2f44:	1883      	adds	r3, r0, r2
    2f46:	4053      	eors	r3, r2
    2f48:	4a1a      	ldr	r2, [pc, #104]	; (2fb4 <battery_charge_calculation+0x15c>)
    2f4a:	6013      	str	r3, [r2, #0]
    2f4c:	e7eb      	b.n	2f26 <battery_charge_calculation+0xce>
			charge_remain_percentage = 100;
    2f4e:	2264      	movs	r2, #100	; 0x64
    2f50:	4b1c      	ldr	r3, [pc, #112]	; (2fc4 <battery_charge_calculation+0x16c>)
    2f52:	701a      	strb	r2, [r3, #0]
    2f54:	e7f4      	b.n	2f40 <battery_charge_calculation+0xe8>
		charge_remain_percentage = (calibrated_battery_capacity + delta_charge) * 100 / calibrated_battery_capacity;
    2f56:	4b17      	ldr	r3, [pc, #92]	; (2fb4 <battery_charge_calculation+0x15c>)
    2f58:	6819      	ldr	r1, [r3, #0]
    2f5a:	1840      	adds	r0, r0, r1
    2f5c:	2364      	movs	r3, #100	; 0x64
    2f5e:	4358      	muls	r0, r3
    2f60:	4b17      	ldr	r3, [pc, #92]	; (2fc0 <battery_charge_calculation+0x168>)
    2f62:	4798      	blx	r3
    2f64:	b240      	sxtb	r0, r0
		if (charge_remain_percentage < 1)
    2f66:	2800      	cmp	r0, #0
    2f68:	dd02      	ble.n	2f70 <battery_charge_calculation+0x118>
		charge_remain_percentage = (calibrated_battery_capacity + delta_charge) * 100 / calibrated_battery_capacity;
    2f6a:	4b16      	ldr	r3, [pc, #88]	; (2fc4 <battery_charge_calculation+0x16c>)
    2f6c:	7018      	strb	r0, [r3, #0]
    2f6e:	e7e7      	b.n	2f40 <battery_charge_calculation+0xe8>
			charge_remain_percentage = 1;
    2f70:	2201      	movs	r2, #1
    2f72:	4b14      	ldr	r3, [pc, #80]	; (2fc4 <battery_charge_calculation+0x16c>)
    2f74:	701a      	strb	r2, [r3, #0]
}
    2f76:	e7e3      	b.n	2f40 <battery_charge_calculation+0xe8>
    2f78:	00005184 	.word	0x00005184
    2f7c:	00003dad 	.word	0x00003dad
    2f80:	200003c0 	.word	0x200003c0
    2f84:	20000448 	.word	0x20000448
    2f88:	000039e5 	.word	0x000039e5
    2f8c:	20000368 	.word	0x20000368
    2f90:	2000036a 	.word	0x2000036a
    2f94:	200003f6 	.word	0x200003f6
    2f98:	200003f8 	.word	0x200003f8
    2f9c:	20000400 	.word	0x20000400
    2fa0:	20000450 	.word	0x20000450
    2fa4:	2000036c 	.word	0x2000036c
    2fa8:	2000036e 	.word	0x2000036e
    2fac:	00004ffb 	.word	0x00004ffb
    2fb0:	0000380d 	.word	0x0000380d
    2fb4:	20000018 	.word	0x20000018
    2fb8:	200003bc 	.word	0x200003bc
    2fbc:	200003fc 	.word	0x200003fc
    2fc0:	000036f9 	.word	0x000036f9
    2fc4:	200003bd 	.word	0x200003bd

00002fc8 <rtc_match_callback>:
	rtc_calendar_enable(&rtc_instance);
}
struct rtc_calendar_alarm_time alarm;

void rtc_match_callback(void)
{
    2fc8:	b530      	push	{r4, r5, lr}
    2fca:	b083      	sub	sp, #12
	/* Do something on RTC alarm match here */
	//printf("###### alarm ######\r\n");
	
	static uint8_t second_count = 1;
	int32_t temp_result = 0;
    2fcc:	2300      	movs	r3, #0
    2fce:	9301      	str	r3, [sp, #4]
 * Start a new TSENS conversion.
 *
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;
    2fd0:	4a20      	ldr	r2, [pc, #128]	; (3054 <rtc_match_callback+0x8c>)
    2fd2:	7853      	ldrb	r3, [r2, #1]
    2fd4:	2101      	movs	r1, #1
    2fd6:	430b      	orrs	r3, r1
    2fd8:	7053      	strb	r3, [r2, #1]
	if (TSENS->SYNCBUSY.reg) {
    2fda:	6893      	ldr	r3, [r2, #8]

	while (tsens_is_syncing()) {
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d1fc      	bne.n	2fda <rtc_match_callback+0x12>
	tsens_start_conversion();
	do {
		/* Wait for conversion to be done and read out temperature result */
	} while (tsens_read(&temp_result) != STATUS_OK);
    2fe0:	4c1d      	ldr	r4, [pc, #116]	; (3058 <rtc_match_callback+0x90>)
    2fe2:	a801      	add	r0, sp, #4
    2fe4:	47a0      	blx	r4
    2fe6:	2800      	cmp	r0, #0
    2fe8:	d1fb      	bne.n	2fe2 <rtc_match_callback+0x1a>
	printf("temperature :" );
    2fea:	481c      	ldr	r0, [pc, #112]	; (305c <rtc_match_callback+0x94>)
    2fec:	4c1c      	ldr	r4, [pc, #112]	; (3060 <rtc_match_callback+0x98>)
    2fee:	47a0      	blx	r4
	printf("%d \r\n", temp_result);
    2ff0:	9901      	ldr	r1, [sp, #4]
    2ff2:	481c      	ldr	r0, [pc, #112]	; (3064 <rtc_match_callback+0x9c>)
    2ff4:	47a0      	blx	r4
	
	if (dateReportFlag == 1)
    2ff6:	4b1c      	ldr	r3, [pc, #112]	; (3068 <rtc_match_callback+0xa0>)
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	2b01      	cmp	r3, #1
    2ffc:	d01d      	beq.n	303a <rtc_match_callback+0x72>
		dateReportFlag = 0;
	}
	
	
	/* Set new alarm in 5 seconds */
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    2ffe:	4c1b      	ldr	r4, [pc, #108]	; (306c <rtc_match_callback+0xa4>)
    3000:	2301      	movs	r3, #1
    3002:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 1;
    3004:	7820      	ldrb	r0, [r4, #0]
    3006:	3001      	adds	r0, #1
	alarm.time.second = alarm.time.second % 60;
    3008:	b2c0      	uxtb	r0, r0
    300a:	4d19      	ldr	r5, [pc, #100]	; (3070 <rtc_match_callback+0xa8>)
    300c:	213c      	movs	r1, #60	; 0x3c
    300e:	47a8      	blx	r5
    3010:	b2c8      	uxtb	r0, r1
    3012:	7020      	strb	r0, [r4, #0]
	
	//forced data reporting every 10 seconds
	if ((alarm.time.second % 6) == 0)
    3014:	2106      	movs	r1, #6
    3016:	47a8      	blx	r5
    3018:	b2c9      	uxtb	r1, r1
    301a:	2900      	cmp	r1, #0
    301c:	d102      	bne.n	3024 <rtc_match_callback+0x5c>
	{
		dateReportFlag = 1;
    301e:	2201      	movs	r2, #1
    3020:	4b11      	ldr	r3, [pc, #68]	; (3068 <rtc_match_callback+0xa0>)
    3022:	701a      	strb	r2, [r3, #0]
	}
	
	second_count++;
    3024:	4a13      	ldr	r2, [pc, #76]	; (3074 <rtc_match_callback+0xac>)
    3026:	7813      	ldrb	r3, [r2, #0]
    3028:	3301      	adds	r3, #1
    302a:	7013      	strb	r3, [r2, #0]
	
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    302c:	2200      	movs	r2, #0
    302e:	490f      	ldr	r1, [pc, #60]	; (306c <rtc_match_callback+0xa4>)
    3030:	4811      	ldr	r0, [pc, #68]	; (3078 <rtc_match_callback+0xb0>)
    3032:	4b12      	ldr	r3, [pc, #72]	; (307c <rtc_match_callback+0xb4>)
    3034:	4798      	blx	r3
	
}
    3036:	b003      	add	sp, #12
    3038:	bd30      	pop	{r4, r5, pc}
		battery_charge_calculation(second_count);
    303a:	4c0e      	ldr	r4, [pc, #56]	; (3074 <rtc_match_callback+0xac>)
    303c:	7820      	ldrb	r0, [r4, #0]
    303e:	4b10      	ldr	r3, [pc, #64]	; (3080 <rtc_match_callback+0xb8>)
    3040:	4798      	blx	r3
		second_count = 1;
    3042:	2301      	movs	r3, #1
    3044:	7023      	strb	r3, [r4, #0]
		send_battery_data();
    3046:	4b0f      	ldr	r3, [pc, #60]	; (3084 <rtc_match_callback+0xbc>)
    3048:	4798      	blx	r3
		dateReportFlag = 0;
    304a:	2200      	movs	r2, #0
    304c:	4b06      	ldr	r3, [pc, #24]	; (3068 <rtc_match_callback+0xa0>)
    304e:	701a      	strb	r2, [r3, #0]
    3050:	e7d5      	b.n	2ffe <rtc_match_callback+0x36>
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	40003000 	.word	0x40003000
    3058:	00000b59 	.word	0x00000b59
    305c:	0000521c 	.word	0x0000521c
    3060:	00003cb9 	.word	0x00003cb9
    3064:	0000517c 	.word	0x0000517c
    3068:	200003f6 	.word	0x200003f6
    306c:	200004e8 	.word	0x200004e8
    3070:	00003805 	.word	0x00003805
    3074:	20000024 	.word	0x20000024
    3078:	200004a4 	.word	0x200004a4
    307c:	0000089d 	.word	0x0000089d
    3080:	00002e59 	.word	0x00002e59
    3084:	000027f1 	.word	0x000027f1

00003088 <CAN0_Handler>:
{
    3088:	b5f0      	push	{r4, r5, r6, r7, lr}
    308a:	46ce      	mov	lr, r9
    308c:	4647      	mov	r7, r8
    308e:	b580      	push	{r7, lr}
    3090:	b085      	sub	sp, #20
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    3092:	4b8d      	ldr	r3, [pc, #564]	; (32c8 <CAN0_Handler+0x240>)
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	status = can_read_interrupt_status(&can_instance);
    3098:	9203      	str	r2, [sp, #12]
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    309a:	9a03      	ldr	r2, [sp, #12]
    309c:	0312      	lsls	r2, r2, #12
    309e:	d567      	bpl.n	3170 <CAN0_Handler+0xe8>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    30a0:	2280      	movs	r2, #128	; 0x80
    30a2:	0312      	lsls	r2, r2, #12
    30a4:	651a      	str	r2, [r3, #80]	; 0x50
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    30a6:	2300      	movs	r3, #0
    30a8:	9302      	str	r3, [sp, #8]
    30aa:	9b02      	ldr	r3, [sp, #8]
    30ac:	2b03      	cmp	r3, #3
    30ae:	d85f      	bhi.n	3170 <CAN0_Handler+0xe8>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    30b0:	4b85      	ldr	r3, [pc, #532]	; (32c8 <CAN0_Handler+0x240>)
    30b2:	4699      	mov	r9, r3
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    30b4:	4698      	mov	r8, r3
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    30b6:	4f85      	ldr	r7, [pc, #532]	; (32cc <CAN0_Handler+0x244>)
    30b8:	e033      	b.n	3122 <CAN0_Handler+0x9a>
    30ba:	239c      	movs	r3, #156	; 0x9c
    30bc:	4641      	mov	r1, r8
    30be:	6809      	ldr	r1, [r1, #0]
    30c0:	58cb      	ldr	r3, [r1, r3]
		index -= 32;
    30c2:	3a20      	subs	r2, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    30c4:	2101      	movs	r1, #1
    30c6:	4091      	lsls	r1, r2
    30c8:	400b      	ands	r3, r1
    30ca:	1e5a      	subs	r2, r3, #1
    30cc:	4193      	sbcs	r3, r2
    30ce:	b2db      	uxtb	r3, r3
    30d0:	e034      	b.n	313c <CAN0_Handler+0xb4>
		module_inst->hw->NDAT2.reg = (1 << index);
    30d2:	4a7d      	ldr	r2, [pc, #500]	; (32c8 <CAN0_Handler+0x240>)
    30d4:	6811      	ldr	r1, [r2, #0]
		index -= 32;
    30d6:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    30d8:	2201      	movs	r2, #1
    30da:	409a      	lsls	r2, r3
    30dc:	0013      	movs	r3, r2
    30de:	229c      	movs	r2, #156	; 0x9c
    30e0:	508b      	str	r3, [r1, r2]
    30e2:	e039      	b.n	3158 <CAN0_Handler+0xd0>
					printf("\n\r Standard FD message received in Rx buffer. The received data is: \r\n");
    30e4:	487a      	ldr	r0, [pc, #488]	; (32d0 <CAN0_Handler+0x248>)
    30e6:	4b7b      	ldr	r3, [pc, #492]	; (32d4 <CAN0_Handler+0x24c>)
    30e8:	4798      	blx	r3
				for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    30ea:	2300      	movs	r3, #0
    30ec:	9302      	str	r3, [sp, #8]
    30ee:	9b02      	ldr	r3, [sp, #8]
    30f0:	2b07      	cmp	r3, #7
    30f2:	d80d      	bhi.n	3110 <CAN0_Handler+0x88>
					printf("  %d",rx_element_buffer.data[i]);
    30f4:	4e75      	ldr	r6, [pc, #468]	; (32cc <CAN0_Handler+0x244>)
    30f6:	4d78      	ldr	r5, [pc, #480]	; (32d8 <CAN0_Handler+0x250>)
    30f8:	4c78      	ldr	r4, [pc, #480]	; (32dc <CAN0_Handler+0x254>)
    30fa:	9b02      	ldr	r3, [sp, #8]
    30fc:	18f3      	adds	r3, r6, r3
    30fe:	7a19      	ldrb	r1, [r3, #8]
    3100:	0028      	movs	r0, r5
    3102:	47a0      	blx	r4
				for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3104:	9b02      	ldr	r3, [sp, #8]
    3106:	3301      	adds	r3, #1
    3108:	9302      	str	r3, [sp, #8]
    310a:	9b02      	ldr	r3, [sp, #8]
    310c:	2b07      	cmp	r3, #7
    310e:	d9f4      	bls.n	30fa <CAN0_Handler+0x72>
				printf("\r\n\r\n");
    3110:	4873      	ldr	r0, [pc, #460]	; (32e0 <CAN0_Handler+0x258>)
    3112:	4b70      	ldr	r3, [pc, #448]	; (32d4 <CAN0_Handler+0x24c>)
    3114:	4798      	blx	r3
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    3116:	9b02      	ldr	r3, [sp, #8]
    3118:	3301      	adds	r3, #1
    311a:	9302      	str	r3, [sp, #8]
    311c:	9b02      	ldr	r3, [sp, #8]
    311e:	2b03      	cmp	r3, #3
    3120:	d826      	bhi.n	3170 <CAN0_Handler+0xe8>
			if (can_rx_get_buffer_status(&can_instance, i)) {
    3122:	9a02      	ldr	r2, [sp, #8]
	if (index < 32) {
    3124:	2a1f      	cmp	r2, #31
    3126:	d8c8      	bhi.n	30ba <CAN0_Handler+0x32>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    3128:	2398      	movs	r3, #152	; 0x98
    312a:	4649      	mov	r1, r9
    312c:	6809      	ldr	r1, [r1, #0]
    312e:	58cb      	ldr	r3, [r1, r3]
    3130:	2101      	movs	r1, #1
    3132:	4091      	lsls	r1, r2
    3134:	400b      	ands	r3, r1
    3136:	1e5a      	subs	r2, r3, #1
    3138:	4193      	sbcs	r3, r2
    313a:	b2db      	uxtb	r3, r3
    313c:	2b00      	cmp	r3, #0
    313e:	d0ea      	beq.n	3116 <CAN0_Handler+0x8e>
				rx_buffer_index = i;
    3140:	9b02      	ldr	r3, [sp, #8]
    3142:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
    3144:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
    3146:	2b1f      	cmp	r3, #31
    3148:	d8c3      	bhi.n	30d2 <CAN0_Handler+0x4a>
		module_inst->hw->NDAT1.reg = (1 << index);
    314a:	4a5f      	ldr	r2, [pc, #380]	; (32c8 <CAN0_Handler+0x240>)
    314c:	6811      	ldr	r1, [r2, #0]
    314e:	2201      	movs	r2, #1
    3150:	409a      	lsls	r2, r3
    3152:	0013      	movs	r3, r2
    3154:	2298      	movs	r2, #152	; 0x98
    3156:	508b      	str	r3, [r1, r2]
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    3158:	9a01      	ldr	r2, [sp, #4]
    315a:	0039      	movs	r1, r7
    315c:	485a      	ldr	r0, [pc, #360]	; (32c8 <CAN0_Handler+0x240>)
    315e:	4b61      	ldr	r3, [pc, #388]	; (32e4 <CAN0_Handler+0x25c>)
    3160:	4798      	blx	r3
				if (rx_element_buffer.R0.bit.XTD) {
    3162:	683b      	ldr	r3, [r7, #0]
    3164:	005b      	lsls	r3, r3, #1
    3166:	d5bd      	bpl.n	30e4 <CAN0_Handler+0x5c>
					printf("\n\r Extended FD message received in Rx buffer. The received data is: \r\n");
    3168:	485f      	ldr	r0, [pc, #380]	; (32e8 <CAN0_Handler+0x260>)
    316a:	4b5a      	ldr	r3, [pc, #360]	; (32d4 <CAN0_Handler+0x24c>)
    316c:	4798      	blx	r3
    316e:	e7bc      	b.n	30ea <CAN0_Handler+0x62>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    3170:	9b03      	ldr	r3, [sp, #12]
    3172:	07db      	lsls	r3, r3, #31
    3174:	d415      	bmi.n	31a2 <CAN0_Handler+0x11a>
	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
    3176:	9b03      	ldr	r3, [sp, #12]
    3178:	06db      	lsls	r3, r3, #27
    317a:	d468      	bmi.n	324e <CAN0_Handler+0x1c6>
	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    317c:	9b03      	ldr	r3, [sp, #12]
    317e:	011b      	lsls	r3, r3, #4
    3180:	d402      	bmi.n	3188 <CAN0_Handler+0x100>
	|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    3182:	9b03      	ldr	r3, [sp, #12]
    3184:	00db      	lsls	r3, r3, #3
    3186:	d507      	bpl.n	3198 <CAN0_Handler+0x110>
	module_inst->hw->IR.reg = source;
    3188:	4b4f      	ldr	r3, [pc, #316]	; (32c8 <CAN0_Handler+0x240>)
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	22c0      	movs	r2, #192	; 0xc0
    318e:	0552      	lsls	r2, r2, #21
    3190:	651a      	str	r2, [r3, #80]	; 0x50
		printf("Protocol error, please double check the clock in two boards. \r\n\r\n");
    3192:	4856      	ldr	r0, [pc, #344]	; (32ec <CAN0_Handler+0x264>)
    3194:	4b4f      	ldr	r3, [pc, #316]	; (32d4 <CAN0_Handler+0x24c>)
    3196:	4798      	blx	r3
}
    3198:	b005      	add	sp, #20
    319a:	bc0c      	pop	{r2, r3}
    319c:	4690      	mov	r8, r2
    319e:	4699      	mov	r9, r3
    31a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a2:	4d49      	ldr	r5, [pc, #292]	; (32c8 <CAN0_Handler+0x240>)
    31a4:	682b      	ldr	r3, [r5, #0]
    31a6:	2201      	movs	r2, #1
    31a8:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    31aa:	4c51      	ldr	r4, [pc, #324]	; (32f0 <CAN0_Handler+0x268>)
    31ac:	6822      	ldr	r2, [r4, #0]
    31ae:	4951      	ldr	r1, [pc, #324]	; (32f4 <CAN0_Handler+0x26c>)
    31b0:	0028      	movs	r0, r5
    31b2:	4b51      	ldr	r3, [pc, #324]	; (32f8 <CAN0_Handler+0x270>)
    31b4:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    31b6:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    31b8:	6829      	ldr	r1, [r5, #0]
    31ba:	233f      	movs	r3, #63	; 0x3f
    31bc:	4013      	ands	r3, r2
    31be:	22a8      	movs	r2, #168	; 0xa8
    31c0:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    31c2:	6823      	ldr	r3, [r4, #0]
    31c4:	3301      	adds	r3, #1
    31c6:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    31c8:	6823      	ldr	r3, [r4, #0]
    31ca:	2b04      	cmp	r3, #4
    31cc:	d01d      	beq.n	320a <CAN0_Handler+0x182>
		if (rx_element_fifo_0.R1.bit.FDF) {
    31ce:	4b49      	ldr	r3, [pc, #292]	; (32f4 <CAN0_Handler+0x26c>)
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	029b      	lsls	r3, r3, #10
    31d4:	d51d      	bpl.n	3212 <CAN0_Handler+0x18a>
			printf("\n\r Standard FD message received in FIFO 0. The received data is: \r\n");
    31d6:	4849      	ldr	r0, [pc, #292]	; (32fc <CAN0_Handler+0x274>)
    31d8:	4b3e      	ldr	r3, [pc, #248]	; (32d4 <CAN0_Handler+0x24c>)
    31da:	4798      	blx	r3
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    31dc:	2300      	movs	r3, #0
    31de:	9302      	str	r3, [sp, #8]
    31e0:	9b02      	ldr	r3, [sp, #8]
    31e2:	2b07      	cmp	r3, #7
    31e4:	d80d      	bhi.n	3202 <CAN0_Handler+0x17a>
				printf("  %d",rx_element_fifo_0.data[i]);
    31e6:	4e43      	ldr	r6, [pc, #268]	; (32f4 <CAN0_Handler+0x26c>)
    31e8:	4c3b      	ldr	r4, [pc, #236]	; (32d8 <CAN0_Handler+0x250>)
    31ea:	4d3c      	ldr	r5, [pc, #240]	; (32dc <CAN0_Handler+0x254>)
    31ec:	9b02      	ldr	r3, [sp, #8]
    31ee:	18f3      	adds	r3, r6, r3
    31f0:	7a19      	ldrb	r1, [r3, #8]
    31f2:	0020      	movs	r0, r4
    31f4:	47a8      	blx	r5
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    31f6:	9b02      	ldr	r3, [sp, #8]
    31f8:	3301      	adds	r3, #1
    31fa:	9302      	str	r3, [sp, #8]
    31fc:	9b02      	ldr	r3, [sp, #8]
    31fe:	2b07      	cmp	r3, #7
    3200:	d9f4      	bls.n	31ec <CAN0_Handler+0x164>
		printf("\r\n\r\n");
    3202:	4837      	ldr	r0, [pc, #220]	; (32e0 <CAN0_Handler+0x258>)
    3204:	4b33      	ldr	r3, [pc, #204]	; (32d4 <CAN0_Handler+0x24c>)
    3206:	4798      	blx	r3
    3208:	e7b5      	b.n	3176 <CAN0_Handler+0xee>
			standard_receive_index = 0;
    320a:	2200      	movs	r2, #0
    320c:	4b38      	ldr	r3, [pc, #224]	; (32f0 <CAN0_Handler+0x268>)
    320e:	601a      	str	r2, [r3, #0]
    3210:	e7dd      	b.n	31ce <CAN0_Handler+0x146>
			printf("\n\r Standard normal message received in FIFO 0. The received data is: \r\n");
    3212:	483b      	ldr	r0, [pc, #236]	; (3300 <CAN0_Handler+0x278>)
    3214:	4b2f      	ldr	r3, [pc, #188]	; (32d4 <CAN0_Handler+0x24c>)
    3216:	4798      	blx	r3
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    3218:	2300      	movs	r3, #0
    321a:	9302      	str	r3, [sp, #8]
    321c:	4b35      	ldr	r3, [pc, #212]	; (32f4 <CAN0_Handler+0x26c>)
    321e:	685b      	ldr	r3, [r3, #4]
    3220:	031b      	lsls	r3, r3, #12
    3222:	0f1b      	lsrs	r3, r3, #28
    3224:	9a02      	ldr	r2, [sp, #8]
    3226:	4293      	cmp	r3, r2
    3228:	d9eb      	bls.n	3202 <CAN0_Handler+0x17a>
				printf("  %d",rx_element_fifo_0.data[i]);
    322a:	4d32      	ldr	r5, [pc, #200]	; (32f4 <CAN0_Handler+0x26c>)
    322c:	4c2a      	ldr	r4, [pc, #168]	; (32d8 <CAN0_Handler+0x250>)
    322e:	4e2b      	ldr	r6, [pc, #172]	; (32dc <CAN0_Handler+0x254>)
    3230:	9b02      	ldr	r3, [sp, #8]
    3232:	18eb      	adds	r3, r5, r3
    3234:	7a19      	ldrb	r1, [r3, #8]
    3236:	0020      	movs	r0, r4
    3238:	47b0      	blx	r6
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    323a:	9b02      	ldr	r3, [sp, #8]
    323c:	3301      	adds	r3, #1
    323e:	9302      	str	r3, [sp, #8]
    3240:	686b      	ldr	r3, [r5, #4]
    3242:	031b      	lsls	r3, r3, #12
    3244:	0f1b      	lsrs	r3, r3, #28
    3246:	9a02      	ldr	r2, [sp, #8]
    3248:	4293      	cmp	r3, r2
    324a:	d8f1      	bhi.n	3230 <CAN0_Handler+0x1a8>
    324c:	e7d9      	b.n	3202 <CAN0_Handler+0x17a>
	module_inst->hw->IR.reg = source;
    324e:	4d1e      	ldr	r5, [pc, #120]	; (32c8 <CAN0_Handler+0x240>)
    3250:	682b      	ldr	r3, [r5, #0]
    3252:	2210      	movs	r2, #16
    3254:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
    3256:	4c2b      	ldr	r4, [pc, #172]	; (3304 <CAN0_Handler+0x27c>)
    3258:	6822      	ldr	r2, [r4, #0]
    325a:	492b      	ldr	r1, [pc, #172]	; (3308 <CAN0_Handler+0x280>)
    325c:	0028      	movs	r0, r5
    325e:	4b2b      	ldr	r3, [pc, #172]	; (330c <CAN0_Handler+0x284>)
    3260:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    3262:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    3264:	6829      	ldr	r1, [r5, #0]
    3266:	233f      	movs	r3, #63	; 0x3f
    3268:	4013      	ands	r3, r2
    326a:	22a8      	movs	r2, #168	; 0xa8
    326c:	508b      	str	r3, [r1, r2]
		extended_receive_index++;
    326e:	6823      	ldr	r3, [r4, #0]
    3270:	3301      	adds	r3, #1
    3272:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
    3274:	6823      	ldr	r3, [r4, #0]
    3276:	2b04      	cmp	r3, #4
    3278:	d022      	beq.n	32c0 <CAN0_Handler+0x238>
		printf("\n\r Extended FD message received in FIFO 1. The received data is: \r\n");
    327a:	4825      	ldr	r0, [pc, #148]	; (3310 <CAN0_Handler+0x288>)
    327c:	4b15      	ldr	r3, [pc, #84]	; (32d4 <CAN0_Handler+0x24c>)
    327e:	4798      	blx	r3
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3280:	2300      	movs	r3, #0
    3282:	9302      	str	r3, [sp, #8]
    3284:	9b02      	ldr	r3, [sp, #8]
    3286:	2b07      	cmp	r3, #7
    3288:	d813      	bhi.n	32b2 <CAN0_Handler+0x22a>
			commandMsg[i] = rx_element_fifo_1.data[i];
    328a:	4e22      	ldr	r6, [pc, #136]	; (3314 <CAN0_Handler+0x28c>)
    328c:	4d1e      	ldr	r5, [pc, #120]	; (3308 <CAN0_Handler+0x280>)
			printf("  %d",rx_element_fifo_1.data[i]);
    328e:	4c12      	ldr	r4, [pc, #72]	; (32d8 <CAN0_Handler+0x250>)
			commandMsg[i] = rx_element_fifo_1.data[i];
    3290:	9a02      	ldr	r2, [sp, #8]
    3292:	9b02      	ldr	r3, [sp, #8]
    3294:	18eb      	adds	r3, r5, r3
    3296:	7a1b      	ldrb	r3, [r3, #8]
    3298:	54b3      	strb	r3, [r6, r2]
			printf("  %d",rx_element_fifo_1.data[i]);
    329a:	9b02      	ldr	r3, [sp, #8]
    329c:	18eb      	adds	r3, r5, r3
    329e:	7a19      	ldrb	r1, [r3, #8]
    32a0:	0020      	movs	r0, r4
    32a2:	4b0e      	ldr	r3, [pc, #56]	; (32dc <CAN0_Handler+0x254>)
    32a4:	4798      	blx	r3
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    32a6:	9b02      	ldr	r3, [sp, #8]
    32a8:	3301      	adds	r3, #1
    32aa:	9302      	str	r3, [sp, #8]
    32ac:	9b02      	ldr	r3, [sp, #8]
    32ae:	2b07      	cmp	r3, #7
    32b0:	d9ee      	bls.n	3290 <CAN0_Handler+0x208>
		canMsgInFlag = 1;
    32b2:	2201      	movs	r2, #1
    32b4:	4b18      	ldr	r3, [pc, #96]	; (3318 <CAN0_Handler+0x290>)
    32b6:	701a      	strb	r2, [r3, #0]
		printf("\r\n\r\n");
    32b8:	4809      	ldr	r0, [pc, #36]	; (32e0 <CAN0_Handler+0x258>)
    32ba:	4b06      	ldr	r3, [pc, #24]	; (32d4 <CAN0_Handler+0x24c>)
    32bc:	4798      	blx	r3
    32be:	e75d      	b.n	317c <CAN0_Handler+0xf4>
			extended_receive_index = 0;
    32c0:	2200      	movs	r2, #0
    32c2:	4b10      	ldr	r3, [pc, #64]	; (3304 <CAN0_Handler+0x27c>)
    32c4:	601a      	str	r2, [r3, #0]
    32c6:	e7d8      	b.n	327a <CAN0_Handler+0x1f2>
    32c8:	20000384 	.word	0x20000384
    32cc:	20000408 	.word	0x20000408
    32d0:	00004f94 	.word	0x00004f94
    32d4:	00003dad 	.word	0x00003dad
    32d8:	00004fdc 	.word	0x00004fdc
    32dc:	00003cb9 	.word	0x00003cb9
    32e0:	00004fe4 	.word	0x00004fe4
    32e4:	00001329 	.word	0x00001329
    32e8:	00004f4c 	.word	0x00004f4c
    32ec:	000050b8 	.word	0x000050b8
    32f0:	20000438 	.word	0x20000438
    32f4:	20000418 	.word	0x20000418
    32f8:	00001379 	.word	0x00001379
    32fc:	00004fe8 	.word	0x00004fe8
    3300:	0000502c 	.word	0x0000502c
    3304:	20000404 	.word	0x20000404
    3308:	20000428 	.word	0x20000428
    330c:	000013c9 	.word	0x000013c9
    3310:	00005074 	.word	0x00005074
    3314:	200003e0 	.word	0x200003e0
    3318:	20000383 	.word	0x20000383

0000331c <configure_rtc_calendar>:
{
    331c:	b530      	push	{r4, r5, lr}
    331e:	b089      	sub	sp, #36	; 0x24
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3320:	aa03      	add	r2, sp, #12
    3322:	23b0      	movs	r3, #176	; 0xb0
    3324:	011b      	lsls	r3, r3, #4
    3326:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3328:	2300      	movs	r3, #0
    332a:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    332c:	21fa      	movs	r1, #250	; 0xfa
    332e:	00c9      	lsls	r1, r1, #3
    3330:	8091      	strh	r1, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    3332:	2401      	movs	r4, #1
    3334:	7194      	strb	r4, [r2, #6]
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    3336:	72d3      	strb	r3, [r2, #11]
	config_rtc_calendar.clock_24h = true;
    3338:	70d4      	strb	r4, [r2, #3]
	config_rtc_calendar.alarm[0].time = alarm.time;
    333a:	7213      	strb	r3, [r2, #8]
    333c:	7253      	strb	r3, [r2, #9]
    333e:	7293      	strb	r3, [r2, #10]
    3340:	7314      	strb	r4, [r2, #12]
    3342:	7354      	strb	r4, [r2, #13]
    3344:	23fc      	movs	r3, #252	; 0xfc
    3346:	00db      	lsls	r3, r3, #3
    3348:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    334a:	7414      	strb	r4, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    334c:	4d14      	ldr	r5, [pc, #80]	; (33a0 <configure_rtc_calendar+0x84>)
    334e:	4915      	ldr	r1, [pc, #84]	; (33a4 <configure_rtc_calendar+0x88>)
    3350:	0028      	movs	r0, r5
    3352:	4b15      	ldr	r3, [pc, #84]	; (33a8 <configure_rtc_calendar+0x8c>)
    3354:	4798      	blx	r3
	calendar_event.generate_event_on_periodic[7] = true;
    3356:	466b      	mov	r3, sp
    3358:	725c      	strb	r4, [r3, #9]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    335a:	682d      	ldr	r5, [r5, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    335c:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    335e:	1e53      	subs	r3, r2, #1
    3360:	419a      	sbcs	r2, r3
    3362:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
    3364:	466b      	mov	r3, sp
    3366:	785b      	ldrb	r3, [r3, #1]
    3368:	2b00      	cmp	r3, #0
    336a:	d002      	beq.n	3372 <configure_rtc_calendar+0x56>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
    336c:	2380      	movs	r3, #128	; 0x80
    336e:	005b      	lsls	r3, r3, #1
    3370:	431a      	orrs	r2, r3
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    3372:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    3374:	2401      	movs	r4, #1
    3376:	20ff      	movs	r0, #255	; 0xff
		if (events->generate_event_on_periodic[i]) {
    3378:	0019      	movs	r1, r3
    337a:	4469      	add	r1, sp
    337c:	7889      	ldrb	r1, [r1, #2]
    337e:	2900      	cmp	r1, #0
    3380:	d003      	beq.n	338a <configure_rtc_calendar+0x6e>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    3382:	0021      	movs	r1, r4
    3384:	4099      	lsls	r1, r3
    3386:	4001      	ands	r1, r0
    3388:	430a      	orrs	r2, r1
    338a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++) {
    338c:	2b08      	cmp	r3, #8
    338e:	d1f3      	bne.n	3378 <configure_rtc_calendar+0x5c>
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
    3390:	686b      	ldr	r3, [r5, #4]
    3392:	431a      	orrs	r2, r3
    3394:	606a      	str	r2, [r5, #4]
	rtc_calendar_enable(&rtc_instance);
    3396:	4802      	ldr	r0, [pc, #8]	; (33a0 <configure_rtc_calendar+0x84>)
    3398:	4b04      	ldr	r3, [pc, #16]	; (33ac <configure_rtc_calendar+0x90>)
    339a:	4798      	blx	r3
}
    339c:	b009      	add	sp, #36	; 0x24
    339e:	bd30      	pop	{r4, r5, pc}
    33a0:	200004a4 	.word	0x200004a4
    33a4:	40002400 	.word	0x40002400
    33a8:	000008e1 	.word	0x000008e1
    33ac:	00000761 	.word	0x00000761

000033b0 <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
    33b0:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    33b2:	4c05      	ldr	r4, [pc, #20]	; (33c8 <configure_rtc_callbacks+0x18>)
    33b4:	2208      	movs	r2, #8
    33b6:	4905      	ldr	r1, [pc, #20]	; (33cc <configure_rtc_callbacks+0x1c>)
    33b8:	0020      	movs	r0, r4
    33ba:	4b05      	ldr	r3, [pc, #20]	; (33d0 <configure_rtc_callbacks+0x20>)
    33bc:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    33be:	2108      	movs	r1, #8
    33c0:	0020      	movs	r0, r4
    33c2:	4b04      	ldr	r3, [pc, #16]	; (33d4 <configure_rtc_callbacks+0x24>)
    33c4:	4798      	blx	r3
}
    33c6:	bd10      	pop	{r4, pc}
    33c8:	200004a4 	.word	0x200004a4
    33cc:	00002fc9 	.word	0x00002fc9
    33d0:	0000095d 	.word	0x0000095d
    33d4:	0000097d 	.word	0x0000097d

000033d8 <configure_tsens>:
/************************************************************************/
/* config temperature sensor                                            */
/************************************************************************/

void configure_tsens(void)
{
    33d8:	b500      	push	{lr}
    33da:	b089      	sub	sp, #36	; 0x24
	struct tsens_config config_tsens;
	tsens_get_config_defaults(&config_tsens);
    33dc:	a801      	add	r0, sp, #4
    33de:	4b07      	ldr	r3, [pc, #28]	; (33fc <configure_tsens+0x24>)
    33e0:	4798      	blx	r3
	tsens_init(&config_tsens);
    33e2:	a801      	add	r0, sp, #4
    33e4:	4b06      	ldr	r3, [pc, #24]	; (3400 <configure_tsens+0x28>)
    33e6:	4798      	blx	r3
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;
    33e8:	4a06      	ldr	r2, [pc, #24]	; (3404 <configure_tsens+0x2c>)
    33ea:	7813      	ldrb	r3, [r2, #0]
    33ec:	2102      	movs	r1, #2
    33ee:	430b      	orrs	r3, r1
    33f0:	7013      	strb	r3, [r2, #0]
	if (TSENS->SYNCBUSY.reg) {
    33f2:	6893      	ldr	r3, [r2, #8]
	while (tsens_is_syncing()) {
    33f4:	2b00      	cmp	r3, #0
    33f6:	d1fc      	bne.n	33f2 <configure_tsens+0x1a>
	tsens_enable();
}
    33f8:	b009      	add	sp, #36	; 0x24
    33fa:	bd00      	pop	{pc}
    33fc:	00000b25 	.word	0x00000b25
    3400:	00000a69 	.word	0x00000a69
    3404:	40003000 	.word	0x40003000

00003408 <main>:


//! [setup]

int main(void)
{
    3408:	b5f0      	push	{r4, r5, r6, r7, lr}
    340a:	46ce      	mov	lr, r9
    340c:	4647      	mov	r7, r8
    340e:	b580      	push	{r7, lr}
    3410:	b099      	sub	sp, #100	; 0x64
	
	uint8_t key;

//! [setup_init]
	system_init();
    3412:	4b89      	ldr	r3, [pc, #548]	; (3638 <main+0x230>)
    3414:	4798      	blx	r3
	cpu_irq_enable();
    3416:	2401      	movs	r4, #1
    3418:	4b88      	ldr	r3, [pc, #544]	; (363c <main+0x234>)
    341a:	701c      	strb	r4, [r3, #0]
    341c:	f3bf 8f5f 	dmb	sy
    3420:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3422:	aa01      	add	r2, sp, #4
    3424:	2380      	movs	r3, #128	; 0x80
    3426:	05db      	lsls	r3, r3, #23
    3428:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    342a:	2300      	movs	r3, #0
    342c:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    342e:	21ff      	movs	r1, #255	; 0xff
    3430:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3432:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3434:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    3436:	2196      	movs	r1, #150	; 0x96
    3438:	0189      	lsls	r1, r1, #6
    343a:	6291      	str	r1, [r2, #40]	; 0x28
	config->receiver_enable  = true;
    343c:	212c      	movs	r1, #44	; 0x2c
    343e:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    3440:	3101      	adds	r1, #1
    3442:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    3444:	3101      	adds	r1, #1
    3446:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    3448:	3101      	adds	r1, #1
    344a:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    344c:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    344e:	3105      	adds	r1, #5
    3450:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3452:	3101      	adds	r1, #1
    3454:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3456:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3458:	2100      	movs	r1, #0
    345a:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    345c:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    345e:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    3460:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    3462:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3464:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3466:	3324      	adds	r3, #36	; 0x24
    3468:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    346a:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    346c:	3b11      	subs	r3, #17
    346e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3470:	3313      	adds	r3, #19
    3472:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    3474:	3b01      	subs	r3, #1
    3476:	54d1      	strb	r1, [r2, r3]
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3478:	23c4      	movs	r3, #196	; 0xc4
    347a:	039b      	lsls	r3, r3, #14
    347c:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    347e:	2301      	movs	r3, #1
    3480:	425b      	negs	r3, r3
    3482:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3484:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3486:	4b6e      	ldr	r3, [pc, #440]	; (3640 <main+0x238>)
    3488:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    348a:	4b6e      	ldr	r3, [pc, #440]	; (3644 <main+0x23c>)
    348c:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    348e:	4d6e      	ldr	r5, [pc, #440]	; (3648 <main+0x240>)
    3490:	4b6e      	ldr	r3, [pc, #440]	; (364c <main+0x244>)
    3492:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3494:	496e      	ldr	r1, [pc, #440]	; (3650 <main+0x248>)
    3496:	4b6f      	ldr	r3, [pc, #444]	; (3654 <main+0x24c>)
    3498:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    349a:	496f      	ldr	r1, [pc, #444]	; (3658 <main+0x250>)
    349c:	4b6f      	ldr	r3, [pc, #444]	; (365c <main+0x254>)
    349e:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    34a0:	496f      	ldr	r1, [pc, #444]	; (3660 <main+0x258>)
    34a2:	0028      	movs	r0, r5
    34a4:	4b6f      	ldr	r3, [pc, #444]	; (3664 <main+0x25c>)
    34a6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    34a8:	4f6f      	ldr	r7, [pc, #444]	; (3668 <main+0x260>)
    34aa:	683b      	ldr	r3, [r7, #0]
    34ac:	6898      	ldr	r0, [r3, #8]
    34ae:	2100      	movs	r1, #0
    34b0:	4e6e      	ldr	r6, [pc, #440]	; (366c <main+0x264>)
    34b2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    34b4:	683b      	ldr	r3, [r7, #0]
    34b6:	6858      	ldr	r0, [r3, #4]
    34b8:	2100      	movs	r1, #0
    34ba:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    34bc:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    34be:	0030      	movs	r0, r6
    34c0:	4b6b      	ldr	r3, [pc, #428]	; (3670 <main+0x268>)
    34c2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34c4:	231f      	movs	r3, #31
    34c6:	4018      	ands	r0, r3
    34c8:	4084      	lsls	r4, r0
    34ca:	4b6a      	ldr	r3, [pc, #424]	; (3674 <main+0x26c>)
    34cc:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    34ce:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    34d0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    34d2:	2a00      	cmp	r2, #0
    34d4:	d1fc      	bne.n	34d0 <main+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    34d6:	6833      	ldr	r3, [r6, #0]
    34d8:	2702      	movs	r7, #2
    34da:	433b      	orrs	r3, r7
    34dc:	6033      	str	r3, [r6, #0]

	struct events_resource example_event;
	struct events_hook hook;

//!	setup GPIO
	configure_port_pins();
    34de:	4b66      	ldr	r3, [pc, #408]	; (3678 <main+0x270>)
    34e0:	4798      	blx	r3
	events_get_config_defaults(&config);
    34e2:	ac01      	add	r4, sp, #4
    34e4:	0020      	movs	r0, r4
    34e6:	4b65      	ldr	r3, [pc, #404]	; (367c <main+0x274>)
    34e8:	4798      	blx	r3
	config.generator = CONF_EVENT_GENERATOR;
    34ea:	230d      	movs	r3, #13
    34ec:	70a3      	strb	r3, [r4, #2]
	config.edge_detect = EVENTS_EDGE_DETECT_RISING;
    34ee:	2601      	movs	r6, #1
    34f0:	7026      	strb	r6, [r4, #0]
	config.path = EVENTS_PATH_SYNCHRONOUS;
    34f2:	2500      	movs	r5, #0
    34f4:	7065      	strb	r5, [r4, #1]
	config.clock_source = GCLK_GENERATOR_0;
    34f6:	70e5      	strb	r5, [r4, #3]
	events_allocate(resource, &config);
    34f8:	0021      	movs	r1, r4
    34fa:	a816      	add	r0, sp, #88	; 0x58
    34fc:	4b60      	ldr	r3, [pc, #384]	; (3680 <main+0x278>)
    34fe:	4798      	blx	r3
	events_attach_user(resource, CONF_EVENT_USER);
    3500:	2105      	movs	r1, #5
    3502:	a816      	add	r0, sp, #88	; 0x58
    3504:	4b5f      	ldr	r3, [pc, #380]	; (3684 <main+0x27c>)
    3506:	4798      	blx	r3
	events_create_hook(hook, ADC_event);
    3508:	495f      	ldr	r1, [pc, #380]	; (3688 <main+0x280>)
    350a:	a813      	add	r0, sp, #76	; 0x4c
    350c:	4b5f      	ldr	r3, [pc, #380]	; (368c <main+0x284>)
    350e:	4798      	blx	r3
	events_add_hook(resource, hook);
    3510:	a913      	add	r1, sp, #76	; 0x4c
    3512:	a816      	add	r0, sp, #88	; 0x58
    3514:	4b5e      	ldr	r3, [pc, #376]	; (3690 <main+0x288>)
    3516:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
    3518:	2101      	movs	r1, #1
    351a:	a816      	add	r0, sp, #88	; 0x58
    351c:	4b5d      	ldr	r3, [pc, #372]	; (3694 <main+0x28c>)
    351e:	4798      	blx	r3
	configure_event_channel(&example_event);
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	
	//setup RTC
	configure_rtc_calendar();
    3520:	4b5d      	ldr	r3, [pc, #372]	; (3698 <main+0x290>)
    3522:	4798      	blx	r3
	configure_rtc_callbacks();
    3524:	4b5d      	ldr	r3, [pc, #372]	; (369c <main+0x294>)
    3526:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3528:	485d      	ldr	r0, [pc, #372]	; (36a0 <main+0x298>)
    352a:	4b5e      	ldr	r3, [pc, #376]	; (36a4 <main+0x29c>)
    352c:	4798      	blx	r3

//!config temperature sensor
	configure_tsens();
    352e:	4b5e      	ldr	r3, [pc, #376]	; (36a8 <main+0x2a0>)
    3530:	4798      	blx	r3
	
//! [configure_adc]
	configure_adc();
    3532:	4b5e      	ldr	r3, [pc, #376]	; (36ac <main+0x2a4>)
    3534:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3536:	466b      	mov	r3, sp
    3538:	705d      	strb	r5, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    353a:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    353c:	70dd      	strb	r5, [r3, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    353e:	2306      	movs	r3, #6
    3540:	4699      	mov	r9, r3
    3542:	466b      	mov	r3, sp
    3544:	464a      	mov	r2, r9
    3546:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    3548:	4669      	mov	r1, sp
    354a:	2018      	movs	r0, #24
    354c:	4b58      	ldr	r3, [pc, #352]	; (36b0 <main+0x2a8>)
    354e:	4698      	mov	r8, r3
    3550:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    3552:	466b      	mov	r3, sp
    3554:	464a      	mov	r2, r9
    3556:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    3558:	4669      	mov	r1, sp
    355a:	2019      	movs	r0, #25
    355c:	47c0      	blx	r8
	config->clock_source = GCLK_GENERATOR_8;
    355e:	2308      	movs	r3, #8
    3560:	7023      	strb	r3, [r4, #0]
	config->run_in_standby = false;
    3562:	7065      	strb	r5, [r4, #1]
	config->watchdog_configuration = 0x00;
    3564:	70a5      	strb	r5, [r4, #2]
	config->transmit_pause = true;
    3566:	70e6      	strb	r6, [r4, #3]
	config->edge_filtering = true;
    3568:	7126      	strb	r6, [r4, #4]
	config->protocol_exception_handling = true;
    356a:	7166      	strb	r6, [r4, #5]
	config->automatic_retransmission = true;
    356c:	71a6      	strb	r6, [r4, #6]
	config->clock_stop_request = false;
    356e:	71e5      	strb	r5, [r4, #7]
	config->clock_stop_acknowledge = false;
    3570:	7225      	strb	r5, [r4, #8]
	config->timestamp_prescaler = 0;
    3572:	7265      	strb	r5, [r4, #9]
	config->timeout_period = 0xFFFF;
    3574:	3b09      	subs	r3, #9
    3576:	8163      	strh	r3, [r4, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    3578:	7325      	strb	r5, [r4, #12]
	config->timeout_enable = false;
    357a:	7365      	strb	r5, [r4, #13]
	config->tdc_enable = false;
    357c:	73a5      	strb	r5, [r4, #14]
	config->delay_compensation_offset = 0;
    357e:	73e5      	strb	r5, [r4, #15]
	config->delay_compensation_filter_window_length = 0;
    3580:	7425      	strb	r5, [r4, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    3582:	7467      	strb	r7, [r4, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    3584:	74a7      	strb	r7, [r4, #18]
	config->remote_frames_standard_reject = true;
    3586:	74e6      	strb	r6, [r4, #19]
	config->remote_frames_extended_reject = true;
    3588:	7526      	strb	r6, [r4, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    358a:	4b4a      	ldr	r3, [pc, #296]	; (36b4 <main+0x2ac>)
    358c:	61a3      	str	r3, [r4, #24]
	config->rx_fifo_0_overwrite = true;
    358e:	7726      	strb	r6, [r4, #28]
	config->rx_fifo_0_watermark = 0;
    3590:	7765      	strb	r5, [r4, #29]
	config->rx_fifo_1_overwrite = true;
    3592:	77a6      	strb	r6, [r4, #30]
	config->rx_fifo_1_watermark = 0;
    3594:	77e5      	strb	r5, [r4, #31]
	config->tx_queue_mode = false;
    3596:	2320      	movs	r3, #32
    3598:	54e5      	strb	r5, [r4, r3]
	config->tx_event_fifo_watermark = 0;
    359a:	3301      	adds	r3, #1
    359c:	54e5      	strb	r5, [r4, r3]
	can_init(&can_instance, CAN_MODULE, &config_can);
    359e:	4d46      	ldr	r5, [pc, #280]	; (36b8 <main+0x2b0>)
    35a0:	0022      	movs	r2, r4
    35a2:	4946      	ldr	r1, [pc, #280]	; (36bc <main+0x2b4>)
    35a4:	0028      	movs	r0, r5
    35a6:	4b46      	ldr	r3, [pc, #280]	; (36c0 <main+0x2b8>)
    35a8:	4798      	blx	r3
	can_start(&can_instance);
    35aa:	0028      	movs	r0, r5
    35ac:	4b45      	ldr	r3, [pc, #276]	; (36c4 <main+0x2bc>)
    35ae:	4798      	blx	r3
    35b0:	2280      	movs	r2, #128	; 0x80
    35b2:	0212      	lsls	r2, r2, #8
    35b4:	4b2f      	ldr	r3, [pc, #188]	; (3674 <main+0x26c>)
    35b6:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    35b8:	682a      	ldr	r2, [r5, #0]
    35ba:	6d51      	ldr	r1, [r2, #84]	; 0x54
    35bc:	23c0      	movs	r3, #192	; 0xc0
    35be:	055b      	lsls	r3, r3, #21
    35c0:	430b      	orrs	r3, r1
    35c2:	6553      	str	r3, [r2, #84]	; 0x54

//! [display_user_menu]
	//display_menu();
//! [display_user_menu]

while (events_is_busy(&example_event)) {
    35c4:	4c40      	ldr	r4, [pc, #256]	; (36c8 <main+0x2c0>)
    35c6:	a816      	add	r0, sp, #88	; 0x58
    35c8:	47a0      	blx	r4
    35ca:	2800      	cmp	r0, #0
    35cc:	d1fb      	bne.n	35c6 <main+0x1be>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    35ce:	4b3f      	ldr	r3, [pc, #252]	; (36cc <main+0x2c4>)
    35d0:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID2 = CAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
    35d2:	9b01      	ldr	r3, [sp, #4]
    35d4:	0adb      	lsrs	r3, r3, #11
    35d6:	02db      	lsls	r3, r3, #11
    35d8:	2202      	movs	r2, #2
    35da:	4313      	orrs	r3, r2
    35dc:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_0;
    35de:	9b01      	ldr	r3, [sp, #4]
    35e0:	4a3b      	ldr	r2, [pc, #236]	; (36d0 <main+0x2c8>)
    35e2:	401a      	ands	r2, r3
    35e4:	4b3b      	ldr	r3, [pc, #236]	; (36d4 <main+0x2cc>)
    35e6:	4313      	orrs	r3, r2
    35e8:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFEC =
    35ea:	9a01      	ldr	r2, [sp, #4]
    35ec:	23e0      	movs	r3, #224	; 0xe0
    35ee:	059b      	lsls	r3, r3, #22
    35f0:	4313      	orrs	r3, r2
    35f2:	9301      	str	r3, [sp, #4]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    35f4:	4c30      	ldr	r4, [pc, #192]	; (36b8 <main+0x2b0>)
    35f6:	2200      	movs	r2, #0
    35f8:	a901      	add	r1, sp, #4
    35fa:	0020      	movs	r0, r4
    35fc:	4b36      	ldr	r3, [pc, #216]	; (36d8 <main+0x2d0>)
    35fe:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    3600:	6822      	ldr	r2, [r4, #0]
    3602:	6d51      	ldr	r1, [r2, #84]	; 0x54
    3604:	2380      	movs	r3, #128	; 0x80
    3606:	031b      	lsls	r3, r3, #12
    3608:	430b      	orrs	r3, r1
    360a:	6553      	str	r3, [r2, #84]	; 0x54
	can_set_standard_filter_0();
//! [main_loop]
	while(1) {
		
		
		if (1==canMsgInFlag){
    360c:	4d33      	ldr	r5, [pc, #204]	; (36dc <main+0x2d4>)
			printf("Command Received!\r\n");
    360e:	4c34      	ldr	r4, [pc, #208]	; (36e0 <main+0x2d8>)
    3610:	4e34      	ldr	r6, [pc, #208]	; (36e4 <main+0x2dc>)
		if (1==canMsgInFlag){
    3612:	782b      	ldrb	r3, [r5, #0]
    3614:	2b01      	cmp	r3, #1
    3616:	d00a      	beq.n	362e <main+0x226>
			processCommandMsg();
		}
		if ((0 == system_busy_flag) && (1 == commandReady))
    3618:	4b33      	ldr	r3, [pc, #204]	; (36e8 <main+0x2e0>)
    361a:	781b      	ldrb	r3, [r3, #0]
    361c:	2b00      	cmp	r3, #0
    361e:	d1f8      	bne.n	3612 <main+0x20a>
    3620:	4b32      	ldr	r3, [pc, #200]	; (36ec <main+0x2e4>)
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	2b01      	cmp	r3, #1
    3626:	d1f4      	bne.n	3612 <main+0x20a>
		{
			execute_system_command();
    3628:	4b31      	ldr	r3, [pc, #196]	; (36f0 <main+0x2e8>)
    362a:	4798      	blx	r3
    362c:	e7f1      	b.n	3612 <main+0x20a>
			printf("Command Received!\r\n");
    362e:	0020      	movs	r0, r4
    3630:	47b0      	blx	r6
			processCommandMsg();
    3632:	4b30      	ldr	r3, [pc, #192]	; (36f4 <main+0x2ec>)
    3634:	4798      	blx	r3
    3636:	e7ef      	b.n	3618 <main+0x210>
    3638:	000025f9 	.word	0x000025f9
    363c:	20000014 	.word	0x20000014
    3640:	002a0003 	.word	0x002a0003
    3644:	002b0003 	.word	0x002b0003
    3648:	20000388 	.word	0x20000388
    364c:	200004a0 	.word	0x200004a0
    3650:	000029b1 	.word	0x000029b1
    3654:	2000049c 	.word	0x2000049c
    3658:	00002985 	.word	0x00002985
    365c:	20000498 	.word	0x20000498
    3660:	42001400 	.word	0x42001400
    3664:	00001979 	.word	0x00001979
    3668:	20000030 	.word	0x20000030
    366c:	00003dc1 	.word	0x00003dc1
    3670:	000018e9 	.word	0x000018e9
    3674:	e000e100 	.word	0xe000e100
    3678:	000029c9 	.word	0x000029c9
    367c:	00000e05 	.word	0x00000e05
    3680:	00000e19 	.word	0x00000e19
    3684:	00000ee5 	.word	0x00000ee5
    3688:	00002d1d 	.word	0x00002d1d
    368c:	00000cb9 	.word	0x00000cb9
    3690:	00000cc5 	.word	0x00000cc5
    3694:	00000cf9 	.word	0x00000cf9
    3698:	0000331d 	.word	0x0000331d
    369c:	000033b1 	.word	0x000033b1
    36a0:	200004a4 	.word	0x200004a4
    36a4:	00000761 	.word	0x00000761
    36a8:	000033d9 	.word	0x000033d9
    36ac:	000029f1 	.word	0x000029f1
    36b0:	000025c9 	.word	0x000025c9
    36b4:	1fffffff 	.word	0x1fffffff
    36b8:	20000384 	.word	0x20000384
    36bc:	42001c00 	.word	0x42001c00
    36c0:	00000fe1 	.word	0x00000fe1
    36c4:	000012d5 	.word	0x000012d5
    36c8:	00000ecd 	.word	0x00000ecd
    36cc:	880007ff 	.word	0x880007ff
    36d0:	f800ffff 	.word	0xf800ffff
    36d4:	045a0000 	.word	0x045a0000
    36d8:	000012ed 	.word	0x000012ed
    36dc:	20000383 	.word	0x20000383
    36e0:	00005208 	.word	0x00005208
    36e4:	00003dad 	.word	0x00003dad
    36e8:	2000043c 	.word	0x2000043c
    36ec:	200003f4 	.word	0x200003f4
    36f0:	00002de1 	.word	0x00002de1
    36f4:	00002d79 	.word	0x00002d79

000036f8 <__udivsi3>:
    36f8:	2200      	movs	r2, #0
    36fa:	0843      	lsrs	r3, r0, #1
    36fc:	428b      	cmp	r3, r1
    36fe:	d374      	bcc.n	37ea <__udivsi3+0xf2>
    3700:	0903      	lsrs	r3, r0, #4
    3702:	428b      	cmp	r3, r1
    3704:	d35f      	bcc.n	37c6 <__udivsi3+0xce>
    3706:	0a03      	lsrs	r3, r0, #8
    3708:	428b      	cmp	r3, r1
    370a:	d344      	bcc.n	3796 <__udivsi3+0x9e>
    370c:	0b03      	lsrs	r3, r0, #12
    370e:	428b      	cmp	r3, r1
    3710:	d328      	bcc.n	3764 <__udivsi3+0x6c>
    3712:	0c03      	lsrs	r3, r0, #16
    3714:	428b      	cmp	r3, r1
    3716:	d30d      	bcc.n	3734 <__udivsi3+0x3c>
    3718:	22ff      	movs	r2, #255	; 0xff
    371a:	0209      	lsls	r1, r1, #8
    371c:	ba12      	rev	r2, r2
    371e:	0c03      	lsrs	r3, r0, #16
    3720:	428b      	cmp	r3, r1
    3722:	d302      	bcc.n	372a <__udivsi3+0x32>
    3724:	1212      	asrs	r2, r2, #8
    3726:	0209      	lsls	r1, r1, #8
    3728:	d065      	beq.n	37f6 <__udivsi3+0xfe>
    372a:	0b03      	lsrs	r3, r0, #12
    372c:	428b      	cmp	r3, r1
    372e:	d319      	bcc.n	3764 <__udivsi3+0x6c>
    3730:	e000      	b.n	3734 <__udivsi3+0x3c>
    3732:	0a09      	lsrs	r1, r1, #8
    3734:	0bc3      	lsrs	r3, r0, #15
    3736:	428b      	cmp	r3, r1
    3738:	d301      	bcc.n	373e <__udivsi3+0x46>
    373a:	03cb      	lsls	r3, r1, #15
    373c:	1ac0      	subs	r0, r0, r3
    373e:	4152      	adcs	r2, r2
    3740:	0b83      	lsrs	r3, r0, #14
    3742:	428b      	cmp	r3, r1
    3744:	d301      	bcc.n	374a <__udivsi3+0x52>
    3746:	038b      	lsls	r3, r1, #14
    3748:	1ac0      	subs	r0, r0, r3
    374a:	4152      	adcs	r2, r2
    374c:	0b43      	lsrs	r3, r0, #13
    374e:	428b      	cmp	r3, r1
    3750:	d301      	bcc.n	3756 <__udivsi3+0x5e>
    3752:	034b      	lsls	r3, r1, #13
    3754:	1ac0      	subs	r0, r0, r3
    3756:	4152      	adcs	r2, r2
    3758:	0b03      	lsrs	r3, r0, #12
    375a:	428b      	cmp	r3, r1
    375c:	d301      	bcc.n	3762 <__udivsi3+0x6a>
    375e:	030b      	lsls	r3, r1, #12
    3760:	1ac0      	subs	r0, r0, r3
    3762:	4152      	adcs	r2, r2
    3764:	0ac3      	lsrs	r3, r0, #11
    3766:	428b      	cmp	r3, r1
    3768:	d301      	bcc.n	376e <__udivsi3+0x76>
    376a:	02cb      	lsls	r3, r1, #11
    376c:	1ac0      	subs	r0, r0, r3
    376e:	4152      	adcs	r2, r2
    3770:	0a83      	lsrs	r3, r0, #10
    3772:	428b      	cmp	r3, r1
    3774:	d301      	bcc.n	377a <__udivsi3+0x82>
    3776:	028b      	lsls	r3, r1, #10
    3778:	1ac0      	subs	r0, r0, r3
    377a:	4152      	adcs	r2, r2
    377c:	0a43      	lsrs	r3, r0, #9
    377e:	428b      	cmp	r3, r1
    3780:	d301      	bcc.n	3786 <__udivsi3+0x8e>
    3782:	024b      	lsls	r3, r1, #9
    3784:	1ac0      	subs	r0, r0, r3
    3786:	4152      	adcs	r2, r2
    3788:	0a03      	lsrs	r3, r0, #8
    378a:	428b      	cmp	r3, r1
    378c:	d301      	bcc.n	3792 <__udivsi3+0x9a>
    378e:	020b      	lsls	r3, r1, #8
    3790:	1ac0      	subs	r0, r0, r3
    3792:	4152      	adcs	r2, r2
    3794:	d2cd      	bcs.n	3732 <__udivsi3+0x3a>
    3796:	09c3      	lsrs	r3, r0, #7
    3798:	428b      	cmp	r3, r1
    379a:	d301      	bcc.n	37a0 <__udivsi3+0xa8>
    379c:	01cb      	lsls	r3, r1, #7
    379e:	1ac0      	subs	r0, r0, r3
    37a0:	4152      	adcs	r2, r2
    37a2:	0983      	lsrs	r3, r0, #6
    37a4:	428b      	cmp	r3, r1
    37a6:	d301      	bcc.n	37ac <__udivsi3+0xb4>
    37a8:	018b      	lsls	r3, r1, #6
    37aa:	1ac0      	subs	r0, r0, r3
    37ac:	4152      	adcs	r2, r2
    37ae:	0943      	lsrs	r3, r0, #5
    37b0:	428b      	cmp	r3, r1
    37b2:	d301      	bcc.n	37b8 <__udivsi3+0xc0>
    37b4:	014b      	lsls	r3, r1, #5
    37b6:	1ac0      	subs	r0, r0, r3
    37b8:	4152      	adcs	r2, r2
    37ba:	0903      	lsrs	r3, r0, #4
    37bc:	428b      	cmp	r3, r1
    37be:	d301      	bcc.n	37c4 <__udivsi3+0xcc>
    37c0:	010b      	lsls	r3, r1, #4
    37c2:	1ac0      	subs	r0, r0, r3
    37c4:	4152      	adcs	r2, r2
    37c6:	08c3      	lsrs	r3, r0, #3
    37c8:	428b      	cmp	r3, r1
    37ca:	d301      	bcc.n	37d0 <__udivsi3+0xd8>
    37cc:	00cb      	lsls	r3, r1, #3
    37ce:	1ac0      	subs	r0, r0, r3
    37d0:	4152      	adcs	r2, r2
    37d2:	0883      	lsrs	r3, r0, #2
    37d4:	428b      	cmp	r3, r1
    37d6:	d301      	bcc.n	37dc <__udivsi3+0xe4>
    37d8:	008b      	lsls	r3, r1, #2
    37da:	1ac0      	subs	r0, r0, r3
    37dc:	4152      	adcs	r2, r2
    37de:	0843      	lsrs	r3, r0, #1
    37e0:	428b      	cmp	r3, r1
    37e2:	d301      	bcc.n	37e8 <__udivsi3+0xf0>
    37e4:	004b      	lsls	r3, r1, #1
    37e6:	1ac0      	subs	r0, r0, r3
    37e8:	4152      	adcs	r2, r2
    37ea:	1a41      	subs	r1, r0, r1
    37ec:	d200      	bcs.n	37f0 <__udivsi3+0xf8>
    37ee:	4601      	mov	r1, r0
    37f0:	4152      	adcs	r2, r2
    37f2:	4610      	mov	r0, r2
    37f4:	4770      	bx	lr
    37f6:	e7ff      	b.n	37f8 <__udivsi3+0x100>
    37f8:	b501      	push	{r0, lr}
    37fa:	2000      	movs	r0, #0
    37fc:	f000 f8f0 	bl	39e0 <__aeabi_idiv0>
    3800:	bd02      	pop	{r1, pc}
    3802:	46c0      	nop			; (mov r8, r8)

00003804 <__aeabi_uidivmod>:
    3804:	2900      	cmp	r1, #0
    3806:	d0f7      	beq.n	37f8 <__udivsi3+0x100>
    3808:	e776      	b.n	36f8 <__udivsi3>
    380a:	4770      	bx	lr

0000380c <__divsi3>:
    380c:	4603      	mov	r3, r0
    380e:	430b      	orrs	r3, r1
    3810:	d47f      	bmi.n	3912 <__divsi3+0x106>
    3812:	2200      	movs	r2, #0
    3814:	0843      	lsrs	r3, r0, #1
    3816:	428b      	cmp	r3, r1
    3818:	d374      	bcc.n	3904 <__divsi3+0xf8>
    381a:	0903      	lsrs	r3, r0, #4
    381c:	428b      	cmp	r3, r1
    381e:	d35f      	bcc.n	38e0 <__divsi3+0xd4>
    3820:	0a03      	lsrs	r3, r0, #8
    3822:	428b      	cmp	r3, r1
    3824:	d344      	bcc.n	38b0 <__divsi3+0xa4>
    3826:	0b03      	lsrs	r3, r0, #12
    3828:	428b      	cmp	r3, r1
    382a:	d328      	bcc.n	387e <__divsi3+0x72>
    382c:	0c03      	lsrs	r3, r0, #16
    382e:	428b      	cmp	r3, r1
    3830:	d30d      	bcc.n	384e <__divsi3+0x42>
    3832:	22ff      	movs	r2, #255	; 0xff
    3834:	0209      	lsls	r1, r1, #8
    3836:	ba12      	rev	r2, r2
    3838:	0c03      	lsrs	r3, r0, #16
    383a:	428b      	cmp	r3, r1
    383c:	d302      	bcc.n	3844 <__divsi3+0x38>
    383e:	1212      	asrs	r2, r2, #8
    3840:	0209      	lsls	r1, r1, #8
    3842:	d065      	beq.n	3910 <__divsi3+0x104>
    3844:	0b03      	lsrs	r3, r0, #12
    3846:	428b      	cmp	r3, r1
    3848:	d319      	bcc.n	387e <__divsi3+0x72>
    384a:	e000      	b.n	384e <__divsi3+0x42>
    384c:	0a09      	lsrs	r1, r1, #8
    384e:	0bc3      	lsrs	r3, r0, #15
    3850:	428b      	cmp	r3, r1
    3852:	d301      	bcc.n	3858 <__divsi3+0x4c>
    3854:	03cb      	lsls	r3, r1, #15
    3856:	1ac0      	subs	r0, r0, r3
    3858:	4152      	adcs	r2, r2
    385a:	0b83      	lsrs	r3, r0, #14
    385c:	428b      	cmp	r3, r1
    385e:	d301      	bcc.n	3864 <__divsi3+0x58>
    3860:	038b      	lsls	r3, r1, #14
    3862:	1ac0      	subs	r0, r0, r3
    3864:	4152      	adcs	r2, r2
    3866:	0b43      	lsrs	r3, r0, #13
    3868:	428b      	cmp	r3, r1
    386a:	d301      	bcc.n	3870 <__divsi3+0x64>
    386c:	034b      	lsls	r3, r1, #13
    386e:	1ac0      	subs	r0, r0, r3
    3870:	4152      	adcs	r2, r2
    3872:	0b03      	lsrs	r3, r0, #12
    3874:	428b      	cmp	r3, r1
    3876:	d301      	bcc.n	387c <__divsi3+0x70>
    3878:	030b      	lsls	r3, r1, #12
    387a:	1ac0      	subs	r0, r0, r3
    387c:	4152      	adcs	r2, r2
    387e:	0ac3      	lsrs	r3, r0, #11
    3880:	428b      	cmp	r3, r1
    3882:	d301      	bcc.n	3888 <__divsi3+0x7c>
    3884:	02cb      	lsls	r3, r1, #11
    3886:	1ac0      	subs	r0, r0, r3
    3888:	4152      	adcs	r2, r2
    388a:	0a83      	lsrs	r3, r0, #10
    388c:	428b      	cmp	r3, r1
    388e:	d301      	bcc.n	3894 <__divsi3+0x88>
    3890:	028b      	lsls	r3, r1, #10
    3892:	1ac0      	subs	r0, r0, r3
    3894:	4152      	adcs	r2, r2
    3896:	0a43      	lsrs	r3, r0, #9
    3898:	428b      	cmp	r3, r1
    389a:	d301      	bcc.n	38a0 <__divsi3+0x94>
    389c:	024b      	lsls	r3, r1, #9
    389e:	1ac0      	subs	r0, r0, r3
    38a0:	4152      	adcs	r2, r2
    38a2:	0a03      	lsrs	r3, r0, #8
    38a4:	428b      	cmp	r3, r1
    38a6:	d301      	bcc.n	38ac <__divsi3+0xa0>
    38a8:	020b      	lsls	r3, r1, #8
    38aa:	1ac0      	subs	r0, r0, r3
    38ac:	4152      	adcs	r2, r2
    38ae:	d2cd      	bcs.n	384c <__divsi3+0x40>
    38b0:	09c3      	lsrs	r3, r0, #7
    38b2:	428b      	cmp	r3, r1
    38b4:	d301      	bcc.n	38ba <__divsi3+0xae>
    38b6:	01cb      	lsls	r3, r1, #7
    38b8:	1ac0      	subs	r0, r0, r3
    38ba:	4152      	adcs	r2, r2
    38bc:	0983      	lsrs	r3, r0, #6
    38be:	428b      	cmp	r3, r1
    38c0:	d301      	bcc.n	38c6 <__divsi3+0xba>
    38c2:	018b      	lsls	r3, r1, #6
    38c4:	1ac0      	subs	r0, r0, r3
    38c6:	4152      	adcs	r2, r2
    38c8:	0943      	lsrs	r3, r0, #5
    38ca:	428b      	cmp	r3, r1
    38cc:	d301      	bcc.n	38d2 <__divsi3+0xc6>
    38ce:	014b      	lsls	r3, r1, #5
    38d0:	1ac0      	subs	r0, r0, r3
    38d2:	4152      	adcs	r2, r2
    38d4:	0903      	lsrs	r3, r0, #4
    38d6:	428b      	cmp	r3, r1
    38d8:	d301      	bcc.n	38de <__divsi3+0xd2>
    38da:	010b      	lsls	r3, r1, #4
    38dc:	1ac0      	subs	r0, r0, r3
    38de:	4152      	adcs	r2, r2
    38e0:	08c3      	lsrs	r3, r0, #3
    38e2:	428b      	cmp	r3, r1
    38e4:	d301      	bcc.n	38ea <__divsi3+0xde>
    38e6:	00cb      	lsls	r3, r1, #3
    38e8:	1ac0      	subs	r0, r0, r3
    38ea:	4152      	adcs	r2, r2
    38ec:	0883      	lsrs	r3, r0, #2
    38ee:	428b      	cmp	r3, r1
    38f0:	d301      	bcc.n	38f6 <__divsi3+0xea>
    38f2:	008b      	lsls	r3, r1, #2
    38f4:	1ac0      	subs	r0, r0, r3
    38f6:	4152      	adcs	r2, r2
    38f8:	0843      	lsrs	r3, r0, #1
    38fa:	428b      	cmp	r3, r1
    38fc:	d301      	bcc.n	3902 <__divsi3+0xf6>
    38fe:	004b      	lsls	r3, r1, #1
    3900:	1ac0      	subs	r0, r0, r3
    3902:	4152      	adcs	r2, r2
    3904:	1a41      	subs	r1, r0, r1
    3906:	d200      	bcs.n	390a <__divsi3+0xfe>
    3908:	4601      	mov	r1, r0
    390a:	4152      	adcs	r2, r2
    390c:	4610      	mov	r0, r2
    390e:	4770      	bx	lr
    3910:	e05d      	b.n	39ce <__divsi3+0x1c2>
    3912:	0fca      	lsrs	r2, r1, #31
    3914:	d000      	beq.n	3918 <__divsi3+0x10c>
    3916:	4249      	negs	r1, r1
    3918:	1003      	asrs	r3, r0, #32
    391a:	d300      	bcc.n	391e <__divsi3+0x112>
    391c:	4240      	negs	r0, r0
    391e:	4053      	eors	r3, r2
    3920:	2200      	movs	r2, #0
    3922:	469c      	mov	ip, r3
    3924:	0903      	lsrs	r3, r0, #4
    3926:	428b      	cmp	r3, r1
    3928:	d32d      	bcc.n	3986 <__divsi3+0x17a>
    392a:	0a03      	lsrs	r3, r0, #8
    392c:	428b      	cmp	r3, r1
    392e:	d312      	bcc.n	3956 <__divsi3+0x14a>
    3930:	22fc      	movs	r2, #252	; 0xfc
    3932:	0189      	lsls	r1, r1, #6
    3934:	ba12      	rev	r2, r2
    3936:	0a03      	lsrs	r3, r0, #8
    3938:	428b      	cmp	r3, r1
    393a:	d30c      	bcc.n	3956 <__divsi3+0x14a>
    393c:	0189      	lsls	r1, r1, #6
    393e:	1192      	asrs	r2, r2, #6
    3940:	428b      	cmp	r3, r1
    3942:	d308      	bcc.n	3956 <__divsi3+0x14a>
    3944:	0189      	lsls	r1, r1, #6
    3946:	1192      	asrs	r2, r2, #6
    3948:	428b      	cmp	r3, r1
    394a:	d304      	bcc.n	3956 <__divsi3+0x14a>
    394c:	0189      	lsls	r1, r1, #6
    394e:	d03a      	beq.n	39c6 <__divsi3+0x1ba>
    3950:	1192      	asrs	r2, r2, #6
    3952:	e000      	b.n	3956 <__divsi3+0x14a>
    3954:	0989      	lsrs	r1, r1, #6
    3956:	09c3      	lsrs	r3, r0, #7
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__divsi3+0x154>
    395c:	01cb      	lsls	r3, r1, #7
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	0983      	lsrs	r3, r0, #6
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__divsi3+0x160>
    3968:	018b      	lsls	r3, r1, #6
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	0943      	lsrs	r3, r0, #5
    3970:	428b      	cmp	r3, r1
    3972:	d301      	bcc.n	3978 <__divsi3+0x16c>
    3974:	014b      	lsls	r3, r1, #5
    3976:	1ac0      	subs	r0, r0, r3
    3978:	4152      	adcs	r2, r2
    397a:	0903      	lsrs	r3, r0, #4
    397c:	428b      	cmp	r3, r1
    397e:	d301      	bcc.n	3984 <__divsi3+0x178>
    3980:	010b      	lsls	r3, r1, #4
    3982:	1ac0      	subs	r0, r0, r3
    3984:	4152      	adcs	r2, r2
    3986:	08c3      	lsrs	r3, r0, #3
    3988:	428b      	cmp	r3, r1
    398a:	d301      	bcc.n	3990 <__divsi3+0x184>
    398c:	00cb      	lsls	r3, r1, #3
    398e:	1ac0      	subs	r0, r0, r3
    3990:	4152      	adcs	r2, r2
    3992:	0883      	lsrs	r3, r0, #2
    3994:	428b      	cmp	r3, r1
    3996:	d301      	bcc.n	399c <__divsi3+0x190>
    3998:	008b      	lsls	r3, r1, #2
    399a:	1ac0      	subs	r0, r0, r3
    399c:	4152      	adcs	r2, r2
    399e:	d2d9      	bcs.n	3954 <__divsi3+0x148>
    39a0:	0843      	lsrs	r3, r0, #1
    39a2:	428b      	cmp	r3, r1
    39a4:	d301      	bcc.n	39aa <__divsi3+0x19e>
    39a6:	004b      	lsls	r3, r1, #1
    39a8:	1ac0      	subs	r0, r0, r3
    39aa:	4152      	adcs	r2, r2
    39ac:	1a41      	subs	r1, r0, r1
    39ae:	d200      	bcs.n	39b2 <__divsi3+0x1a6>
    39b0:	4601      	mov	r1, r0
    39b2:	4663      	mov	r3, ip
    39b4:	4152      	adcs	r2, r2
    39b6:	105b      	asrs	r3, r3, #1
    39b8:	4610      	mov	r0, r2
    39ba:	d301      	bcc.n	39c0 <__divsi3+0x1b4>
    39bc:	4240      	negs	r0, r0
    39be:	2b00      	cmp	r3, #0
    39c0:	d500      	bpl.n	39c4 <__divsi3+0x1b8>
    39c2:	4249      	negs	r1, r1
    39c4:	4770      	bx	lr
    39c6:	4663      	mov	r3, ip
    39c8:	105b      	asrs	r3, r3, #1
    39ca:	d300      	bcc.n	39ce <__divsi3+0x1c2>
    39cc:	4240      	negs	r0, r0
    39ce:	b501      	push	{r0, lr}
    39d0:	2000      	movs	r0, #0
    39d2:	f000 f805 	bl	39e0 <__aeabi_idiv0>
    39d6:	bd02      	pop	{r1, pc}

000039d8 <__aeabi_idivmod>:
    39d8:	2900      	cmp	r1, #0
    39da:	d0f8      	beq.n	39ce <__divsi3+0x1c2>
    39dc:	e716      	b.n	380c <__divsi3>
    39de:	4770      	bx	lr

000039e0 <__aeabi_idiv0>:
    39e0:	4770      	bx	lr
    39e2:	46c0      	nop			; (mov r8, r8)

000039e4 <__aeabi_uldivmod>:
    39e4:	2b00      	cmp	r3, #0
    39e6:	d111      	bne.n	3a0c <__aeabi_uldivmod+0x28>
    39e8:	2a00      	cmp	r2, #0
    39ea:	d10f      	bne.n	3a0c <__aeabi_uldivmod+0x28>
    39ec:	2900      	cmp	r1, #0
    39ee:	d100      	bne.n	39f2 <__aeabi_uldivmod+0xe>
    39f0:	2800      	cmp	r0, #0
    39f2:	d002      	beq.n	39fa <__aeabi_uldivmod+0x16>
    39f4:	2100      	movs	r1, #0
    39f6:	43c9      	mvns	r1, r1
    39f8:	1c08      	adds	r0, r1, #0
    39fa:	b407      	push	{r0, r1, r2}
    39fc:	4802      	ldr	r0, [pc, #8]	; (3a08 <__aeabi_uldivmod+0x24>)
    39fe:	a102      	add	r1, pc, #8	; (adr r1, 3a08 <__aeabi_uldivmod+0x24>)
    3a00:	1840      	adds	r0, r0, r1
    3a02:	9002      	str	r0, [sp, #8]
    3a04:	bd03      	pop	{r0, r1, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	ffffffd9 	.word	0xffffffd9
    3a0c:	b403      	push	{r0, r1}
    3a0e:	4668      	mov	r0, sp
    3a10:	b501      	push	{r0, lr}
    3a12:	9802      	ldr	r0, [sp, #8]
    3a14:	f000 f830 	bl	3a78 <__udivmoddi4>
    3a18:	9b01      	ldr	r3, [sp, #4]
    3a1a:	469e      	mov	lr, r3
    3a1c:	b002      	add	sp, #8
    3a1e:	bc0c      	pop	{r2, r3}
    3a20:	4770      	bx	lr
    3a22:	46c0      	nop			; (mov r8, r8)

00003a24 <__aeabi_lmul>:
    3a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a26:	46ce      	mov	lr, r9
    3a28:	4647      	mov	r7, r8
    3a2a:	0415      	lsls	r5, r2, #16
    3a2c:	0c2d      	lsrs	r5, r5, #16
    3a2e:	002e      	movs	r6, r5
    3a30:	b580      	push	{r7, lr}
    3a32:	0407      	lsls	r7, r0, #16
    3a34:	0c14      	lsrs	r4, r2, #16
    3a36:	0c3f      	lsrs	r7, r7, #16
    3a38:	4699      	mov	r9, r3
    3a3a:	0c03      	lsrs	r3, r0, #16
    3a3c:	437e      	muls	r6, r7
    3a3e:	435d      	muls	r5, r3
    3a40:	4367      	muls	r7, r4
    3a42:	4363      	muls	r3, r4
    3a44:	197f      	adds	r7, r7, r5
    3a46:	0c34      	lsrs	r4, r6, #16
    3a48:	19e4      	adds	r4, r4, r7
    3a4a:	469c      	mov	ip, r3
    3a4c:	42a5      	cmp	r5, r4
    3a4e:	d903      	bls.n	3a58 <__aeabi_lmul+0x34>
    3a50:	2380      	movs	r3, #128	; 0x80
    3a52:	025b      	lsls	r3, r3, #9
    3a54:	4698      	mov	r8, r3
    3a56:	44c4      	add	ip, r8
    3a58:	464b      	mov	r3, r9
    3a5a:	4351      	muls	r1, r2
    3a5c:	4343      	muls	r3, r0
    3a5e:	0436      	lsls	r6, r6, #16
    3a60:	0c36      	lsrs	r6, r6, #16
    3a62:	0c25      	lsrs	r5, r4, #16
    3a64:	0424      	lsls	r4, r4, #16
    3a66:	4465      	add	r5, ip
    3a68:	19a4      	adds	r4, r4, r6
    3a6a:	1859      	adds	r1, r3, r1
    3a6c:	1949      	adds	r1, r1, r5
    3a6e:	0020      	movs	r0, r4
    3a70:	bc0c      	pop	{r2, r3}
    3a72:	4690      	mov	r8, r2
    3a74:	4699      	mov	r9, r3
    3a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a78 <__udivmoddi4>:
    3a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a7a:	4657      	mov	r7, sl
    3a7c:	464e      	mov	r6, r9
    3a7e:	4645      	mov	r5, r8
    3a80:	46de      	mov	lr, fp
    3a82:	b5e0      	push	{r5, r6, r7, lr}
    3a84:	0004      	movs	r4, r0
    3a86:	b083      	sub	sp, #12
    3a88:	000d      	movs	r5, r1
    3a8a:	4692      	mov	sl, r2
    3a8c:	4699      	mov	r9, r3
    3a8e:	428b      	cmp	r3, r1
    3a90:	d82f      	bhi.n	3af2 <__udivmoddi4+0x7a>
    3a92:	d02c      	beq.n	3aee <__udivmoddi4+0x76>
    3a94:	4649      	mov	r1, r9
    3a96:	4650      	mov	r0, sl
    3a98:	f000 f8ae 	bl	3bf8 <__clzdi2>
    3a9c:	0029      	movs	r1, r5
    3a9e:	0006      	movs	r6, r0
    3aa0:	0020      	movs	r0, r4
    3aa2:	f000 f8a9 	bl	3bf8 <__clzdi2>
    3aa6:	1a33      	subs	r3, r6, r0
    3aa8:	4698      	mov	r8, r3
    3aaa:	3b20      	subs	r3, #32
    3aac:	469b      	mov	fp, r3
    3aae:	d500      	bpl.n	3ab2 <__udivmoddi4+0x3a>
    3ab0:	e074      	b.n	3b9c <__udivmoddi4+0x124>
    3ab2:	4653      	mov	r3, sl
    3ab4:	465a      	mov	r2, fp
    3ab6:	4093      	lsls	r3, r2
    3ab8:	001f      	movs	r7, r3
    3aba:	4653      	mov	r3, sl
    3abc:	4642      	mov	r2, r8
    3abe:	4093      	lsls	r3, r2
    3ac0:	001e      	movs	r6, r3
    3ac2:	42af      	cmp	r7, r5
    3ac4:	d829      	bhi.n	3b1a <__udivmoddi4+0xa2>
    3ac6:	d026      	beq.n	3b16 <__udivmoddi4+0x9e>
    3ac8:	465b      	mov	r3, fp
    3aca:	1ba4      	subs	r4, r4, r6
    3acc:	41bd      	sbcs	r5, r7
    3ace:	2b00      	cmp	r3, #0
    3ad0:	da00      	bge.n	3ad4 <__udivmoddi4+0x5c>
    3ad2:	e079      	b.n	3bc8 <__udivmoddi4+0x150>
    3ad4:	2200      	movs	r2, #0
    3ad6:	2300      	movs	r3, #0
    3ad8:	9200      	str	r2, [sp, #0]
    3ada:	9301      	str	r3, [sp, #4]
    3adc:	2301      	movs	r3, #1
    3ade:	465a      	mov	r2, fp
    3ae0:	4093      	lsls	r3, r2
    3ae2:	9301      	str	r3, [sp, #4]
    3ae4:	2301      	movs	r3, #1
    3ae6:	4642      	mov	r2, r8
    3ae8:	4093      	lsls	r3, r2
    3aea:	9300      	str	r3, [sp, #0]
    3aec:	e019      	b.n	3b22 <__udivmoddi4+0xaa>
    3aee:	4282      	cmp	r2, r0
    3af0:	d9d0      	bls.n	3a94 <__udivmoddi4+0x1c>
    3af2:	2200      	movs	r2, #0
    3af4:	2300      	movs	r3, #0
    3af6:	9200      	str	r2, [sp, #0]
    3af8:	9301      	str	r3, [sp, #4]
    3afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3afc:	2b00      	cmp	r3, #0
    3afe:	d001      	beq.n	3b04 <__udivmoddi4+0x8c>
    3b00:	601c      	str	r4, [r3, #0]
    3b02:	605d      	str	r5, [r3, #4]
    3b04:	9800      	ldr	r0, [sp, #0]
    3b06:	9901      	ldr	r1, [sp, #4]
    3b08:	b003      	add	sp, #12
    3b0a:	bc3c      	pop	{r2, r3, r4, r5}
    3b0c:	4690      	mov	r8, r2
    3b0e:	4699      	mov	r9, r3
    3b10:	46a2      	mov	sl, r4
    3b12:	46ab      	mov	fp, r5
    3b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b16:	42a3      	cmp	r3, r4
    3b18:	d9d6      	bls.n	3ac8 <__udivmoddi4+0x50>
    3b1a:	2200      	movs	r2, #0
    3b1c:	2300      	movs	r3, #0
    3b1e:	9200      	str	r2, [sp, #0]
    3b20:	9301      	str	r3, [sp, #4]
    3b22:	4643      	mov	r3, r8
    3b24:	2b00      	cmp	r3, #0
    3b26:	d0e8      	beq.n	3afa <__udivmoddi4+0x82>
    3b28:	07fb      	lsls	r3, r7, #31
    3b2a:	0872      	lsrs	r2, r6, #1
    3b2c:	431a      	orrs	r2, r3
    3b2e:	4646      	mov	r6, r8
    3b30:	087b      	lsrs	r3, r7, #1
    3b32:	e00e      	b.n	3b52 <__udivmoddi4+0xda>
    3b34:	42ab      	cmp	r3, r5
    3b36:	d101      	bne.n	3b3c <__udivmoddi4+0xc4>
    3b38:	42a2      	cmp	r2, r4
    3b3a:	d80c      	bhi.n	3b56 <__udivmoddi4+0xde>
    3b3c:	1aa4      	subs	r4, r4, r2
    3b3e:	419d      	sbcs	r5, r3
    3b40:	2001      	movs	r0, #1
    3b42:	1924      	adds	r4, r4, r4
    3b44:	416d      	adcs	r5, r5
    3b46:	2100      	movs	r1, #0
    3b48:	3e01      	subs	r6, #1
    3b4a:	1824      	adds	r4, r4, r0
    3b4c:	414d      	adcs	r5, r1
    3b4e:	2e00      	cmp	r6, #0
    3b50:	d006      	beq.n	3b60 <__udivmoddi4+0xe8>
    3b52:	42ab      	cmp	r3, r5
    3b54:	d9ee      	bls.n	3b34 <__udivmoddi4+0xbc>
    3b56:	3e01      	subs	r6, #1
    3b58:	1924      	adds	r4, r4, r4
    3b5a:	416d      	adcs	r5, r5
    3b5c:	2e00      	cmp	r6, #0
    3b5e:	d1f8      	bne.n	3b52 <__udivmoddi4+0xda>
    3b60:	465b      	mov	r3, fp
    3b62:	9800      	ldr	r0, [sp, #0]
    3b64:	9901      	ldr	r1, [sp, #4]
    3b66:	1900      	adds	r0, r0, r4
    3b68:	4169      	adcs	r1, r5
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	db22      	blt.n	3bb4 <__udivmoddi4+0x13c>
    3b6e:	002b      	movs	r3, r5
    3b70:	465a      	mov	r2, fp
    3b72:	40d3      	lsrs	r3, r2
    3b74:	002a      	movs	r2, r5
    3b76:	4644      	mov	r4, r8
    3b78:	40e2      	lsrs	r2, r4
    3b7a:	001c      	movs	r4, r3
    3b7c:	465b      	mov	r3, fp
    3b7e:	0015      	movs	r5, r2
    3b80:	2b00      	cmp	r3, #0
    3b82:	db2c      	blt.n	3bde <__udivmoddi4+0x166>
    3b84:	0026      	movs	r6, r4
    3b86:	409e      	lsls	r6, r3
    3b88:	0033      	movs	r3, r6
    3b8a:	0026      	movs	r6, r4
    3b8c:	4647      	mov	r7, r8
    3b8e:	40be      	lsls	r6, r7
    3b90:	0032      	movs	r2, r6
    3b92:	1a80      	subs	r0, r0, r2
    3b94:	4199      	sbcs	r1, r3
    3b96:	9000      	str	r0, [sp, #0]
    3b98:	9101      	str	r1, [sp, #4]
    3b9a:	e7ae      	b.n	3afa <__udivmoddi4+0x82>
    3b9c:	4642      	mov	r2, r8
    3b9e:	2320      	movs	r3, #32
    3ba0:	1a9b      	subs	r3, r3, r2
    3ba2:	4652      	mov	r2, sl
    3ba4:	40da      	lsrs	r2, r3
    3ba6:	4641      	mov	r1, r8
    3ba8:	0013      	movs	r3, r2
    3baa:	464a      	mov	r2, r9
    3bac:	408a      	lsls	r2, r1
    3bae:	0017      	movs	r7, r2
    3bb0:	431f      	orrs	r7, r3
    3bb2:	e782      	b.n	3aba <__udivmoddi4+0x42>
    3bb4:	4642      	mov	r2, r8
    3bb6:	2320      	movs	r3, #32
    3bb8:	1a9b      	subs	r3, r3, r2
    3bba:	002a      	movs	r2, r5
    3bbc:	4646      	mov	r6, r8
    3bbe:	409a      	lsls	r2, r3
    3bc0:	0023      	movs	r3, r4
    3bc2:	40f3      	lsrs	r3, r6
    3bc4:	4313      	orrs	r3, r2
    3bc6:	e7d5      	b.n	3b74 <__udivmoddi4+0xfc>
    3bc8:	4642      	mov	r2, r8
    3bca:	2320      	movs	r3, #32
    3bcc:	2100      	movs	r1, #0
    3bce:	1a9b      	subs	r3, r3, r2
    3bd0:	2200      	movs	r2, #0
    3bd2:	9100      	str	r1, [sp, #0]
    3bd4:	9201      	str	r2, [sp, #4]
    3bd6:	2201      	movs	r2, #1
    3bd8:	40da      	lsrs	r2, r3
    3bda:	9201      	str	r2, [sp, #4]
    3bdc:	e782      	b.n	3ae4 <__udivmoddi4+0x6c>
    3bde:	4642      	mov	r2, r8
    3be0:	2320      	movs	r3, #32
    3be2:	0026      	movs	r6, r4
    3be4:	1a9b      	subs	r3, r3, r2
    3be6:	40de      	lsrs	r6, r3
    3be8:	002f      	movs	r7, r5
    3bea:	46b4      	mov	ip, r6
    3bec:	4097      	lsls	r7, r2
    3bee:	4666      	mov	r6, ip
    3bf0:	003b      	movs	r3, r7
    3bf2:	4333      	orrs	r3, r6
    3bf4:	e7c9      	b.n	3b8a <__udivmoddi4+0x112>
    3bf6:	46c0      	nop			; (mov r8, r8)

00003bf8 <__clzdi2>:
    3bf8:	b510      	push	{r4, lr}
    3bfa:	2900      	cmp	r1, #0
    3bfc:	d103      	bne.n	3c06 <__clzdi2+0xe>
    3bfe:	f000 f807 	bl	3c10 <__clzsi2>
    3c02:	3020      	adds	r0, #32
    3c04:	e002      	b.n	3c0c <__clzdi2+0x14>
    3c06:	1c08      	adds	r0, r1, #0
    3c08:	f000 f802 	bl	3c10 <__clzsi2>
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)

00003c10 <__clzsi2>:
    3c10:	211c      	movs	r1, #28
    3c12:	2301      	movs	r3, #1
    3c14:	041b      	lsls	r3, r3, #16
    3c16:	4298      	cmp	r0, r3
    3c18:	d301      	bcc.n	3c1e <__clzsi2+0xe>
    3c1a:	0c00      	lsrs	r0, r0, #16
    3c1c:	3910      	subs	r1, #16
    3c1e:	0a1b      	lsrs	r3, r3, #8
    3c20:	4298      	cmp	r0, r3
    3c22:	d301      	bcc.n	3c28 <__clzsi2+0x18>
    3c24:	0a00      	lsrs	r0, r0, #8
    3c26:	3908      	subs	r1, #8
    3c28:	091b      	lsrs	r3, r3, #4
    3c2a:	4298      	cmp	r0, r3
    3c2c:	d301      	bcc.n	3c32 <__clzsi2+0x22>
    3c2e:	0900      	lsrs	r0, r0, #4
    3c30:	3904      	subs	r1, #4
    3c32:	a202      	add	r2, pc, #8	; (adr r2, 3c3c <__clzsi2+0x2c>)
    3c34:	5c10      	ldrb	r0, [r2, r0]
    3c36:	1840      	adds	r0, r0, r1
    3c38:	4770      	bx	lr
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	02020304 	.word	0x02020304
    3c40:	01010101 	.word	0x01010101
	...

00003c4c <__libc_init_array>:
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	2600      	movs	r6, #0
    3c50:	4d0c      	ldr	r5, [pc, #48]	; (3c84 <__libc_init_array+0x38>)
    3c52:	4c0d      	ldr	r4, [pc, #52]	; (3c88 <__libc_init_array+0x3c>)
    3c54:	1b64      	subs	r4, r4, r5
    3c56:	10a4      	asrs	r4, r4, #2
    3c58:	42a6      	cmp	r6, r4
    3c5a:	d109      	bne.n	3c70 <__libc_init_array+0x24>
    3c5c:	2600      	movs	r6, #0
    3c5e:	f001 fb87 	bl	5370 <_init>
    3c62:	4d0a      	ldr	r5, [pc, #40]	; (3c8c <__libc_init_array+0x40>)
    3c64:	4c0a      	ldr	r4, [pc, #40]	; (3c90 <__libc_init_array+0x44>)
    3c66:	1b64      	subs	r4, r4, r5
    3c68:	10a4      	asrs	r4, r4, #2
    3c6a:	42a6      	cmp	r6, r4
    3c6c:	d105      	bne.n	3c7a <__libc_init_array+0x2e>
    3c6e:	bd70      	pop	{r4, r5, r6, pc}
    3c70:	00b3      	lsls	r3, r6, #2
    3c72:	58eb      	ldr	r3, [r5, r3]
    3c74:	4798      	blx	r3
    3c76:	3601      	adds	r6, #1
    3c78:	e7ee      	b.n	3c58 <__libc_init_array+0xc>
    3c7a:	00b3      	lsls	r3, r6, #2
    3c7c:	58eb      	ldr	r3, [r5, r3]
    3c7e:	4798      	blx	r3
    3c80:	3601      	adds	r6, #1
    3c82:	e7f2      	b.n	3c6a <__libc_init_array+0x1e>
    3c84:	0000537c 	.word	0x0000537c
    3c88:	0000537c 	.word	0x0000537c
    3c8c:	0000537c 	.word	0x0000537c
    3c90:	00005380 	.word	0x00005380

00003c94 <memcpy>:
    3c94:	2300      	movs	r3, #0
    3c96:	b510      	push	{r4, lr}
    3c98:	429a      	cmp	r2, r3
    3c9a:	d100      	bne.n	3c9e <memcpy+0xa>
    3c9c:	bd10      	pop	{r4, pc}
    3c9e:	5ccc      	ldrb	r4, [r1, r3]
    3ca0:	54c4      	strb	r4, [r0, r3]
    3ca2:	3301      	adds	r3, #1
    3ca4:	e7f8      	b.n	3c98 <memcpy+0x4>

00003ca6 <memset>:
    3ca6:	0003      	movs	r3, r0
    3ca8:	1882      	adds	r2, r0, r2
    3caa:	4293      	cmp	r3, r2
    3cac:	d100      	bne.n	3cb0 <memset+0xa>
    3cae:	4770      	bx	lr
    3cb0:	7019      	strb	r1, [r3, #0]
    3cb2:	3301      	adds	r3, #1
    3cb4:	e7f9      	b.n	3caa <memset+0x4>
	...

00003cb8 <iprintf>:
    3cb8:	b40f      	push	{r0, r1, r2, r3}
    3cba:	4b0b      	ldr	r3, [pc, #44]	; (3ce8 <iprintf+0x30>)
    3cbc:	b513      	push	{r0, r1, r4, lr}
    3cbe:	681c      	ldr	r4, [r3, #0]
    3cc0:	2c00      	cmp	r4, #0
    3cc2:	d005      	beq.n	3cd0 <iprintf+0x18>
    3cc4:	69a3      	ldr	r3, [r4, #24]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d102      	bne.n	3cd0 <iprintf+0x18>
    3cca:	0020      	movs	r0, r4
    3ccc:	f000 faf2 	bl	42b4 <__sinit>
    3cd0:	ab05      	add	r3, sp, #20
    3cd2:	9a04      	ldr	r2, [sp, #16]
    3cd4:	68a1      	ldr	r1, [r4, #8]
    3cd6:	0020      	movs	r0, r4
    3cd8:	9301      	str	r3, [sp, #4]
    3cda:	f000 fcc1 	bl	4660 <_vfiprintf_r>
    3cde:	bc16      	pop	{r1, r2, r4}
    3ce0:	bc08      	pop	{r3}
    3ce2:	b004      	add	sp, #16
    3ce4:	4718      	bx	r3
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	20000030 	.word	0x20000030

00003cec <_puts_r>:
    3cec:	b570      	push	{r4, r5, r6, lr}
    3cee:	0005      	movs	r5, r0
    3cf0:	000e      	movs	r6, r1
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d004      	beq.n	3d00 <_puts_r+0x14>
    3cf6:	6983      	ldr	r3, [r0, #24]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d101      	bne.n	3d00 <_puts_r+0x14>
    3cfc:	f000 fada 	bl	42b4 <__sinit>
    3d00:	69ab      	ldr	r3, [r5, #24]
    3d02:	68ac      	ldr	r4, [r5, #8]
    3d04:	2b00      	cmp	r3, #0
    3d06:	d102      	bne.n	3d0e <_puts_r+0x22>
    3d08:	0028      	movs	r0, r5
    3d0a:	f000 fad3 	bl	42b4 <__sinit>
    3d0e:	4b24      	ldr	r3, [pc, #144]	; (3da0 <_puts_r+0xb4>)
    3d10:	429c      	cmp	r4, r3
    3d12:	d10f      	bne.n	3d34 <_puts_r+0x48>
    3d14:	686c      	ldr	r4, [r5, #4]
    3d16:	89a3      	ldrh	r3, [r4, #12]
    3d18:	071b      	lsls	r3, r3, #28
    3d1a:	d502      	bpl.n	3d22 <_puts_r+0x36>
    3d1c:	6923      	ldr	r3, [r4, #16]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d120      	bne.n	3d64 <_puts_r+0x78>
    3d22:	0021      	movs	r1, r4
    3d24:	0028      	movs	r0, r5
    3d26:	f000 f957 	bl	3fd8 <__swsetup_r>
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d01a      	beq.n	3d64 <_puts_r+0x78>
    3d2e:	2001      	movs	r0, #1
    3d30:	4240      	negs	r0, r0
    3d32:	bd70      	pop	{r4, r5, r6, pc}
    3d34:	4b1b      	ldr	r3, [pc, #108]	; (3da4 <_puts_r+0xb8>)
    3d36:	429c      	cmp	r4, r3
    3d38:	d101      	bne.n	3d3e <_puts_r+0x52>
    3d3a:	68ac      	ldr	r4, [r5, #8]
    3d3c:	e7eb      	b.n	3d16 <_puts_r+0x2a>
    3d3e:	4b1a      	ldr	r3, [pc, #104]	; (3da8 <_puts_r+0xbc>)
    3d40:	429c      	cmp	r4, r3
    3d42:	d1e8      	bne.n	3d16 <_puts_r+0x2a>
    3d44:	68ec      	ldr	r4, [r5, #12]
    3d46:	e7e6      	b.n	3d16 <_puts_r+0x2a>
    3d48:	3b01      	subs	r3, #1
    3d4a:	3601      	adds	r6, #1
    3d4c:	60a3      	str	r3, [r4, #8]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	da04      	bge.n	3d5c <_puts_r+0x70>
    3d52:	69a2      	ldr	r2, [r4, #24]
    3d54:	4293      	cmp	r3, r2
    3d56:	db16      	blt.n	3d86 <_puts_r+0x9a>
    3d58:	290a      	cmp	r1, #10
    3d5a:	d014      	beq.n	3d86 <_puts_r+0x9a>
    3d5c:	6823      	ldr	r3, [r4, #0]
    3d5e:	1c5a      	adds	r2, r3, #1
    3d60:	6022      	str	r2, [r4, #0]
    3d62:	7019      	strb	r1, [r3, #0]
    3d64:	7831      	ldrb	r1, [r6, #0]
    3d66:	68a3      	ldr	r3, [r4, #8]
    3d68:	2900      	cmp	r1, #0
    3d6a:	d1ed      	bne.n	3d48 <_puts_r+0x5c>
    3d6c:	3b01      	subs	r3, #1
    3d6e:	60a3      	str	r3, [r4, #8]
    3d70:	2b00      	cmp	r3, #0
    3d72:	da0f      	bge.n	3d94 <_puts_r+0xa8>
    3d74:	0022      	movs	r2, r4
    3d76:	310a      	adds	r1, #10
    3d78:	0028      	movs	r0, r5
    3d7a:	f000 f8d7 	bl	3f2c <__swbuf_r>
    3d7e:	1c43      	adds	r3, r0, #1
    3d80:	d0d5      	beq.n	3d2e <_puts_r+0x42>
    3d82:	200a      	movs	r0, #10
    3d84:	e7d5      	b.n	3d32 <_puts_r+0x46>
    3d86:	0022      	movs	r2, r4
    3d88:	0028      	movs	r0, r5
    3d8a:	f000 f8cf 	bl	3f2c <__swbuf_r>
    3d8e:	1c43      	adds	r3, r0, #1
    3d90:	d1e8      	bne.n	3d64 <_puts_r+0x78>
    3d92:	e7cc      	b.n	3d2e <_puts_r+0x42>
    3d94:	200a      	movs	r0, #10
    3d96:	6823      	ldr	r3, [r4, #0]
    3d98:	1c5a      	adds	r2, r3, #1
    3d9a:	6022      	str	r2, [r4, #0]
    3d9c:	7018      	strb	r0, [r3, #0]
    3d9e:	e7c8      	b.n	3d32 <_puts_r+0x46>
    3da0:	000052fc 	.word	0x000052fc
    3da4:	0000531c 	.word	0x0000531c
    3da8:	000052dc 	.word	0x000052dc

00003dac <puts>:
    3dac:	b510      	push	{r4, lr}
    3dae:	4b03      	ldr	r3, [pc, #12]	; (3dbc <puts+0x10>)
    3db0:	0001      	movs	r1, r0
    3db2:	6818      	ldr	r0, [r3, #0]
    3db4:	f7ff ff9a 	bl	3cec <_puts_r>
    3db8:	bd10      	pop	{r4, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	20000030 	.word	0x20000030

00003dc0 <setbuf>:
    3dc0:	424a      	negs	r2, r1
    3dc2:	414a      	adcs	r2, r1
    3dc4:	2380      	movs	r3, #128	; 0x80
    3dc6:	b510      	push	{r4, lr}
    3dc8:	0052      	lsls	r2, r2, #1
    3dca:	00db      	lsls	r3, r3, #3
    3dcc:	f000 f802 	bl	3dd4 <setvbuf>
    3dd0:	bd10      	pop	{r4, pc}
	...

00003dd4 <setvbuf>:
    3dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dd6:	001d      	movs	r5, r3
    3dd8:	4b4f      	ldr	r3, [pc, #316]	; (3f18 <setvbuf+0x144>)
    3dda:	b085      	sub	sp, #20
    3ddc:	681e      	ldr	r6, [r3, #0]
    3dde:	0004      	movs	r4, r0
    3de0:	000f      	movs	r7, r1
    3de2:	9200      	str	r2, [sp, #0]
    3de4:	2e00      	cmp	r6, #0
    3de6:	d005      	beq.n	3df4 <setvbuf+0x20>
    3de8:	69b3      	ldr	r3, [r6, #24]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d102      	bne.n	3df4 <setvbuf+0x20>
    3dee:	0030      	movs	r0, r6
    3df0:	f000 fa60 	bl	42b4 <__sinit>
    3df4:	4b49      	ldr	r3, [pc, #292]	; (3f1c <setvbuf+0x148>)
    3df6:	429c      	cmp	r4, r3
    3df8:	d150      	bne.n	3e9c <setvbuf+0xc8>
    3dfa:	6874      	ldr	r4, [r6, #4]
    3dfc:	9b00      	ldr	r3, [sp, #0]
    3dfe:	2b02      	cmp	r3, #2
    3e00:	d005      	beq.n	3e0e <setvbuf+0x3a>
    3e02:	2b01      	cmp	r3, #1
    3e04:	d900      	bls.n	3e08 <setvbuf+0x34>
    3e06:	e084      	b.n	3f12 <setvbuf+0x13e>
    3e08:	2d00      	cmp	r5, #0
    3e0a:	da00      	bge.n	3e0e <setvbuf+0x3a>
    3e0c:	e081      	b.n	3f12 <setvbuf+0x13e>
    3e0e:	0021      	movs	r1, r4
    3e10:	0030      	movs	r0, r6
    3e12:	f000 f9e1 	bl	41d8 <_fflush_r>
    3e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e18:	2900      	cmp	r1, #0
    3e1a:	d008      	beq.n	3e2e <setvbuf+0x5a>
    3e1c:	0023      	movs	r3, r4
    3e1e:	3344      	adds	r3, #68	; 0x44
    3e20:	4299      	cmp	r1, r3
    3e22:	d002      	beq.n	3e2a <setvbuf+0x56>
    3e24:	0030      	movs	r0, r6
    3e26:	f000 fb4b 	bl	44c0 <_free_r>
    3e2a:	2300      	movs	r3, #0
    3e2c:	6363      	str	r3, [r4, #52]	; 0x34
    3e2e:	2300      	movs	r3, #0
    3e30:	61a3      	str	r3, [r4, #24]
    3e32:	6063      	str	r3, [r4, #4]
    3e34:	89a3      	ldrh	r3, [r4, #12]
    3e36:	061b      	lsls	r3, r3, #24
    3e38:	d503      	bpl.n	3e42 <setvbuf+0x6e>
    3e3a:	6921      	ldr	r1, [r4, #16]
    3e3c:	0030      	movs	r0, r6
    3e3e:	f000 fb3f 	bl	44c0 <_free_r>
    3e42:	89a3      	ldrh	r3, [r4, #12]
    3e44:	4a36      	ldr	r2, [pc, #216]	; (3f20 <setvbuf+0x14c>)
    3e46:	4013      	ands	r3, r2
    3e48:	81a3      	strh	r3, [r4, #12]
    3e4a:	9b00      	ldr	r3, [sp, #0]
    3e4c:	2b02      	cmp	r3, #2
    3e4e:	d05a      	beq.n	3f06 <setvbuf+0x132>
    3e50:	ab03      	add	r3, sp, #12
    3e52:	aa02      	add	r2, sp, #8
    3e54:	0021      	movs	r1, r4
    3e56:	0030      	movs	r0, r6
    3e58:	f000 fac2 	bl	43e0 <__swhatbuf_r>
    3e5c:	89a3      	ldrh	r3, [r4, #12]
    3e5e:	4318      	orrs	r0, r3
    3e60:	81a0      	strh	r0, [r4, #12]
    3e62:	2d00      	cmp	r5, #0
    3e64:	d124      	bne.n	3eb0 <setvbuf+0xdc>
    3e66:	9d02      	ldr	r5, [sp, #8]
    3e68:	0028      	movs	r0, r5
    3e6a:	f000 fb1f 	bl	44ac <malloc>
    3e6e:	9501      	str	r5, [sp, #4]
    3e70:	1e07      	subs	r7, r0, #0
    3e72:	d142      	bne.n	3efa <setvbuf+0x126>
    3e74:	9b02      	ldr	r3, [sp, #8]
    3e76:	9301      	str	r3, [sp, #4]
    3e78:	42ab      	cmp	r3, r5
    3e7a:	d139      	bne.n	3ef0 <setvbuf+0x11c>
    3e7c:	2001      	movs	r0, #1
    3e7e:	4240      	negs	r0, r0
    3e80:	2302      	movs	r3, #2
    3e82:	89a2      	ldrh	r2, [r4, #12]
    3e84:	4313      	orrs	r3, r2
    3e86:	81a3      	strh	r3, [r4, #12]
    3e88:	2300      	movs	r3, #0
    3e8a:	60a3      	str	r3, [r4, #8]
    3e8c:	0023      	movs	r3, r4
    3e8e:	3347      	adds	r3, #71	; 0x47
    3e90:	6023      	str	r3, [r4, #0]
    3e92:	6123      	str	r3, [r4, #16]
    3e94:	2301      	movs	r3, #1
    3e96:	6163      	str	r3, [r4, #20]
    3e98:	b005      	add	sp, #20
    3e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e9c:	4b21      	ldr	r3, [pc, #132]	; (3f24 <setvbuf+0x150>)
    3e9e:	429c      	cmp	r4, r3
    3ea0:	d101      	bne.n	3ea6 <setvbuf+0xd2>
    3ea2:	68b4      	ldr	r4, [r6, #8]
    3ea4:	e7aa      	b.n	3dfc <setvbuf+0x28>
    3ea6:	4b20      	ldr	r3, [pc, #128]	; (3f28 <setvbuf+0x154>)
    3ea8:	429c      	cmp	r4, r3
    3eaa:	d1a7      	bne.n	3dfc <setvbuf+0x28>
    3eac:	68f4      	ldr	r4, [r6, #12]
    3eae:	e7a5      	b.n	3dfc <setvbuf+0x28>
    3eb0:	2f00      	cmp	r7, #0
    3eb2:	d0d9      	beq.n	3e68 <setvbuf+0x94>
    3eb4:	69b3      	ldr	r3, [r6, #24]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d102      	bne.n	3ec0 <setvbuf+0xec>
    3eba:	0030      	movs	r0, r6
    3ebc:	f000 f9fa 	bl	42b4 <__sinit>
    3ec0:	9b00      	ldr	r3, [sp, #0]
    3ec2:	2b01      	cmp	r3, #1
    3ec4:	d103      	bne.n	3ece <setvbuf+0xfa>
    3ec6:	89a3      	ldrh	r3, [r4, #12]
    3ec8:	9a00      	ldr	r2, [sp, #0]
    3eca:	431a      	orrs	r2, r3
    3ecc:	81a2      	strh	r2, [r4, #12]
    3ece:	2008      	movs	r0, #8
    3ed0:	89a3      	ldrh	r3, [r4, #12]
    3ed2:	6027      	str	r7, [r4, #0]
    3ed4:	6127      	str	r7, [r4, #16]
    3ed6:	6165      	str	r5, [r4, #20]
    3ed8:	4018      	ands	r0, r3
    3eda:	d018      	beq.n	3f0e <setvbuf+0x13a>
    3edc:	2001      	movs	r0, #1
    3ede:	4018      	ands	r0, r3
    3ee0:	2300      	movs	r3, #0
    3ee2:	4298      	cmp	r0, r3
    3ee4:	d011      	beq.n	3f0a <setvbuf+0x136>
    3ee6:	426d      	negs	r5, r5
    3ee8:	60a3      	str	r3, [r4, #8]
    3eea:	61a5      	str	r5, [r4, #24]
    3eec:	0018      	movs	r0, r3
    3eee:	e7d3      	b.n	3e98 <setvbuf+0xc4>
    3ef0:	9801      	ldr	r0, [sp, #4]
    3ef2:	f000 fadb 	bl	44ac <malloc>
    3ef6:	1e07      	subs	r7, r0, #0
    3ef8:	d0c0      	beq.n	3e7c <setvbuf+0xa8>
    3efa:	2380      	movs	r3, #128	; 0x80
    3efc:	89a2      	ldrh	r2, [r4, #12]
    3efe:	9d01      	ldr	r5, [sp, #4]
    3f00:	4313      	orrs	r3, r2
    3f02:	81a3      	strh	r3, [r4, #12]
    3f04:	e7d6      	b.n	3eb4 <setvbuf+0xe0>
    3f06:	2000      	movs	r0, #0
    3f08:	e7ba      	b.n	3e80 <setvbuf+0xac>
    3f0a:	60a5      	str	r5, [r4, #8]
    3f0c:	e7c4      	b.n	3e98 <setvbuf+0xc4>
    3f0e:	60a0      	str	r0, [r4, #8]
    3f10:	e7c2      	b.n	3e98 <setvbuf+0xc4>
    3f12:	2001      	movs	r0, #1
    3f14:	4240      	negs	r0, r0
    3f16:	e7bf      	b.n	3e98 <setvbuf+0xc4>
    3f18:	20000030 	.word	0x20000030
    3f1c:	000052fc 	.word	0x000052fc
    3f20:	fffff35c 	.word	0xfffff35c
    3f24:	0000531c 	.word	0x0000531c
    3f28:	000052dc 	.word	0x000052dc

00003f2c <__swbuf_r>:
    3f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f2e:	0005      	movs	r5, r0
    3f30:	000e      	movs	r6, r1
    3f32:	0014      	movs	r4, r2
    3f34:	2800      	cmp	r0, #0
    3f36:	d004      	beq.n	3f42 <__swbuf_r+0x16>
    3f38:	6983      	ldr	r3, [r0, #24]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d101      	bne.n	3f42 <__swbuf_r+0x16>
    3f3e:	f000 f9b9 	bl	42b4 <__sinit>
    3f42:	4b22      	ldr	r3, [pc, #136]	; (3fcc <__swbuf_r+0xa0>)
    3f44:	429c      	cmp	r4, r3
    3f46:	d12d      	bne.n	3fa4 <__swbuf_r+0x78>
    3f48:	686c      	ldr	r4, [r5, #4]
    3f4a:	69a3      	ldr	r3, [r4, #24]
    3f4c:	60a3      	str	r3, [r4, #8]
    3f4e:	89a3      	ldrh	r3, [r4, #12]
    3f50:	071b      	lsls	r3, r3, #28
    3f52:	d531      	bpl.n	3fb8 <__swbuf_r+0x8c>
    3f54:	6923      	ldr	r3, [r4, #16]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d02e      	beq.n	3fb8 <__swbuf_r+0x8c>
    3f5a:	6823      	ldr	r3, [r4, #0]
    3f5c:	6922      	ldr	r2, [r4, #16]
    3f5e:	b2f7      	uxtb	r7, r6
    3f60:	1a98      	subs	r0, r3, r2
    3f62:	6963      	ldr	r3, [r4, #20]
    3f64:	b2f6      	uxtb	r6, r6
    3f66:	4298      	cmp	r0, r3
    3f68:	db05      	blt.n	3f76 <__swbuf_r+0x4a>
    3f6a:	0021      	movs	r1, r4
    3f6c:	0028      	movs	r0, r5
    3f6e:	f000 f933 	bl	41d8 <_fflush_r>
    3f72:	2800      	cmp	r0, #0
    3f74:	d126      	bne.n	3fc4 <__swbuf_r+0x98>
    3f76:	68a3      	ldr	r3, [r4, #8]
    3f78:	3001      	adds	r0, #1
    3f7a:	3b01      	subs	r3, #1
    3f7c:	60a3      	str	r3, [r4, #8]
    3f7e:	6823      	ldr	r3, [r4, #0]
    3f80:	1c5a      	adds	r2, r3, #1
    3f82:	6022      	str	r2, [r4, #0]
    3f84:	701f      	strb	r7, [r3, #0]
    3f86:	6963      	ldr	r3, [r4, #20]
    3f88:	4298      	cmp	r0, r3
    3f8a:	d004      	beq.n	3f96 <__swbuf_r+0x6a>
    3f8c:	89a3      	ldrh	r3, [r4, #12]
    3f8e:	07db      	lsls	r3, r3, #31
    3f90:	d51a      	bpl.n	3fc8 <__swbuf_r+0x9c>
    3f92:	2e0a      	cmp	r6, #10
    3f94:	d118      	bne.n	3fc8 <__swbuf_r+0x9c>
    3f96:	0021      	movs	r1, r4
    3f98:	0028      	movs	r0, r5
    3f9a:	f000 f91d 	bl	41d8 <_fflush_r>
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d012      	beq.n	3fc8 <__swbuf_r+0x9c>
    3fa2:	e00f      	b.n	3fc4 <__swbuf_r+0x98>
    3fa4:	4b0a      	ldr	r3, [pc, #40]	; (3fd0 <__swbuf_r+0xa4>)
    3fa6:	429c      	cmp	r4, r3
    3fa8:	d101      	bne.n	3fae <__swbuf_r+0x82>
    3faa:	68ac      	ldr	r4, [r5, #8]
    3fac:	e7cd      	b.n	3f4a <__swbuf_r+0x1e>
    3fae:	4b09      	ldr	r3, [pc, #36]	; (3fd4 <__swbuf_r+0xa8>)
    3fb0:	429c      	cmp	r4, r3
    3fb2:	d1ca      	bne.n	3f4a <__swbuf_r+0x1e>
    3fb4:	68ec      	ldr	r4, [r5, #12]
    3fb6:	e7c8      	b.n	3f4a <__swbuf_r+0x1e>
    3fb8:	0021      	movs	r1, r4
    3fba:	0028      	movs	r0, r5
    3fbc:	f000 f80c 	bl	3fd8 <__swsetup_r>
    3fc0:	2800      	cmp	r0, #0
    3fc2:	d0ca      	beq.n	3f5a <__swbuf_r+0x2e>
    3fc4:	2601      	movs	r6, #1
    3fc6:	4276      	negs	r6, r6
    3fc8:	0030      	movs	r0, r6
    3fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fcc:	000052fc 	.word	0x000052fc
    3fd0:	0000531c 	.word	0x0000531c
    3fd4:	000052dc 	.word	0x000052dc

00003fd8 <__swsetup_r>:
    3fd8:	4b36      	ldr	r3, [pc, #216]	; (40b4 <__swsetup_r+0xdc>)
    3fda:	b570      	push	{r4, r5, r6, lr}
    3fdc:	681d      	ldr	r5, [r3, #0]
    3fde:	0006      	movs	r6, r0
    3fe0:	000c      	movs	r4, r1
    3fe2:	2d00      	cmp	r5, #0
    3fe4:	d005      	beq.n	3ff2 <__swsetup_r+0x1a>
    3fe6:	69ab      	ldr	r3, [r5, #24]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d102      	bne.n	3ff2 <__swsetup_r+0x1a>
    3fec:	0028      	movs	r0, r5
    3fee:	f000 f961 	bl	42b4 <__sinit>
    3ff2:	4b31      	ldr	r3, [pc, #196]	; (40b8 <__swsetup_r+0xe0>)
    3ff4:	429c      	cmp	r4, r3
    3ff6:	d10f      	bne.n	4018 <__swsetup_r+0x40>
    3ff8:	686c      	ldr	r4, [r5, #4]
    3ffa:	230c      	movs	r3, #12
    3ffc:	5ee2      	ldrsh	r2, [r4, r3]
    3ffe:	b293      	uxth	r3, r2
    4000:	0719      	lsls	r1, r3, #28
    4002:	d42d      	bmi.n	4060 <__swsetup_r+0x88>
    4004:	06d9      	lsls	r1, r3, #27
    4006:	d411      	bmi.n	402c <__swsetup_r+0x54>
    4008:	2309      	movs	r3, #9
    400a:	2001      	movs	r0, #1
    400c:	6033      	str	r3, [r6, #0]
    400e:	3337      	adds	r3, #55	; 0x37
    4010:	4313      	orrs	r3, r2
    4012:	81a3      	strh	r3, [r4, #12]
    4014:	4240      	negs	r0, r0
    4016:	bd70      	pop	{r4, r5, r6, pc}
    4018:	4b28      	ldr	r3, [pc, #160]	; (40bc <__swsetup_r+0xe4>)
    401a:	429c      	cmp	r4, r3
    401c:	d101      	bne.n	4022 <__swsetup_r+0x4a>
    401e:	68ac      	ldr	r4, [r5, #8]
    4020:	e7eb      	b.n	3ffa <__swsetup_r+0x22>
    4022:	4b27      	ldr	r3, [pc, #156]	; (40c0 <__swsetup_r+0xe8>)
    4024:	429c      	cmp	r4, r3
    4026:	d1e8      	bne.n	3ffa <__swsetup_r+0x22>
    4028:	68ec      	ldr	r4, [r5, #12]
    402a:	e7e6      	b.n	3ffa <__swsetup_r+0x22>
    402c:	075b      	lsls	r3, r3, #29
    402e:	d513      	bpl.n	4058 <__swsetup_r+0x80>
    4030:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4032:	2900      	cmp	r1, #0
    4034:	d008      	beq.n	4048 <__swsetup_r+0x70>
    4036:	0023      	movs	r3, r4
    4038:	3344      	adds	r3, #68	; 0x44
    403a:	4299      	cmp	r1, r3
    403c:	d002      	beq.n	4044 <__swsetup_r+0x6c>
    403e:	0030      	movs	r0, r6
    4040:	f000 fa3e 	bl	44c0 <_free_r>
    4044:	2300      	movs	r3, #0
    4046:	6363      	str	r3, [r4, #52]	; 0x34
    4048:	2224      	movs	r2, #36	; 0x24
    404a:	89a3      	ldrh	r3, [r4, #12]
    404c:	4393      	bics	r3, r2
    404e:	81a3      	strh	r3, [r4, #12]
    4050:	2300      	movs	r3, #0
    4052:	6063      	str	r3, [r4, #4]
    4054:	6923      	ldr	r3, [r4, #16]
    4056:	6023      	str	r3, [r4, #0]
    4058:	2308      	movs	r3, #8
    405a:	89a2      	ldrh	r2, [r4, #12]
    405c:	4313      	orrs	r3, r2
    405e:	81a3      	strh	r3, [r4, #12]
    4060:	6923      	ldr	r3, [r4, #16]
    4062:	2b00      	cmp	r3, #0
    4064:	d10b      	bne.n	407e <__swsetup_r+0xa6>
    4066:	21a0      	movs	r1, #160	; 0xa0
    4068:	2280      	movs	r2, #128	; 0x80
    406a:	89a3      	ldrh	r3, [r4, #12]
    406c:	0089      	lsls	r1, r1, #2
    406e:	0092      	lsls	r2, r2, #2
    4070:	400b      	ands	r3, r1
    4072:	4293      	cmp	r3, r2
    4074:	d003      	beq.n	407e <__swsetup_r+0xa6>
    4076:	0021      	movs	r1, r4
    4078:	0030      	movs	r0, r6
    407a:	f000 f9d9 	bl	4430 <__smakebuf_r>
    407e:	2301      	movs	r3, #1
    4080:	89a2      	ldrh	r2, [r4, #12]
    4082:	4013      	ands	r3, r2
    4084:	d011      	beq.n	40aa <__swsetup_r+0xd2>
    4086:	2300      	movs	r3, #0
    4088:	60a3      	str	r3, [r4, #8]
    408a:	6963      	ldr	r3, [r4, #20]
    408c:	425b      	negs	r3, r3
    408e:	61a3      	str	r3, [r4, #24]
    4090:	2000      	movs	r0, #0
    4092:	6923      	ldr	r3, [r4, #16]
    4094:	4283      	cmp	r3, r0
    4096:	d1be      	bne.n	4016 <__swsetup_r+0x3e>
    4098:	230c      	movs	r3, #12
    409a:	5ee2      	ldrsh	r2, [r4, r3]
    409c:	0613      	lsls	r3, r2, #24
    409e:	d5ba      	bpl.n	4016 <__swsetup_r+0x3e>
    40a0:	2340      	movs	r3, #64	; 0x40
    40a2:	4313      	orrs	r3, r2
    40a4:	81a3      	strh	r3, [r4, #12]
    40a6:	3801      	subs	r0, #1
    40a8:	e7b5      	b.n	4016 <__swsetup_r+0x3e>
    40aa:	0792      	lsls	r2, r2, #30
    40ac:	d400      	bmi.n	40b0 <__swsetup_r+0xd8>
    40ae:	6963      	ldr	r3, [r4, #20]
    40b0:	60a3      	str	r3, [r4, #8]
    40b2:	e7ed      	b.n	4090 <__swsetup_r+0xb8>
    40b4:	20000030 	.word	0x20000030
    40b8:	000052fc 	.word	0x000052fc
    40bc:	0000531c 	.word	0x0000531c
    40c0:	000052dc 	.word	0x000052dc

000040c4 <__sflush_r>:
    40c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40c6:	898a      	ldrh	r2, [r1, #12]
    40c8:	0005      	movs	r5, r0
    40ca:	000c      	movs	r4, r1
    40cc:	0713      	lsls	r3, r2, #28
    40ce:	d460      	bmi.n	4192 <__sflush_r+0xce>
    40d0:	684b      	ldr	r3, [r1, #4]
    40d2:	2b00      	cmp	r3, #0
    40d4:	dc04      	bgt.n	40e0 <__sflush_r+0x1c>
    40d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    40d8:	2b00      	cmp	r3, #0
    40da:	dc01      	bgt.n	40e0 <__sflush_r+0x1c>
    40dc:	2000      	movs	r0, #0
    40de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    40e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    40e2:	2f00      	cmp	r7, #0
    40e4:	d0fa      	beq.n	40dc <__sflush_r+0x18>
    40e6:	2300      	movs	r3, #0
    40e8:	682e      	ldr	r6, [r5, #0]
    40ea:	602b      	str	r3, [r5, #0]
    40ec:	2380      	movs	r3, #128	; 0x80
    40ee:	015b      	lsls	r3, r3, #5
    40f0:	401a      	ands	r2, r3
    40f2:	d034      	beq.n	415e <__sflush_r+0x9a>
    40f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    40f6:	89a3      	ldrh	r3, [r4, #12]
    40f8:	075b      	lsls	r3, r3, #29
    40fa:	d506      	bpl.n	410a <__sflush_r+0x46>
    40fc:	6863      	ldr	r3, [r4, #4]
    40fe:	1ac0      	subs	r0, r0, r3
    4100:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4102:	2b00      	cmp	r3, #0
    4104:	d001      	beq.n	410a <__sflush_r+0x46>
    4106:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4108:	1ac0      	subs	r0, r0, r3
    410a:	0002      	movs	r2, r0
    410c:	6a21      	ldr	r1, [r4, #32]
    410e:	2300      	movs	r3, #0
    4110:	0028      	movs	r0, r5
    4112:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4114:	47b8      	blx	r7
    4116:	89a1      	ldrh	r1, [r4, #12]
    4118:	1c43      	adds	r3, r0, #1
    411a:	d106      	bne.n	412a <__sflush_r+0x66>
    411c:	682b      	ldr	r3, [r5, #0]
    411e:	2b1d      	cmp	r3, #29
    4120:	d831      	bhi.n	4186 <__sflush_r+0xc2>
    4122:	4a2c      	ldr	r2, [pc, #176]	; (41d4 <__sflush_r+0x110>)
    4124:	40da      	lsrs	r2, r3
    4126:	07d3      	lsls	r3, r2, #31
    4128:	d52d      	bpl.n	4186 <__sflush_r+0xc2>
    412a:	2300      	movs	r3, #0
    412c:	6063      	str	r3, [r4, #4]
    412e:	6923      	ldr	r3, [r4, #16]
    4130:	6023      	str	r3, [r4, #0]
    4132:	04cb      	lsls	r3, r1, #19
    4134:	d505      	bpl.n	4142 <__sflush_r+0x7e>
    4136:	1c43      	adds	r3, r0, #1
    4138:	d102      	bne.n	4140 <__sflush_r+0x7c>
    413a:	682b      	ldr	r3, [r5, #0]
    413c:	2b00      	cmp	r3, #0
    413e:	d100      	bne.n	4142 <__sflush_r+0x7e>
    4140:	6560      	str	r0, [r4, #84]	; 0x54
    4142:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4144:	602e      	str	r6, [r5, #0]
    4146:	2900      	cmp	r1, #0
    4148:	d0c8      	beq.n	40dc <__sflush_r+0x18>
    414a:	0023      	movs	r3, r4
    414c:	3344      	adds	r3, #68	; 0x44
    414e:	4299      	cmp	r1, r3
    4150:	d002      	beq.n	4158 <__sflush_r+0x94>
    4152:	0028      	movs	r0, r5
    4154:	f000 f9b4 	bl	44c0 <_free_r>
    4158:	2000      	movs	r0, #0
    415a:	6360      	str	r0, [r4, #52]	; 0x34
    415c:	e7bf      	b.n	40de <__sflush_r+0x1a>
    415e:	2301      	movs	r3, #1
    4160:	6a21      	ldr	r1, [r4, #32]
    4162:	0028      	movs	r0, r5
    4164:	47b8      	blx	r7
    4166:	1c43      	adds	r3, r0, #1
    4168:	d1c5      	bne.n	40f6 <__sflush_r+0x32>
    416a:	682b      	ldr	r3, [r5, #0]
    416c:	2b00      	cmp	r3, #0
    416e:	d0c2      	beq.n	40f6 <__sflush_r+0x32>
    4170:	2b1d      	cmp	r3, #29
    4172:	d001      	beq.n	4178 <__sflush_r+0xb4>
    4174:	2b16      	cmp	r3, #22
    4176:	d101      	bne.n	417c <__sflush_r+0xb8>
    4178:	602e      	str	r6, [r5, #0]
    417a:	e7af      	b.n	40dc <__sflush_r+0x18>
    417c:	2340      	movs	r3, #64	; 0x40
    417e:	89a2      	ldrh	r2, [r4, #12]
    4180:	4313      	orrs	r3, r2
    4182:	81a3      	strh	r3, [r4, #12]
    4184:	e7ab      	b.n	40de <__sflush_r+0x1a>
    4186:	2340      	movs	r3, #64	; 0x40
    4188:	430b      	orrs	r3, r1
    418a:	2001      	movs	r0, #1
    418c:	81a3      	strh	r3, [r4, #12]
    418e:	4240      	negs	r0, r0
    4190:	e7a5      	b.n	40de <__sflush_r+0x1a>
    4192:	690f      	ldr	r7, [r1, #16]
    4194:	2f00      	cmp	r7, #0
    4196:	d0a1      	beq.n	40dc <__sflush_r+0x18>
    4198:	680b      	ldr	r3, [r1, #0]
    419a:	600f      	str	r7, [r1, #0]
    419c:	1bdb      	subs	r3, r3, r7
    419e:	9301      	str	r3, [sp, #4]
    41a0:	2300      	movs	r3, #0
    41a2:	0792      	lsls	r2, r2, #30
    41a4:	d100      	bne.n	41a8 <__sflush_r+0xe4>
    41a6:	694b      	ldr	r3, [r1, #20]
    41a8:	60a3      	str	r3, [r4, #8]
    41aa:	9b01      	ldr	r3, [sp, #4]
    41ac:	2b00      	cmp	r3, #0
    41ae:	dc00      	bgt.n	41b2 <__sflush_r+0xee>
    41b0:	e794      	b.n	40dc <__sflush_r+0x18>
    41b2:	9b01      	ldr	r3, [sp, #4]
    41b4:	003a      	movs	r2, r7
    41b6:	6a21      	ldr	r1, [r4, #32]
    41b8:	0028      	movs	r0, r5
    41ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    41bc:	47b0      	blx	r6
    41be:	2800      	cmp	r0, #0
    41c0:	dc03      	bgt.n	41ca <__sflush_r+0x106>
    41c2:	2340      	movs	r3, #64	; 0x40
    41c4:	89a2      	ldrh	r2, [r4, #12]
    41c6:	4313      	orrs	r3, r2
    41c8:	e7df      	b.n	418a <__sflush_r+0xc6>
    41ca:	9b01      	ldr	r3, [sp, #4]
    41cc:	183f      	adds	r7, r7, r0
    41ce:	1a1b      	subs	r3, r3, r0
    41d0:	9301      	str	r3, [sp, #4]
    41d2:	e7ea      	b.n	41aa <__sflush_r+0xe6>
    41d4:	20400001 	.word	0x20400001

000041d8 <_fflush_r>:
    41d8:	690b      	ldr	r3, [r1, #16]
    41da:	b570      	push	{r4, r5, r6, lr}
    41dc:	0005      	movs	r5, r0
    41de:	000c      	movs	r4, r1
    41e0:	2b00      	cmp	r3, #0
    41e2:	d101      	bne.n	41e8 <_fflush_r+0x10>
    41e4:	2000      	movs	r0, #0
    41e6:	bd70      	pop	{r4, r5, r6, pc}
    41e8:	2800      	cmp	r0, #0
    41ea:	d004      	beq.n	41f6 <_fflush_r+0x1e>
    41ec:	6983      	ldr	r3, [r0, #24]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d101      	bne.n	41f6 <_fflush_r+0x1e>
    41f2:	f000 f85f 	bl	42b4 <__sinit>
    41f6:	4b0b      	ldr	r3, [pc, #44]	; (4224 <_fflush_r+0x4c>)
    41f8:	429c      	cmp	r4, r3
    41fa:	d109      	bne.n	4210 <_fflush_r+0x38>
    41fc:	686c      	ldr	r4, [r5, #4]
    41fe:	220c      	movs	r2, #12
    4200:	5ea3      	ldrsh	r3, [r4, r2]
    4202:	2b00      	cmp	r3, #0
    4204:	d0ee      	beq.n	41e4 <_fflush_r+0xc>
    4206:	0021      	movs	r1, r4
    4208:	0028      	movs	r0, r5
    420a:	f7ff ff5b 	bl	40c4 <__sflush_r>
    420e:	e7ea      	b.n	41e6 <_fflush_r+0xe>
    4210:	4b05      	ldr	r3, [pc, #20]	; (4228 <_fflush_r+0x50>)
    4212:	429c      	cmp	r4, r3
    4214:	d101      	bne.n	421a <_fflush_r+0x42>
    4216:	68ac      	ldr	r4, [r5, #8]
    4218:	e7f1      	b.n	41fe <_fflush_r+0x26>
    421a:	4b04      	ldr	r3, [pc, #16]	; (422c <_fflush_r+0x54>)
    421c:	429c      	cmp	r4, r3
    421e:	d1ee      	bne.n	41fe <_fflush_r+0x26>
    4220:	68ec      	ldr	r4, [r5, #12]
    4222:	e7ec      	b.n	41fe <_fflush_r+0x26>
    4224:	000052fc 	.word	0x000052fc
    4228:	0000531c 	.word	0x0000531c
    422c:	000052dc 	.word	0x000052dc

00004230 <_cleanup_r>:
    4230:	b510      	push	{r4, lr}
    4232:	4902      	ldr	r1, [pc, #8]	; (423c <_cleanup_r+0xc>)
    4234:	f000 f8b2 	bl	439c <_fwalk_reent>
    4238:	bd10      	pop	{r4, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	000041d9 	.word	0x000041d9

00004240 <std.isra.0>:
    4240:	2300      	movs	r3, #0
    4242:	b510      	push	{r4, lr}
    4244:	0004      	movs	r4, r0
    4246:	6003      	str	r3, [r0, #0]
    4248:	6043      	str	r3, [r0, #4]
    424a:	6083      	str	r3, [r0, #8]
    424c:	8181      	strh	r1, [r0, #12]
    424e:	6643      	str	r3, [r0, #100]	; 0x64
    4250:	81c2      	strh	r2, [r0, #14]
    4252:	6103      	str	r3, [r0, #16]
    4254:	6143      	str	r3, [r0, #20]
    4256:	6183      	str	r3, [r0, #24]
    4258:	0019      	movs	r1, r3
    425a:	2208      	movs	r2, #8
    425c:	305c      	adds	r0, #92	; 0x5c
    425e:	f7ff fd22 	bl	3ca6 <memset>
    4262:	4b05      	ldr	r3, [pc, #20]	; (4278 <std.isra.0+0x38>)
    4264:	6224      	str	r4, [r4, #32]
    4266:	6263      	str	r3, [r4, #36]	; 0x24
    4268:	4b04      	ldr	r3, [pc, #16]	; (427c <std.isra.0+0x3c>)
    426a:	62a3      	str	r3, [r4, #40]	; 0x28
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <std.isra.0+0x40>)
    426e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4270:	4b04      	ldr	r3, [pc, #16]	; (4284 <std.isra.0+0x44>)
    4272:	6323      	str	r3, [r4, #48]	; 0x30
    4274:	bd10      	pop	{r4, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	00004bcd 	.word	0x00004bcd
    427c:	00004bf5 	.word	0x00004bf5
    4280:	00004c2d 	.word	0x00004c2d
    4284:	00004c59 	.word	0x00004c59

00004288 <__sfmoreglue>:
    4288:	b570      	push	{r4, r5, r6, lr}
    428a:	2568      	movs	r5, #104	; 0x68
    428c:	1e4a      	subs	r2, r1, #1
    428e:	4355      	muls	r5, r2
    4290:	000e      	movs	r6, r1
    4292:	0029      	movs	r1, r5
    4294:	3174      	adds	r1, #116	; 0x74
    4296:	f000 f95d 	bl	4554 <_malloc_r>
    429a:	1e04      	subs	r4, r0, #0
    429c:	d008      	beq.n	42b0 <__sfmoreglue+0x28>
    429e:	2100      	movs	r1, #0
    42a0:	002a      	movs	r2, r5
    42a2:	6001      	str	r1, [r0, #0]
    42a4:	6046      	str	r6, [r0, #4]
    42a6:	300c      	adds	r0, #12
    42a8:	60a0      	str	r0, [r4, #8]
    42aa:	3268      	adds	r2, #104	; 0x68
    42ac:	f7ff fcfb 	bl	3ca6 <memset>
    42b0:	0020      	movs	r0, r4
    42b2:	bd70      	pop	{r4, r5, r6, pc}

000042b4 <__sinit>:
    42b4:	6983      	ldr	r3, [r0, #24]
    42b6:	b513      	push	{r0, r1, r4, lr}
    42b8:	0004      	movs	r4, r0
    42ba:	2b00      	cmp	r3, #0
    42bc:	d128      	bne.n	4310 <__sinit+0x5c>
    42be:	6483      	str	r3, [r0, #72]	; 0x48
    42c0:	64c3      	str	r3, [r0, #76]	; 0x4c
    42c2:	6503      	str	r3, [r0, #80]	; 0x50
    42c4:	4b13      	ldr	r3, [pc, #76]	; (4314 <__sinit+0x60>)
    42c6:	4a14      	ldr	r2, [pc, #80]	; (4318 <__sinit+0x64>)
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	6282      	str	r2, [r0, #40]	; 0x28
    42cc:	9301      	str	r3, [sp, #4]
    42ce:	4298      	cmp	r0, r3
    42d0:	d101      	bne.n	42d6 <__sinit+0x22>
    42d2:	2301      	movs	r3, #1
    42d4:	6183      	str	r3, [r0, #24]
    42d6:	0020      	movs	r0, r4
    42d8:	f000 f820 	bl	431c <__sfp>
    42dc:	6060      	str	r0, [r4, #4]
    42de:	0020      	movs	r0, r4
    42e0:	f000 f81c 	bl	431c <__sfp>
    42e4:	60a0      	str	r0, [r4, #8]
    42e6:	0020      	movs	r0, r4
    42e8:	f000 f818 	bl	431c <__sfp>
    42ec:	2200      	movs	r2, #0
    42ee:	60e0      	str	r0, [r4, #12]
    42f0:	2104      	movs	r1, #4
    42f2:	6860      	ldr	r0, [r4, #4]
    42f4:	f7ff ffa4 	bl	4240 <std.isra.0>
    42f8:	2201      	movs	r2, #1
    42fa:	2109      	movs	r1, #9
    42fc:	68a0      	ldr	r0, [r4, #8]
    42fe:	f7ff ff9f 	bl	4240 <std.isra.0>
    4302:	2202      	movs	r2, #2
    4304:	2112      	movs	r1, #18
    4306:	68e0      	ldr	r0, [r4, #12]
    4308:	f7ff ff9a 	bl	4240 <std.isra.0>
    430c:	2301      	movs	r3, #1
    430e:	61a3      	str	r3, [r4, #24]
    4310:	bd13      	pop	{r0, r1, r4, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	000052d8 	.word	0x000052d8
    4318:	00004231 	.word	0x00004231

0000431c <__sfp>:
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	4b1e      	ldr	r3, [pc, #120]	; (4398 <__sfp+0x7c>)
    4320:	0007      	movs	r7, r0
    4322:	681e      	ldr	r6, [r3, #0]
    4324:	69b3      	ldr	r3, [r6, #24]
    4326:	2b00      	cmp	r3, #0
    4328:	d102      	bne.n	4330 <__sfp+0x14>
    432a:	0030      	movs	r0, r6
    432c:	f7ff ffc2 	bl	42b4 <__sinit>
    4330:	3648      	adds	r6, #72	; 0x48
    4332:	68b4      	ldr	r4, [r6, #8]
    4334:	6873      	ldr	r3, [r6, #4]
    4336:	3b01      	subs	r3, #1
    4338:	d504      	bpl.n	4344 <__sfp+0x28>
    433a:	6833      	ldr	r3, [r6, #0]
    433c:	2b00      	cmp	r3, #0
    433e:	d007      	beq.n	4350 <__sfp+0x34>
    4340:	6836      	ldr	r6, [r6, #0]
    4342:	e7f6      	b.n	4332 <__sfp+0x16>
    4344:	220c      	movs	r2, #12
    4346:	5ea5      	ldrsh	r5, [r4, r2]
    4348:	2d00      	cmp	r5, #0
    434a:	d00d      	beq.n	4368 <__sfp+0x4c>
    434c:	3468      	adds	r4, #104	; 0x68
    434e:	e7f2      	b.n	4336 <__sfp+0x1a>
    4350:	2104      	movs	r1, #4
    4352:	0038      	movs	r0, r7
    4354:	f7ff ff98 	bl	4288 <__sfmoreglue>
    4358:	6030      	str	r0, [r6, #0]
    435a:	2800      	cmp	r0, #0
    435c:	d1f0      	bne.n	4340 <__sfp+0x24>
    435e:	230c      	movs	r3, #12
    4360:	0004      	movs	r4, r0
    4362:	603b      	str	r3, [r7, #0]
    4364:	0020      	movs	r0, r4
    4366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4368:	2301      	movs	r3, #1
    436a:	0020      	movs	r0, r4
    436c:	425b      	negs	r3, r3
    436e:	81e3      	strh	r3, [r4, #14]
    4370:	3302      	adds	r3, #2
    4372:	81a3      	strh	r3, [r4, #12]
    4374:	6665      	str	r5, [r4, #100]	; 0x64
    4376:	6025      	str	r5, [r4, #0]
    4378:	60a5      	str	r5, [r4, #8]
    437a:	6065      	str	r5, [r4, #4]
    437c:	6125      	str	r5, [r4, #16]
    437e:	6165      	str	r5, [r4, #20]
    4380:	61a5      	str	r5, [r4, #24]
    4382:	2208      	movs	r2, #8
    4384:	0029      	movs	r1, r5
    4386:	305c      	adds	r0, #92	; 0x5c
    4388:	f7ff fc8d 	bl	3ca6 <memset>
    438c:	6365      	str	r5, [r4, #52]	; 0x34
    438e:	63a5      	str	r5, [r4, #56]	; 0x38
    4390:	64a5      	str	r5, [r4, #72]	; 0x48
    4392:	64e5      	str	r5, [r4, #76]	; 0x4c
    4394:	e7e6      	b.n	4364 <__sfp+0x48>
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	000052d8 	.word	0x000052d8

0000439c <_fwalk_reent>:
    439c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    439e:	0004      	movs	r4, r0
    43a0:	0007      	movs	r7, r0
    43a2:	2600      	movs	r6, #0
    43a4:	9101      	str	r1, [sp, #4]
    43a6:	3448      	adds	r4, #72	; 0x48
    43a8:	2c00      	cmp	r4, #0
    43aa:	d101      	bne.n	43b0 <_fwalk_reent+0x14>
    43ac:	0030      	movs	r0, r6
    43ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43b0:	6863      	ldr	r3, [r4, #4]
    43b2:	68a5      	ldr	r5, [r4, #8]
    43b4:	9300      	str	r3, [sp, #0]
    43b6:	9b00      	ldr	r3, [sp, #0]
    43b8:	3b01      	subs	r3, #1
    43ba:	9300      	str	r3, [sp, #0]
    43bc:	d501      	bpl.n	43c2 <_fwalk_reent+0x26>
    43be:	6824      	ldr	r4, [r4, #0]
    43c0:	e7f2      	b.n	43a8 <_fwalk_reent+0xc>
    43c2:	89ab      	ldrh	r3, [r5, #12]
    43c4:	2b01      	cmp	r3, #1
    43c6:	d908      	bls.n	43da <_fwalk_reent+0x3e>
    43c8:	220e      	movs	r2, #14
    43ca:	5eab      	ldrsh	r3, [r5, r2]
    43cc:	3301      	adds	r3, #1
    43ce:	d004      	beq.n	43da <_fwalk_reent+0x3e>
    43d0:	0029      	movs	r1, r5
    43d2:	0038      	movs	r0, r7
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	4798      	blx	r3
    43d8:	4306      	orrs	r6, r0
    43da:	3568      	adds	r5, #104	; 0x68
    43dc:	e7eb      	b.n	43b6 <_fwalk_reent+0x1a>
	...

000043e0 <__swhatbuf_r>:
    43e0:	b570      	push	{r4, r5, r6, lr}
    43e2:	000e      	movs	r6, r1
    43e4:	001d      	movs	r5, r3
    43e6:	230e      	movs	r3, #14
    43e8:	5ec9      	ldrsh	r1, [r1, r3]
    43ea:	b090      	sub	sp, #64	; 0x40
    43ec:	0014      	movs	r4, r2
    43ee:	2900      	cmp	r1, #0
    43f0:	da07      	bge.n	4402 <__swhatbuf_r+0x22>
    43f2:	2300      	movs	r3, #0
    43f4:	602b      	str	r3, [r5, #0]
    43f6:	89b3      	ldrh	r3, [r6, #12]
    43f8:	061b      	lsls	r3, r3, #24
    43fa:	d411      	bmi.n	4420 <__swhatbuf_r+0x40>
    43fc:	2380      	movs	r3, #128	; 0x80
    43fe:	00db      	lsls	r3, r3, #3
    4400:	e00f      	b.n	4422 <__swhatbuf_r+0x42>
    4402:	aa01      	add	r2, sp, #4
    4404:	f000 fc54 	bl	4cb0 <_fstat_r>
    4408:	2800      	cmp	r0, #0
    440a:	dbf2      	blt.n	43f2 <__swhatbuf_r+0x12>
    440c:	22f0      	movs	r2, #240	; 0xf0
    440e:	9b02      	ldr	r3, [sp, #8]
    4410:	0212      	lsls	r2, r2, #8
    4412:	4013      	ands	r3, r2
    4414:	4a05      	ldr	r2, [pc, #20]	; (442c <__swhatbuf_r+0x4c>)
    4416:	189b      	adds	r3, r3, r2
    4418:	425a      	negs	r2, r3
    441a:	4153      	adcs	r3, r2
    441c:	602b      	str	r3, [r5, #0]
    441e:	e7ed      	b.n	43fc <__swhatbuf_r+0x1c>
    4420:	2340      	movs	r3, #64	; 0x40
    4422:	2000      	movs	r0, #0
    4424:	6023      	str	r3, [r4, #0]
    4426:	b010      	add	sp, #64	; 0x40
    4428:	bd70      	pop	{r4, r5, r6, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	ffffe000 	.word	0xffffe000

00004430 <__smakebuf_r>:
    4430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4432:	2602      	movs	r6, #2
    4434:	898b      	ldrh	r3, [r1, #12]
    4436:	0005      	movs	r5, r0
    4438:	000c      	movs	r4, r1
    443a:	4233      	tst	r3, r6
    443c:	d006      	beq.n	444c <__smakebuf_r+0x1c>
    443e:	0023      	movs	r3, r4
    4440:	3347      	adds	r3, #71	; 0x47
    4442:	6023      	str	r3, [r4, #0]
    4444:	6123      	str	r3, [r4, #16]
    4446:	2301      	movs	r3, #1
    4448:	6163      	str	r3, [r4, #20]
    444a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    444c:	ab01      	add	r3, sp, #4
    444e:	466a      	mov	r2, sp
    4450:	f7ff ffc6 	bl	43e0 <__swhatbuf_r>
    4454:	9900      	ldr	r1, [sp, #0]
    4456:	0007      	movs	r7, r0
    4458:	0028      	movs	r0, r5
    445a:	f000 f87b 	bl	4554 <_malloc_r>
    445e:	2800      	cmp	r0, #0
    4460:	d106      	bne.n	4470 <__smakebuf_r+0x40>
    4462:	220c      	movs	r2, #12
    4464:	5ea3      	ldrsh	r3, [r4, r2]
    4466:	059a      	lsls	r2, r3, #22
    4468:	d4ef      	bmi.n	444a <__smakebuf_r+0x1a>
    446a:	431e      	orrs	r6, r3
    446c:	81a6      	strh	r6, [r4, #12]
    446e:	e7e6      	b.n	443e <__smakebuf_r+0xe>
    4470:	4b0d      	ldr	r3, [pc, #52]	; (44a8 <__smakebuf_r+0x78>)
    4472:	62ab      	str	r3, [r5, #40]	; 0x28
    4474:	2380      	movs	r3, #128	; 0x80
    4476:	89a2      	ldrh	r2, [r4, #12]
    4478:	6020      	str	r0, [r4, #0]
    447a:	4313      	orrs	r3, r2
    447c:	81a3      	strh	r3, [r4, #12]
    447e:	9b00      	ldr	r3, [sp, #0]
    4480:	6120      	str	r0, [r4, #16]
    4482:	6163      	str	r3, [r4, #20]
    4484:	9b01      	ldr	r3, [sp, #4]
    4486:	2b00      	cmp	r3, #0
    4488:	d00a      	beq.n	44a0 <__smakebuf_r+0x70>
    448a:	230e      	movs	r3, #14
    448c:	5ee1      	ldrsh	r1, [r4, r3]
    448e:	0028      	movs	r0, r5
    4490:	f000 fc20 	bl	4cd4 <_isatty_r>
    4494:	2800      	cmp	r0, #0
    4496:	d003      	beq.n	44a0 <__smakebuf_r+0x70>
    4498:	2301      	movs	r3, #1
    449a:	89a2      	ldrh	r2, [r4, #12]
    449c:	4313      	orrs	r3, r2
    449e:	81a3      	strh	r3, [r4, #12]
    44a0:	89a0      	ldrh	r0, [r4, #12]
    44a2:	4338      	orrs	r0, r7
    44a4:	81a0      	strh	r0, [r4, #12]
    44a6:	e7d0      	b.n	444a <__smakebuf_r+0x1a>
    44a8:	00004231 	.word	0x00004231

000044ac <malloc>:
    44ac:	b510      	push	{r4, lr}
    44ae:	4b03      	ldr	r3, [pc, #12]	; (44bc <malloc+0x10>)
    44b0:	0001      	movs	r1, r0
    44b2:	6818      	ldr	r0, [r3, #0]
    44b4:	f000 f84e 	bl	4554 <_malloc_r>
    44b8:	bd10      	pop	{r4, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	20000030 	.word	0x20000030

000044c0 <_free_r>:
    44c0:	b570      	push	{r4, r5, r6, lr}
    44c2:	0005      	movs	r5, r0
    44c4:	2900      	cmp	r1, #0
    44c6:	d010      	beq.n	44ea <_free_r+0x2a>
    44c8:	1f0c      	subs	r4, r1, #4
    44ca:	6823      	ldr	r3, [r4, #0]
    44cc:	2b00      	cmp	r3, #0
    44ce:	da00      	bge.n	44d2 <_free_r+0x12>
    44d0:	18e4      	adds	r4, r4, r3
    44d2:	0028      	movs	r0, r5
    44d4:	f000 fc2f 	bl	4d36 <__malloc_lock>
    44d8:	4a1d      	ldr	r2, [pc, #116]	; (4550 <_free_r+0x90>)
    44da:	6813      	ldr	r3, [r2, #0]
    44dc:	2b00      	cmp	r3, #0
    44de:	d105      	bne.n	44ec <_free_r+0x2c>
    44e0:	6063      	str	r3, [r4, #4]
    44e2:	6014      	str	r4, [r2, #0]
    44e4:	0028      	movs	r0, r5
    44e6:	f000 fc27 	bl	4d38 <__malloc_unlock>
    44ea:	bd70      	pop	{r4, r5, r6, pc}
    44ec:	42a3      	cmp	r3, r4
    44ee:	d909      	bls.n	4504 <_free_r+0x44>
    44f0:	6821      	ldr	r1, [r4, #0]
    44f2:	1860      	adds	r0, r4, r1
    44f4:	4283      	cmp	r3, r0
    44f6:	d1f3      	bne.n	44e0 <_free_r+0x20>
    44f8:	6818      	ldr	r0, [r3, #0]
    44fa:	685b      	ldr	r3, [r3, #4]
    44fc:	1841      	adds	r1, r0, r1
    44fe:	6021      	str	r1, [r4, #0]
    4500:	e7ee      	b.n	44e0 <_free_r+0x20>
    4502:	0013      	movs	r3, r2
    4504:	685a      	ldr	r2, [r3, #4]
    4506:	2a00      	cmp	r2, #0
    4508:	d001      	beq.n	450e <_free_r+0x4e>
    450a:	42a2      	cmp	r2, r4
    450c:	d9f9      	bls.n	4502 <_free_r+0x42>
    450e:	6819      	ldr	r1, [r3, #0]
    4510:	1858      	adds	r0, r3, r1
    4512:	42a0      	cmp	r0, r4
    4514:	d10b      	bne.n	452e <_free_r+0x6e>
    4516:	6820      	ldr	r0, [r4, #0]
    4518:	1809      	adds	r1, r1, r0
    451a:	1858      	adds	r0, r3, r1
    451c:	6019      	str	r1, [r3, #0]
    451e:	4282      	cmp	r2, r0
    4520:	d1e0      	bne.n	44e4 <_free_r+0x24>
    4522:	6810      	ldr	r0, [r2, #0]
    4524:	6852      	ldr	r2, [r2, #4]
    4526:	1841      	adds	r1, r0, r1
    4528:	6019      	str	r1, [r3, #0]
    452a:	605a      	str	r2, [r3, #4]
    452c:	e7da      	b.n	44e4 <_free_r+0x24>
    452e:	42a0      	cmp	r0, r4
    4530:	d902      	bls.n	4538 <_free_r+0x78>
    4532:	230c      	movs	r3, #12
    4534:	602b      	str	r3, [r5, #0]
    4536:	e7d5      	b.n	44e4 <_free_r+0x24>
    4538:	6821      	ldr	r1, [r4, #0]
    453a:	1860      	adds	r0, r4, r1
    453c:	4282      	cmp	r2, r0
    453e:	d103      	bne.n	4548 <_free_r+0x88>
    4540:	6810      	ldr	r0, [r2, #0]
    4542:	6852      	ldr	r2, [r2, #4]
    4544:	1841      	adds	r1, r0, r1
    4546:	6021      	str	r1, [r4, #0]
    4548:	6062      	str	r2, [r4, #4]
    454a:	605c      	str	r4, [r3, #4]
    454c:	e7ca      	b.n	44e4 <_free_r+0x24>
    454e:	46c0      	nop			; (mov r8, r8)
    4550:	20000458 	.word	0x20000458

00004554 <_malloc_r>:
    4554:	2303      	movs	r3, #3
    4556:	b570      	push	{r4, r5, r6, lr}
    4558:	1ccd      	adds	r5, r1, #3
    455a:	439d      	bics	r5, r3
    455c:	3508      	adds	r5, #8
    455e:	0006      	movs	r6, r0
    4560:	2d0c      	cmp	r5, #12
    4562:	d21e      	bcs.n	45a2 <_malloc_r+0x4e>
    4564:	250c      	movs	r5, #12
    4566:	42a9      	cmp	r1, r5
    4568:	d81d      	bhi.n	45a6 <_malloc_r+0x52>
    456a:	0030      	movs	r0, r6
    456c:	f000 fbe3 	bl	4d36 <__malloc_lock>
    4570:	4a25      	ldr	r2, [pc, #148]	; (4608 <_malloc_r+0xb4>)
    4572:	6814      	ldr	r4, [r2, #0]
    4574:	0021      	movs	r1, r4
    4576:	2900      	cmp	r1, #0
    4578:	d119      	bne.n	45ae <_malloc_r+0x5a>
    457a:	4c24      	ldr	r4, [pc, #144]	; (460c <_malloc_r+0xb8>)
    457c:	6823      	ldr	r3, [r4, #0]
    457e:	2b00      	cmp	r3, #0
    4580:	d103      	bne.n	458a <_malloc_r+0x36>
    4582:	0030      	movs	r0, r6
    4584:	f000 fb10 	bl	4ba8 <_sbrk_r>
    4588:	6020      	str	r0, [r4, #0]
    458a:	0029      	movs	r1, r5
    458c:	0030      	movs	r0, r6
    458e:	f000 fb0b 	bl	4ba8 <_sbrk_r>
    4592:	1c43      	adds	r3, r0, #1
    4594:	d12c      	bne.n	45f0 <_malloc_r+0x9c>
    4596:	230c      	movs	r3, #12
    4598:	0030      	movs	r0, r6
    459a:	6033      	str	r3, [r6, #0]
    459c:	f000 fbcc 	bl	4d38 <__malloc_unlock>
    45a0:	e003      	b.n	45aa <_malloc_r+0x56>
    45a2:	2d00      	cmp	r5, #0
    45a4:	dadf      	bge.n	4566 <_malloc_r+0x12>
    45a6:	230c      	movs	r3, #12
    45a8:	6033      	str	r3, [r6, #0]
    45aa:	2000      	movs	r0, #0
    45ac:	bd70      	pop	{r4, r5, r6, pc}
    45ae:	680b      	ldr	r3, [r1, #0]
    45b0:	1b5b      	subs	r3, r3, r5
    45b2:	d41a      	bmi.n	45ea <_malloc_r+0x96>
    45b4:	2b0b      	cmp	r3, #11
    45b6:	d903      	bls.n	45c0 <_malloc_r+0x6c>
    45b8:	600b      	str	r3, [r1, #0]
    45ba:	18cc      	adds	r4, r1, r3
    45bc:	6025      	str	r5, [r4, #0]
    45be:	e003      	b.n	45c8 <_malloc_r+0x74>
    45c0:	428c      	cmp	r4, r1
    45c2:	d10e      	bne.n	45e2 <_malloc_r+0x8e>
    45c4:	6863      	ldr	r3, [r4, #4]
    45c6:	6013      	str	r3, [r2, #0]
    45c8:	0030      	movs	r0, r6
    45ca:	f000 fbb5 	bl	4d38 <__malloc_unlock>
    45ce:	0020      	movs	r0, r4
    45d0:	2207      	movs	r2, #7
    45d2:	300b      	adds	r0, #11
    45d4:	1d23      	adds	r3, r4, #4
    45d6:	4390      	bics	r0, r2
    45d8:	1ac3      	subs	r3, r0, r3
    45da:	d0e7      	beq.n	45ac <_malloc_r+0x58>
    45dc:	425a      	negs	r2, r3
    45de:	50e2      	str	r2, [r4, r3]
    45e0:	e7e4      	b.n	45ac <_malloc_r+0x58>
    45e2:	684b      	ldr	r3, [r1, #4]
    45e4:	6063      	str	r3, [r4, #4]
    45e6:	000c      	movs	r4, r1
    45e8:	e7ee      	b.n	45c8 <_malloc_r+0x74>
    45ea:	000c      	movs	r4, r1
    45ec:	6849      	ldr	r1, [r1, #4]
    45ee:	e7c2      	b.n	4576 <_malloc_r+0x22>
    45f0:	2303      	movs	r3, #3
    45f2:	1cc4      	adds	r4, r0, #3
    45f4:	439c      	bics	r4, r3
    45f6:	42a0      	cmp	r0, r4
    45f8:	d0e0      	beq.n	45bc <_malloc_r+0x68>
    45fa:	1a21      	subs	r1, r4, r0
    45fc:	0030      	movs	r0, r6
    45fe:	f000 fad3 	bl	4ba8 <_sbrk_r>
    4602:	1c43      	adds	r3, r0, #1
    4604:	d1da      	bne.n	45bc <_malloc_r+0x68>
    4606:	e7c6      	b.n	4596 <_malloc_r+0x42>
    4608:	20000458 	.word	0x20000458
    460c:	2000045c 	.word	0x2000045c

00004610 <__sfputc_r>:
    4610:	6893      	ldr	r3, [r2, #8]
    4612:	b510      	push	{r4, lr}
    4614:	3b01      	subs	r3, #1
    4616:	6093      	str	r3, [r2, #8]
    4618:	2b00      	cmp	r3, #0
    461a:	da05      	bge.n	4628 <__sfputc_r+0x18>
    461c:	6994      	ldr	r4, [r2, #24]
    461e:	42a3      	cmp	r3, r4
    4620:	db08      	blt.n	4634 <__sfputc_r+0x24>
    4622:	b2cb      	uxtb	r3, r1
    4624:	2b0a      	cmp	r3, #10
    4626:	d005      	beq.n	4634 <__sfputc_r+0x24>
    4628:	6813      	ldr	r3, [r2, #0]
    462a:	1c58      	adds	r0, r3, #1
    462c:	6010      	str	r0, [r2, #0]
    462e:	7019      	strb	r1, [r3, #0]
    4630:	b2c8      	uxtb	r0, r1
    4632:	bd10      	pop	{r4, pc}
    4634:	f7ff fc7a 	bl	3f2c <__swbuf_r>
    4638:	e7fb      	b.n	4632 <__sfputc_r+0x22>

0000463a <__sfputs_r>:
    463a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    463c:	0006      	movs	r6, r0
    463e:	000f      	movs	r7, r1
    4640:	0014      	movs	r4, r2
    4642:	18d5      	adds	r5, r2, r3
    4644:	42ac      	cmp	r4, r5
    4646:	d101      	bne.n	464c <__sfputs_r+0x12>
    4648:	2000      	movs	r0, #0
    464a:	e007      	b.n	465c <__sfputs_r+0x22>
    464c:	7821      	ldrb	r1, [r4, #0]
    464e:	003a      	movs	r2, r7
    4650:	0030      	movs	r0, r6
    4652:	f7ff ffdd 	bl	4610 <__sfputc_r>
    4656:	3401      	adds	r4, #1
    4658:	1c43      	adds	r3, r0, #1
    465a:	d1f3      	bne.n	4644 <__sfputs_r+0xa>
    465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004660 <_vfiprintf_r>:
    4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    4662:	b09f      	sub	sp, #124	; 0x7c
    4664:	0006      	movs	r6, r0
    4666:	000f      	movs	r7, r1
    4668:	0014      	movs	r4, r2
    466a:	9305      	str	r3, [sp, #20]
    466c:	2800      	cmp	r0, #0
    466e:	d004      	beq.n	467a <_vfiprintf_r+0x1a>
    4670:	6983      	ldr	r3, [r0, #24]
    4672:	2b00      	cmp	r3, #0
    4674:	d101      	bne.n	467a <_vfiprintf_r+0x1a>
    4676:	f7ff fe1d 	bl	42b4 <__sinit>
    467a:	4b7f      	ldr	r3, [pc, #508]	; (4878 <_vfiprintf_r+0x218>)
    467c:	429f      	cmp	r7, r3
    467e:	d15c      	bne.n	473a <_vfiprintf_r+0xda>
    4680:	6877      	ldr	r7, [r6, #4]
    4682:	89bb      	ldrh	r3, [r7, #12]
    4684:	071b      	lsls	r3, r3, #28
    4686:	d562      	bpl.n	474e <_vfiprintf_r+0xee>
    4688:	693b      	ldr	r3, [r7, #16]
    468a:	2b00      	cmp	r3, #0
    468c:	d05f      	beq.n	474e <_vfiprintf_r+0xee>
    468e:	2300      	movs	r3, #0
    4690:	ad06      	add	r5, sp, #24
    4692:	616b      	str	r3, [r5, #20]
    4694:	3320      	adds	r3, #32
    4696:	766b      	strb	r3, [r5, #25]
    4698:	3310      	adds	r3, #16
    469a:	76ab      	strb	r3, [r5, #26]
    469c:	9402      	str	r4, [sp, #8]
    469e:	9c02      	ldr	r4, [sp, #8]
    46a0:	7823      	ldrb	r3, [r4, #0]
    46a2:	2b00      	cmp	r3, #0
    46a4:	d15d      	bne.n	4762 <_vfiprintf_r+0x102>
    46a6:	9b02      	ldr	r3, [sp, #8]
    46a8:	1ae3      	subs	r3, r4, r3
    46aa:	9304      	str	r3, [sp, #16]
    46ac:	d00d      	beq.n	46ca <_vfiprintf_r+0x6a>
    46ae:	9b04      	ldr	r3, [sp, #16]
    46b0:	9a02      	ldr	r2, [sp, #8]
    46b2:	0039      	movs	r1, r7
    46b4:	0030      	movs	r0, r6
    46b6:	f7ff ffc0 	bl	463a <__sfputs_r>
    46ba:	1c43      	adds	r3, r0, #1
    46bc:	d100      	bne.n	46c0 <_vfiprintf_r+0x60>
    46be:	e0cc      	b.n	485a <_vfiprintf_r+0x1fa>
    46c0:	696a      	ldr	r2, [r5, #20]
    46c2:	9b04      	ldr	r3, [sp, #16]
    46c4:	4694      	mov	ip, r2
    46c6:	4463      	add	r3, ip
    46c8:	616b      	str	r3, [r5, #20]
    46ca:	7823      	ldrb	r3, [r4, #0]
    46cc:	2b00      	cmp	r3, #0
    46ce:	d100      	bne.n	46d2 <_vfiprintf_r+0x72>
    46d0:	e0c3      	b.n	485a <_vfiprintf_r+0x1fa>
    46d2:	2201      	movs	r2, #1
    46d4:	2300      	movs	r3, #0
    46d6:	4252      	negs	r2, r2
    46d8:	606a      	str	r2, [r5, #4]
    46da:	a902      	add	r1, sp, #8
    46dc:	3254      	adds	r2, #84	; 0x54
    46de:	1852      	adds	r2, r2, r1
    46e0:	3401      	adds	r4, #1
    46e2:	602b      	str	r3, [r5, #0]
    46e4:	60eb      	str	r3, [r5, #12]
    46e6:	60ab      	str	r3, [r5, #8]
    46e8:	7013      	strb	r3, [r2, #0]
    46ea:	65ab      	str	r3, [r5, #88]	; 0x58
    46ec:	7821      	ldrb	r1, [r4, #0]
    46ee:	2205      	movs	r2, #5
    46f0:	4862      	ldr	r0, [pc, #392]	; (487c <_vfiprintf_r+0x21c>)
    46f2:	f000 fb15 	bl	4d20 <memchr>
    46f6:	1c63      	adds	r3, r4, #1
    46f8:	469c      	mov	ip, r3
    46fa:	2800      	cmp	r0, #0
    46fc:	d135      	bne.n	476a <_vfiprintf_r+0x10a>
    46fe:	6829      	ldr	r1, [r5, #0]
    4700:	06cb      	lsls	r3, r1, #27
    4702:	d504      	bpl.n	470e <_vfiprintf_r+0xae>
    4704:	2353      	movs	r3, #83	; 0x53
    4706:	aa02      	add	r2, sp, #8
    4708:	3020      	adds	r0, #32
    470a:	189b      	adds	r3, r3, r2
    470c:	7018      	strb	r0, [r3, #0]
    470e:	070b      	lsls	r3, r1, #28
    4710:	d504      	bpl.n	471c <_vfiprintf_r+0xbc>
    4712:	2353      	movs	r3, #83	; 0x53
    4714:	202b      	movs	r0, #43	; 0x2b
    4716:	aa02      	add	r2, sp, #8
    4718:	189b      	adds	r3, r3, r2
    471a:	7018      	strb	r0, [r3, #0]
    471c:	7823      	ldrb	r3, [r4, #0]
    471e:	2b2a      	cmp	r3, #42	; 0x2a
    4720:	d02c      	beq.n	477c <_vfiprintf_r+0x11c>
    4722:	2000      	movs	r0, #0
    4724:	210a      	movs	r1, #10
    4726:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4728:	7822      	ldrb	r2, [r4, #0]
    472a:	3a30      	subs	r2, #48	; 0x30
    472c:	2a09      	cmp	r2, #9
    472e:	d800      	bhi.n	4732 <_vfiprintf_r+0xd2>
    4730:	e06b      	b.n	480a <_vfiprintf_r+0x1aa>
    4732:	2800      	cmp	r0, #0
    4734:	d02a      	beq.n	478c <_vfiprintf_r+0x12c>
    4736:	9309      	str	r3, [sp, #36]	; 0x24
    4738:	e028      	b.n	478c <_vfiprintf_r+0x12c>
    473a:	4b51      	ldr	r3, [pc, #324]	; (4880 <_vfiprintf_r+0x220>)
    473c:	429f      	cmp	r7, r3
    473e:	d101      	bne.n	4744 <_vfiprintf_r+0xe4>
    4740:	68b7      	ldr	r7, [r6, #8]
    4742:	e79e      	b.n	4682 <_vfiprintf_r+0x22>
    4744:	4b4f      	ldr	r3, [pc, #316]	; (4884 <_vfiprintf_r+0x224>)
    4746:	429f      	cmp	r7, r3
    4748:	d19b      	bne.n	4682 <_vfiprintf_r+0x22>
    474a:	68f7      	ldr	r7, [r6, #12]
    474c:	e799      	b.n	4682 <_vfiprintf_r+0x22>
    474e:	0039      	movs	r1, r7
    4750:	0030      	movs	r0, r6
    4752:	f7ff fc41 	bl	3fd8 <__swsetup_r>
    4756:	2800      	cmp	r0, #0
    4758:	d099      	beq.n	468e <_vfiprintf_r+0x2e>
    475a:	2001      	movs	r0, #1
    475c:	4240      	negs	r0, r0
    475e:	b01f      	add	sp, #124	; 0x7c
    4760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4762:	2b25      	cmp	r3, #37	; 0x25
    4764:	d09f      	beq.n	46a6 <_vfiprintf_r+0x46>
    4766:	3401      	adds	r4, #1
    4768:	e79a      	b.n	46a0 <_vfiprintf_r+0x40>
    476a:	4b44      	ldr	r3, [pc, #272]	; (487c <_vfiprintf_r+0x21c>)
    476c:	6829      	ldr	r1, [r5, #0]
    476e:	1ac0      	subs	r0, r0, r3
    4770:	2301      	movs	r3, #1
    4772:	4083      	lsls	r3, r0
    4774:	430b      	orrs	r3, r1
    4776:	602b      	str	r3, [r5, #0]
    4778:	4664      	mov	r4, ip
    477a:	e7b7      	b.n	46ec <_vfiprintf_r+0x8c>
    477c:	9b05      	ldr	r3, [sp, #20]
    477e:	1d18      	adds	r0, r3, #4
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	9005      	str	r0, [sp, #20]
    4784:	2b00      	cmp	r3, #0
    4786:	db3a      	blt.n	47fe <_vfiprintf_r+0x19e>
    4788:	9309      	str	r3, [sp, #36]	; 0x24
    478a:	4664      	mov	r4, ip
    478c:	7823      	ldrb	r3, [r4, #0]
    478e:	2b2e      	cmp	r3, #46	; 0x2e
    4790:	d10b      	bne.n	47aa <_vfiprintf_r+0x14a>
    4792:	7863      	ldrb	r3, [r4, #1]
    4794:	1c62      	adds	r2, r4, #1
    4796:	2b2a      	cmp	r3, #42	; 0x2a
    4798:	d13f      	bne.n	481a <_vfiprintf_r+0x1ba>
    479a:	9b05      	ldr	r3, [sp, #20]
    479c:	3402      	adds	r4, #2
    479e:	1d1a      	adds	r2, r3, #4
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	9205      	str	r2, [sp, #20]
    47a4:	2b00      	cmp	r3, #0
    47a6:	db35      	blt.n	4814 <_vfiprintf_r+0x1b4>
    47a8:	9307      	str	r3, [sp, #28]
    47aa:	7821      	ldrb	r1, [r4, #0]
    47ac:	2203      	movs	r2, #3
    47ae:	4836      	ldr	r0, [pc, #216]	; (4888 <_vfiprintf_r+0x228>)
    47b0:	f000 fab6 	bl	4d20 <memchr>
    47b4:	2800      	cmp	r0, #0
    47b6:	d007      	beq.n	47c8 <_vfiprintf_r+0x168>
    47b8:	4b33      	ldr	r3, [pc, #204]	; (4888 <_vfiprintf_r+0x228>)
    47ba:	682a      	ldr	r2, [r5, #0]
    47bc:	1ac0      	subs	r0, r0, r3
    47be:	2340      	movs	r3, #64	; 0x40
    47c0:	4083      	lsls	r3, r0
    47c2:	4313      	orrs	r3, r2
    47c4:	602b      	str	r3, [r5, #0]
    47c6:	3401      	adds	r4, #1
    47c8:	7821      	ldrb	r1, [r4, #0]
    47ca:	1c63      	adds	r3, r4, #1
    47cc:	2206      	movs	r2, #6
    47ce:	482f      	ldr	r0, [pc, #188]	; (488c <_vfiprintf_r+0x22c>)
    47d0:	9302      	str	r3, [sp, #8]
    47d2:	7629      	strb	r1, [r5, #24]
    47d4:	f000 faa4 	bl	4d20 <memchr>
    47d8:	2800      	cmp	r0, #0
    47da:	d044      	beq.n	4866 <_vfiprintf_r+0x206>
    47dc:	4b2c      	ldr	r3, [pc, #176]	; (4890 <_vfiprintf_r+0x230>)
    47de:	2b00      	cmp	r3, #0
    47e0:	d12f      	bne.n	4842 <_vfiprintf_r+0x1e2>
    47e2:	6829      	ldr	r1, [r5, #0]
    47e4:	9b05      	ldr	r3, [sp, #20]
    47e6:	2207      	movs	r2, #7
    47e8:	05c9      	lsls	r1, r1, #23
    47ea:	d528      	bpl.n	483e <_vfiprintf_r+0x1de>
    47ec:	189b      	adds	r3, r3, r2
    47ee:	4393      	bics	r3, r2
    47f0:	3308      	adds	r3, #8
    47f2:	9305      	str	r3, [sp, #20]
    47f4:	696b      	ldr	r3, [r5, #20]
    47f6:	9a03      	ldr	r2, [sp, #12]
    47f8:	189b      	adds	r3, r3, r2
    47fa:	616b      	str	r3, [r5, #20]
    47fc:	e74f      	b.n	469e <_vfiprintf_r+0x3e>
    47fe:	425b      	negs	r3, r3
    4800:	60eb      	str	r3, [r5, #12]
    4802:	2302      	movs	r3, #2
    4804:	430b      	orrs	r3, r1
    4806:	602b      	str	r3, [r5, #0]
    4808:	e7bf      	b.n	478a <_vfiprintf_r+0x12a>
    480a:	434b      	muls	r3, r1
    480c:	3401      	adds	r4, #1
    480e:	189b      	adds	r3, r3, r2
    4810:	2001      	movs	r0, #1
    4812:	e789      	b.n	4728 <_vfiprintf_r+0xc8>
    4814:	2301      	movs	r3, #1
    4816:	425b      	negs	r3, r3
    4818:	e7c6      	b.n	47a8 <_vfiprintf_r+0x148>
    481a:	2300      	movs	r3, #0
    481c:	0014      	movs	r4, r2
    481e:	200a      	movs	r0, #10
    4820:	001a      	movs	r2, r3
    4822:	606b      	str	r3, [r5, #4]
    4824:	7821      	ldrb	r1, [r4, #0]
    4826:	3930      	subs	r1, #48	; 0x30
    4828:	2909      	cmp	r1, #9
    482a:	d903      	bls.n	4834 <_vfiprintf_r+0x1d4>
    482c:	2b00      	cmp	r3, #0
    482e:	d0bc      	beq.n	47aa <_vfiprintf_r+0x14a>
    4830:	9207      	str	r2, [sp, #28]
    4832:	e7ba      	b.n	47aa <_vfiprintf_r+0x14a>
    4834:	4342      	muls	r2, r0
    4836:	3401      	adds	r4, #1
    4838:	1852      	adds	r2, r2, r1
    483a:	2301      	movs	r3, #1
    483c:	e7f2      	b.n	4824 <_vfiprintf_r+0x1c4>
    483e:	3307      	adds	r3, #7
    4840:	e7d5      	b.n	47ee <_vfiprintf_r+0x18e>
    4842:	ab05      	add	r3, sp, #20
    4844:	9300      	str	r3, [sp, #0]
    4846:	003a      	movs	r2, r7
    4848:	4b12      	ldr	r3, [pc, #72]	; (4894 <_vfiprintf_r+0x234>)
    484a:	0029      	movs	r1, r5
    484c:	0030      	movs	r0, r6
    484e:	e000      	b.n	4852 <_vfiprintf_r+0x1f2>
    4850:	bf00      	nop
    4852:	9003      	str	r0, [sp, #12]
    4854:	9b03      	ldr	r3, [sp, #12]
    4856:	3301      	adds	r3, #1
    4858:	d1cc      	bne.n	47f4 <_vfiprintf_r+0x194>
    485a:	89bb      	ldrh	r3, [r7, #12]
    485c:	065b      	lsls	r3, r3, #25
    485e:	d500      	bpl.n	4862 <_vfiprintf_r+0x202>
    4860:	e77b      	b.n	475a <_vfiprintf_r+0xfa>
    4862:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4864:	e77b      	b.n	475e <_vfiprintf_r+0xfe>
    4866:	ab05      	add	r3, sp, #20
    4868:	9300      	str	r3, [sp, #0]
    486a:	003a      	movs	r2, r7
    486c:	4b09      	ldr	r3, [pc, #36]	; (4894 <_vfiprintf_r+0x234>)
    486e:	0029      	movs	r1, r5
    4870:	0030      	movs	r0, r6
    4872:	f000 f87f 	bl	4974 <_printf_i>
    4876:	e7ec      	b.n	4852 <_vfiprintf_r+0x1f2>
    4878:	000052fc 	.word	0x000052fc
    487c:	0000533c 	.word	0x0000533c
    4880:	0000531c 	.word	0x0000531c
    4884:	000052dc 	.word	0x000052dc
    4888:	00005342 	.word	0x00005342
    488c:	00005346 	.word	0x00005346
    4890:	00000000 	.word	0x00000000
    4894:	0000463b 	.word	0x0000463b

00004898 <_printf_common>:
    4898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    489a:	0015      	movs	r5, r2
    489c:	9301      	str	r3, [sp, #4]
    489e:	688a      	ldr	r2, [r1, #8]
    48a0:	690b      	ldr	r3, [r1, #16]
    48a2:	9000      	str	r0, [sp, #0]
    48a4:	000c      	movs	r4, r1
    48a6:	4293      	cmp	r3, r2
    48a8:	da00      	bge.n	48ac <_printf_common+0x14>
    48aa:	0013      	movs	r3, r2
    48ac:	0022      	movs	r2, r4
    48ae:	602b      	str	r3, [r5, #0]
    48b0:	3243      	adds	r2, #67	; 0x43
    48b2:	7812      	ldrb	r2, [r2, #0]
    48b4:	2a00      	cmp	r2, #0
    48b6:	d001      	beq.n	48bc <_printf_common+0x24>
    48b8:	3301      	adds	r3, #1
    48ba:	602b      	str	r3, [r5, #0]
    48bc:	6823      	ldr	r3, [r4, #0]
    48be:	069b      	lsls	r3, r3, #26
    48c0:	d502      	bpl.n	48c8 <_printf_common+0x30>
    48c2:	682b      	ldr	r3, [r5, #0]
    48c4:	3302      	adds	r3, #2
    48c6:	602b      	str	r3, [r5, #0]
    48c8:	2706      	movs	r7, #6
    48ca:	6823      	ldr	r3, [r4, #0]
    48cc:	401f      	ands	r7, r3
    48ce:	d027      	beq.n	4920 <_printf_common+0x88>
    48d0:	0023      	movs	r3, r4
    48d2:	3343      	adds	r3, #67	; 0x43
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	1e5a      	subs	r2, r3, #1
    48d8:	4193      	sbcs	r3, r2
    48da:	6822      	ldr	r2, [r4, #0]
    48dc:	0692      	lsls	r2, r2, #26
    48de:	d430      	bmi.n	4942 <_printf_common+0xaa>
    48e0:	0022      	movs	r2, r4
    48e2:	9901      	ldr	r1, [sp, #4]
    48e4:	3243      	adds	r2, #67	; 0x43
    48e6:	9800      	ldr	r0, [sp, #0]
    48e8:	9e08      	ldr	r6, [sp, #32]
    48ea:	47b0      	blx	r6
    48ec:	1c43      	adds	r3, r0, #1
    48ee:	d025      	beq.n	493c <_printf_common+0xa4>
    48f0:	2306      	movs	r3, #6
    48f2:	6820      	ldr	r0, [r4, #0]
    48f4:	682a      	ldr	r2, [r5, #0]
    48f6:	68e1      	ldr	r1, [r4, #12]
    48f8:	4003      	ands	r3, r0
    48fa:	2500      	movs	r5, #0
    48fc:	2b04      	cmp	r3, #4
    48fe:	d103      	bne.n	4908 <_printf_common+0x70>
    4900:	1a8d      	subs	r5, r1, r2
    4902:	43eb      	mvns	r3, r5
    4904:	17db      	asrs	r3, r3, #31
    4906:	401d      	ands	r5, r3
    4908:	68a3      	ldr	r3, [r4, #8]
    490a:	6922      	ldr	r2, [r4, #16]
    490c:	4293      	cmp	r3, r2
    490e:	dd01      	ble.n	4914 <_printf_common+0x7c>
    4910:	1a9b      	subs	r3, r3, r2
    4912:	18ed      	adds	r5, r5, r3
    4914:	2700      	movs	r7, #0
    4916:	42bd      	cmp	r5, r7
    4918:	d120      	bne.n	495c <_printf_common+0xc4>
    491a:	2000      	movs	r0, #0
    491c:	e010      	b.n	4940 <_printf_common+0xa8>
    491e:	3701      	adds	r7, #1
    4920:	68e3      	ldr	r3, [r4, #12]
    4922:	682a      	ldr	r2, [r5, #0]
    4924:	1a9b      	subs	r3, r3, r2
    4926:	429f      	cmp	r7, r3
    4928:	dad2      	bge.n	48d0 <_printf_common+0x38>
    492a:	0022      	movs	r2, r4
    492c:	2301      	movs	r3, #1
    492e:	3219      	adds	r2, #25
    4930:	9901      	ldr	r1, [sp, #4]
    4932:	9800      	ldr	r0, [sp, #0]
    4934:	9e08      	ldr	r6, [sp, #32]
    4936:	47b0      	blx	r6
    4938:	1c43      	adds	r3, r0, #1
    493a:	d1f0      	bne.n	491e <_printf_common+0x86>
    493c:	2001      	movs	r0, #1
    493e:	4240      	negs	r0, r0
    4940:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4942:	2030      	movs	r0, #48	; 0x30
    4944:	18e1      	adds	r1, r4, r3
    4946:	3143      	adds	r1, #67	; 0x43
    4948:	7008      	strb	r0, [r1, #0]
    494a:	0021      	movs	r1, r4
    494c:	1c5a      	adds	r2, r3, #1
    494e:	3145      	adds	r1, #69	; 0x45
    4950:	7809      	ldrb	r1, [r1, #0]
    4952:	18a2      	adds	r2, r4, r2
    4954:	3243      	adds	r2, #67	; 0x43
    4956:	3302      	adds	r3, #2
    4958:	7011      	strb	r1, [r2, #0]
    495a:	e7c1      	b.n	48e0 <_printf_common+0x48>
    495c:	0022      	movs	r2, r4
    495e:	2301      	movs	r3, #1
    4960:	321a      	adds	r2, #26
    4962:	9901      	ldr	r1, [sp, #4]
    4964:	9800      	ldr	r0, [sp, #0]
    4966:	9e08      	ldr	r6, [sp, #32]
    4968:	47b0      	blx	r6
    496a:	1c43      	adds	r3, r0, #1
    496c:	d0e6      	beq.n	493c <_printf_common+0xa4>
    496e:	3701      	adds	r7, #1
    4970:	e7d1      	b.n	4916 <_printf_common+0x7e>
	...

00004974 <_printf_i>:
    4974:	b5f0      	push	{r4, r5, r6, r7, lr}
    4976:	b08b      	sub	sp, #44	; 0x2c
    4978:	9206      	str	r2, [sp, #24]
    497a:	000a      	movs	r2, r1
    497c:	3243      	adds	r2, #67	; 0x43
    497e:	9307      	str	r3, [sp, #28]
    4980:	9005      	str	r0, [sp, #20]
    4982:	9204      	str	r2, [sp, #16]
    4984:	7e0a      	ldrb	r2, [r1, #24]
    4986:	000c      	movs	r4, r1
    4988:	9b10      	ldr	r3, [sp, #64]	; 0x40
    498a:	2a6e      	cmp	r2, #110	; 0x6e
    498c:	d100      	bne.n	4990 <_printf_i+0x1c>
    498e:	e08f      	b.n	4ab0 <_printf_i+0x13c>
    4990:	d817      	bhi.n	49c2 <_printf_i+0x4e>
    4992:	2a63      	cmp	r2, #99	; 0x63
    4994:	d02c      	beq.n	49f0 <_printf_i+0x7c>
    4996:	d808      	bhi.n	49aa <_printf_i+0x36>
    4998:	2a00      	cmp	r2, #0
    499a:	d100      	bne.n	499e <_printf_i+0x2a>
    499c:	e099      	b.n	4ad2 <_printf_i+0x15e>
    499e:	2a58      	cmp	r2, #88	; 0x58
    49a0:	d054      	beq.n	4a4c <_printf_i+0xd8>
    49a2:	0026      	movs	r6, r4
    49a4:	3642      	adds	r6, #66	; 0x42
    49a6:	7032      	strb	r2, [r6, #0]
    49a8:	e029      	b.n	49fe <_printf_i+0x8a>
    49aa:	2a64      	cmp	r2, #100	; 0x64
    49ac:	d001      	beq.n	49b2 <_printf_i+0x3e>
    49ae:	2a69      	cmp	r2, #105	; 0x69
    49b0:	d1f7      	bne.n	49a2 <_printf_i+0x2e>
    49b2:	6821      	ldr	r1, [r4, #0]
    49b4:	681a      	ldr	r2, [r3, #0]
    49b6:	0608      	lsls	r0, r1, #24
    49b8:	d523      	bpl.n	4a02 <_printf_i+0x8e>
    49ba:	1d11      	adds	r1, r2, #4
    49bc:	6019      	str	r1, [r3, #0]
    49be:	6815      	ldr	r5, [r2, #0]
    49c0:	e025      	b.n	4a0e <_printf_i+0x9a>
    49c2:	2a73      	cmp	r2, #115	; 0x73
    49c4:	d100      	bne.n	49c8 <_printf_i+0x54>
    49c6:	e088      	b.n	4ada <_printf_i+0x166>
    49c8:	d808      	bhi.n	49dc <_printf_i+0x68>
    49ca:	2a6f      	cmp	r2, #111	; 0x6f
    49cc:	d029      	beq.n	4a22 <_printf_i+0xae>
    49ce:	2a70      	cmp	r2, #112	; 0x70
    49d0:	d1e7      	bne.n	49a2 <_printf_i+0x2e>
    49d2:	2220      	movs	r2, #32
    49d4:	6809      	ldr	r1, [r1, #0]
    49d6:	430a      	orrs	r2, r1
    49d8:	6022      	str	r2, [r4, #0]
    49da:	e003      	b.n	49e4 <_printf_i+0x70>
    49dc:	2a75      	cmp	r2, #117	; 0x75
    49de:	d020      	beq.n	4a22 <_printf_i+0xae>
    49e0:	2a78      	cmp	r2, #120	; 0x78
    49e2:	d1de      	bne.n	49a2 <_printf_i+0x2e>
    49e4:	0022      	movs	r2, r4
    49e6:	2178      	movs	r1, #120	; 0x78
    49e8:	3245      	adds	r2, #69	; 0x45
    49ea:	7011      	strb	r1, [r2, #0]
    49ec:	4a6c      	ldr	r2, [pc, #432]	; (4ba0 <_printf_i+0x22c>)
    49ee:	e030      	b.n	4a52 <_printf_i+0xde>
    49f0:	000e      	movs	r6, r1
    49f2:	681a      	ldr	r2, [r3, #0]
    49f4:	3642      	adds	r6, #66	; 0x42
    49f6:	1d11      	adds	r1, r2, #4
    49f8:	6019      	str	r1, [r3, #0]
    49fa:	6813      	ldr	r3, [r2, #0]
    49fc:	7033      	strb	r3, [r6, #0]
    49fe:	2301      	movs	r3, #1
    4a00:	e079      	b.n	4af6 <_printf_i+0x182>
    4a02:	0649      	lsls	r1, r1, #25
    4a04:	d5d9      	bpl.n	49ba <_printf_i+0x46>
    4a06:	1d11      	adds	r1, r2, #4
    4a08:	6019      	str	r1, [r3, #0]
    4a0a:	2300      	movs	r3, #0
    4a0c:	5ed5      	ldrsh	r5, [r2, r3]
    4a0e:	2d00      	cmp	r5, #0
    4a10:	da03      	bge.n	4a1a <_printf_i+0xa6>
    4a12:	232d      	movs	r3, #45	; 0x2d
    4a14:	9a04      	ldr	r2, [sp, #16]
    4a16:	426d      	negs	r5, r5
    4a18:	7013      	strb	r3, [r2, #0]
    4a1a:	4b62      	ldr	r3, [pc, #392]	; (4ba4 <_printf_i+0x230>)
    4a1c:	270a      	movs	r7, #10
    4a1e:	9303      	str	r3, [sp, #12]
    4a20:	e02f      	b.n	4a82 <_printf_i+0x10e>
    4a22:	6820      	ldr	r0, [r4, #0]
    4a24:	6819      	ldr	r1, [r3, #0]
    4a26:	0605      	lsls	r5, r0, #24
    4a28:	d503      	bpl.n	4a32 <_printf_i+0xbe>
    4a2a:	1d08      	adds	r0, r1, #4
    4a2c:	6018      	str	r0, [r3, #0]
    4a2e:	680d      	ldr	r5, [r1, #0]
    4a30:	e005      	b.n	4a3e <_printf_i+0xca>
    4a32:	0640      	lsls	r0, r0, #25
    4a34:	d5f9      	bpl.n	4a2a <_printf_i+0xb6>
    4a36:	680d      	ldr	r5, [r1, #0]
    4a38:	1d08      	adds	r0, r1, #4
    4a3a:	6018      	str	r0, [r3, #0]
    4a3c:	b2ad      	uxth	r5, r5
    4a3e:	4b59      	ldr	r3, [pc, #356]	; (4ba4 <_printf_i+0x230>)
    4a40:	2708      	movs	r7, #8
    4a42:	9303      	str	r3, [sp, #12]
    4a44:	2a6f      	cmp	r2, #111	; 0x6f
    4a46:	d018      	beq.n	4a7a <_printf_i+0x106>
    4a48:	270a      	movs	r7, #10
    4a4a:	e016      	b.n	4a7a <_printf_i+0x106>
    4a4c:	3145      	adds	r1, #69	; 0x45
    4a4e:	700a      	strb	r2, [r1, #0]
    4a50:	4a54      	ldr	r2, [pc, #336]	; (4ba4 <_printf_i+0x230>)
    4a52:	9203      	str	r2, [sp, #12]
    4a54:	681a      	ldr	r2, [r3, #0]
    4a56:	6821      	ldr	r1, [r4, #0]
    4a58:	1d10      	adds	r0, r2, #4
    4a5a:	6018      	str	r0, [r3, #0]
    4a5c:	6815      	ldr	r5, [r2, #0]
    4a5e:	0608      	lsls	r0, r1, #24
    4a60:	d522      	bpl.n	4aa8 <_printf_i+0x134>
    4a62:	07cb      	lsls	r3, r1, #31
    4a64:	d502      	bpl.n	4a6c <_printf_i+0xf8>
    4a66:	2320      	movs	r3, #32
    4a68:	4319      	orrs	r1, r3
    4a6a:	6021      	str	r1, [r4, #0]
    4a6c:	2710      	movs	r7, #16
    4a6e:	2d00      	cmp	r5, #0
    4a70:	d103      	bne.n	4a7a <_printf_i+0x106>
    4a72:	2320      	movs	r3, #32
    4a74:	6822      	ldr	r2, [r4, #0]
    4a76:	439a      	bics	r2, r3
    4a78:	6022      	str	r2, [r4, #0]
    4a7a:	0023      	movs	r3, r4
    4a7c:	2200      	movs	r2, #0
    4a7e:	3343      	adds	r3, #67	; 0x43
    4a80:	701a      	strb	r2, [r3, #0]
    4a82:	6863      	ldr	r3, [r4, #4]
    4a84:	60a3      	str	r3, [r4, #8]
    4a86:	2b00      	cmp	r3, #0
    4a88:	db5c      	blt.n	4b44 <_printf_i+0x1d0>
    4a8a:	2204      	movs	r2, #4
    4a8c:	6821      	ldr	r1, [r4, #0]
    4a8e:	4391      	bics	r1, r2
    4a90:	6021      	str	r1, [r4, #0]
    4a92:	2d00      	cmp	r5, #0
    4a94:	d158      	bne.n	4b48 <_printf_i+0x1d4>
    4a96:	9e04      	ldr	r6, [sp, #16]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d064      	beq.n	4b66 <_printf_i+0x1f2>
    4a9c:	0026      	movs	r6, r4
    4a9e:	9b03      	ldr	r3, [sp, #12]
    4aa0:	3642      	adds	r6, #66	; 0x42
    4aa2:	781b      	ldrb	r3, [r3, #0]
    4aa4:	7033      	strb	r3, [r6, #0]
    4aa6:	e05e      	b.n	4b66 <_printf_i+0x1f2>
    4aa8:	0648      	lsls	r0, r1, #25
    4aaa:	d5da      	bpl.n	4a62 <_printf_i+0xee>
    4aac:	b2ad      	uxth	r5, r5
    4aae:	e7d8      	b.n	4a62 <_printf_i+0xee>
    4ab0:	6809      	ldr	r1, [r1, #0]
    4ab2:	681a      	ldr	r2, [r3, #0]
    4ab4:	0608      	lsls	r0, r1, #24
    4ab6:	d505      	bpl.n	4ac4 <_printf_i+0x150>
    4ab8:	1d11      	adds	r1, r2, #4
    4aba:	6019      	str	r1, [r3, #0]
    4abc:	6813      	ldr	r3, [r2, #0]
    4abe:	6962      	ldr	r2, [r4, #20]
    4ac0:	601a      	str	r2, [r3, #0]
    4ac2:	e006      	b.n	4ad2 <_printf_i+0x15e>
    4ac4:	0649      	lsls	r1, r1, #25
    4ac6:	d5f7      	bpl.n	4ab8 <_printf_i+0x144>
    4ac8:	1d11      	adds	r1, r2, #4
    4aca:	6019      	str	r1, [r3, #0]
    4acc:	6813      	ldr	r3, [r2, #0]
    4ace:	8aa2      	ldrh	r2, [r4, #20]
    4ad0:	801a      	strh	r2, [r3, #0]
    4ad2:	2300      	movs	r3, #0
    4ad4:	9e04      	ldr	r6, [sp, #16]
    4ad6:	6123      	str	r3, [r4, #16]
    4ad8:	e054      	b.n	4b84 <_printf_i+0x210>
    4ada:	681a      	ldr	r2, [r3, #0]
    4adc:	1d11      	adds	r1, r2, #4
    4ade:	6019      	str	r1, [r3, #0]
    4ae0:	6816      	ldr	r6, [r2, #0]
    4ae2:	2100      	movs	r1, #0
    4ae4:	6862      	ldr	r2, [r4, #4]
    4ae6:	0030      	movs	r0, r6
    4ae8:	f000 f91a 	bl	4d20 <memchr>
    4aec:	2800      	cmp	r0, #0
    4aee:	d001      	beq.n	4af4 <_printf_i+0x180>
    4af0:	1b80      	subs	r0, r0, r6
    4af2:	6060      	str	r0, [r4, #4]
    4af4:	6863      	ldr	r3, [r4, #4]
    4af6:	6123      	str	r3, [r4, #16]
    4af8:	2300      	movs	r3, #0
    4afa:	9a04      	ldr	r2, [sp, #16]
    4afc:	7013      	strb	r3, [r2, #0]
    4afe:	e041      	b.n	4b84 <_printf_i+0x210>
    4b00:	6923      	ldr	r3, [r4, #16]
    4b02:	0032      	movs	r2, r6
    4b04:	9906      	ldr	r1, [sp, #24]
    4b06:	9805      	ldr	r0, [sp, #20]
    4b08:	9d07      	ldr	r5, [sp, #28]
    4b0a:	47a8      	blx	r5
    4b0c:	1c43      	adds	r3, r0, #1
    4b0e:	d043      	beq.n	4b98 <_printf_i+0x224>
    4b10:	6823      	ldr	r3, [r4, #0]
    4b12:	2500      	movs	r5, #0
    4b14:	079b      	lsls	r3, r3, #30
    4b16:	d40f      	bmi.n	4b38 <_printf_i+0x1c4>
    4b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b1a:	68e0      	ldr	r0, [r4, #12]
    4b1c:	4298      	cmp	r0, r3
    4b1e:	da3d      	bge.n	4b9c <_printf_i+0x228>
    4b20:	0018      	movs	r0, r3
    4b22:	e03b      	b.n	4b9c <_printf_i+0x228>
    4b24:	0022      	movs	r2, r4
    4b26:	2301      	movs	r3, #1
    4b28:	3219      	adds	r2, #25
    4b2a:	9906      	ldr	r1, [sp, #24]
    4b2c:	9805      	ldr	r0, [sp, #20]
    4b2e:	9e07      	ldr	r6, [sp, #28]
    4b30:	47b0      	blx	r6
    4b32:	1c43      	adds	r3, r0, #1
    4b34:	d030      	beq.n	4b98 <_printf_i+0x224>
    4b36:	3501      	adds	r5, #1
    4b38:	68e3      	ldr	r3, [r4, #12]
    4b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4b3c:	1a9b      	subs	r3, r3, r2
    4b3e:	429d      	cmp	r5, r3
    4b40:	dbf0      	blt.n	4b24 <_printf_i+0x1b0>
    4b42:	e7e9      	b.n	4b18 <_printf_i+0x1a4>
    4b44:	2d00      	cmp	r5, #0
    4b46:	d0a9      	beq.n	4a9c <_printf_i+0x128>
    4b48:	9e04      	ldr	r6, [sp, #16]
    4b4a:	0028      	movs	r0, r5
    4b4c:	0039      	movs	r1, r7
    4b4e:	f7fe fe59 	bl	3804 <__aeabi_uidivmod>
    4b52:	9b03      	ldr	r3, [sp, #12]
    4b54:	3e01      	subs	r6, #1
    4b56:	5c5b      	ldrb	r3, [r3, r1]
    4b58:	0028      	movs	r0, r5
    4b5a:	7033      	strb	r3, [r6, #0]
    4b5c:	0039      	movs	r1, r7
    4b5e:	f7fe fdcb 	bl	36f8 <__udivsi3>
    4b62:	1e05      	subs	r5, r0, #0
    4b64:	d1f1      	bne.n	4b4a <_printf_i+0x1d6>
    4b66:	2f08      	cmp	r7, #8
    4b68:	d109      	bne.n	4b7e <_printf_i+0x20a>
    4b6a:	6823      	ldr	r3, [r4, #0]
    4b6c:	07db      	lsls	r3, r3, #31
    4b6e:	d506      	bpl.n	4b7e <_printf_i+0x20a>
    4b70:	6863      	ldr	r3, [r4, #4]
    4b72:	6922      	ldr	r2, [r4, #16]
    4b74:	4293      	cmp	r3, r2
    4b76:	dc02      	bgt.n	4b7e <_printf_i+0x20a>
    4b78:	2330      	movs	r3, #48	; 0x30
    4b7a:	3e01      	subs	r6, #1
    4b7c:	7033      	strb	r3, [r6, #0]
    4b7e:	9b04      	ldr	r3, [sp, #16]
    4b80:	1b9b      	subs	r3, r3, r6
    4b82:	6123      	str	r3, [r4, #16]
    4b84:	9b07      	ldr	r3, [sp, #28]
    4b86:	aa09      	add	r2, sp, #36	; 0x24
    4b88:	9300      	str	r3, [sp, #0]
    4b8a:	0021      	movs	r1, r4
    4b8c:	9b06      	ldr	r3, [sp, #24]
    4b8e:	9805      	ldr	r0, [sp, #20]
    4b90:	f7ff fe82 	bl	4898 <_printf_common>
    4b94:	1c43      	adds	r3, r0, #1
    4b96:	d1b3      	bne.n	4b00 <_printf_i+0x18c>
    4b98:	2001      	movs	r0, #1
    4b9a:	4240      	negs	r0, r0
    4b9c:	b00b      	add	sp, #44	; 0x2c
    4b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ba0:	0000535e 	.word	0x0000535e
    4ba4:	0000534d 	.word	0x0000534d

00004ba8 <_sbrk_r>:
    4ba8:	2300      	movs	r3, #0
    4baa:	b570      	push	{r4, r5, r6, lr}
    4bac:	4c06      	ldr	r4, [pc, #24]	; (4bc8 <_sbrk_r+0x20>)
    4bae:	0005      	movs	r5, r0
    4bb0:	0008      	movs	r0, r1
    4bb2:	6023      	str	r3, [r4, #0]
    4bb4:	f7fd fdc6 	bl	2744 <_sbrk>
    4bb8:	1c43      	adds	r3, r0, #1
    4bba:	d103      	bne.n	4bc4 <_sbrk_r+0x1c>
    4bbc:	6823      	ldr	r3, [r4, #0]
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d000      	beq.n	4bc4 <_sbrk_r+0x1c>
    4bc2:	602b      	str	r3, [r5, #0]
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	2000051c 	.word	0x2000051c

00004bcc <__sread>:
    4bcc:	b570      	push	{r4, r5, r6, lr}
    4bce:	000c      	movs	r4, r1
    4bd0:	250e      	movs	r5, #14
    4bd2:	5f49      	ldrsh	r1, [r1, r5]
    4bd4:	f000 f8b2 	bl	4d3c <_read_r>
    4bd8:	2800      	cmp	r0, #0
    4bda:	db03      	blt.n	4be4 <__sread+0x18>
    4bdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4bde:	181b      	adds	r3, r3, r0
    4be0:	6563      	str	r3, [r4, #84]	; 0x54
    4be2:	bd70      	pop	{r4, r5, r6, pc}
    4be4:	89a3      	ldrh	r3, [r4, #12]
    4be6:	4a02      	ldr	r2, [pc, #8]	; (4bf0 <__sread+0x24>)
    4be8:	4013      	ands	r3, r2
    4bea:	81a3      	strh	r3, [r4, #12]
    4bec:	e7f9      	b.n	4be2 <__sread+0x16>
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	ffffefff 	.word	0xffffefff

00004bf4 <__swrite>:
    4bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bf6:	001f      	movs	r7, r3
    4bf8:	898b      	ldrh	r3, [r1, #12]
    4bfa:	0005      	movs	r5, r0
    4bfc:	000c      	movs	r4, r1
    4bfe:	0016      	movs	r6, r2
    4c00:	05db      	lsls	r3, r3, #23
    4c02:	d505      	bpl.n	4c10 <__swrite+0x1c>
    4c04:	230e      	movs	r3, #14
    4c06:	5ec9      	ldrsh	r1, [r1, r3]
    4c08:	2200      	movs	r2, #0
    4c0a:	2302      	movs	r3, #2
    4c0c:	f000 f874 	bl	4cf8 <_lseek_r>
    4c10:	89a3      	ldrh	r3, [r4, #12]
    4c12:	4a05      	ldr	r2, [pc, #20]	; (4c28 <__swrite+0x34>)
    4c14:	0028      	movs	r0, r5
    4c16:	4013      	ands	r3, r2
    4c18:	81a3      	strh	r3, [r4, #12]
    4c1a:	0032      	movs	r2, r6
    4c1c:	230e      	movs	r3, #14
    4c1e:	5ee1      	ldrsh	r1, [r4, r3]
    4c20:	003b      	movs	r3, r7
    4c22:	f000 f81f 	bl	4c64 <_write_r>
    4c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c28:	ffffefff 	.word	0xffffefff

00004c2c <__sseek>:
    4c2c:	b570      	push	{r4, r5, r6, lr}
    4c2e:	000c      	movs	r4, r1
    4c30:	250e      	movs	r5, #14
    4c32:	5f49      	ldrsh	r1, [r1, r5]
    4c34:	f000 f860 	bl	4cf8 <_lseek_r>
    4c38:	89a3      	ldrh	r3, [r4, #12]
    4c3a:	1c42      	adds	r2, r0, #1
    4c3c:	d103      	bne.n	4c46 <__sseek+0x1a>
    4c3e:	4a05      	ldr	r2, [pc, #20]	; (4c54 <__sseek+0x28>)
    4c40:	4013      	ands	r3, r2
    4c42:	81a3      	strh	r3, [r4, #12]
    4c44:	bd70      	pop	{r4, r5, r6, pc}
    4c46:	2280      	movs	r2, #128	; 0x80
    4c48:	0152      	lsls	r2, r2, #5
    4c4a:	4313      	orrs	r3, r2
    4c4c:	81a3      	strh	r3, [r4, #12]
    4c4e:	6560      	str	r0, [r4, #84]	; 0x54
    4c50:	e7f8      	b.n	4c44 <__sseek+0x18>
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	ffffefff 	.word	0xffffefff

00004c58 <__sclose>:
    4c58:	b510      	push	{r4, lr}
    4c5a:	230e      	movs	r3, #14
    4c5c:	5ec9      	ldrsh	r1, [r1, r3]
    4c5e:	f000 f815 	bl	4c8c <_close_r>
    4c62:	bd10      	pop	{r4, pc}

00004c64 <_write_r>:
    4c64:	b570      	push	{r4, r5, r6, lr}
    4c66:	0005      	movs	r5, r0
    4c68:	0008      	movs	r0, r1
    4c6a:	0011      	movs	r1, r2
    4c6c:	2200      	movs	r2, #0
    4c6e:	4c06      	ldr	r4, [pc, #24]	; (4c88 <_write_r+0x24>)
    4c70:	6022      	str	r2, [r4, #0]
    4c72:	001a      	movs	r2, r3
    4c74:	f7fd fd3e 	bl	26f4 <_write>
    4c78:	1c43      	adds	r3, r0, #1
    4c7a:	d103      	bne.n	4c84 <_write_r+0x20>
    4c7c:	6823      	ldr	r3, [r4, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d000      	beq.n	4c84 <_write_r+0x20>
    4c82:	602b      	str	r3, [r5, #0]
    4c84:	bd70      	pop	{r4, r5, r6, pc}
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	2000051c 	.word	0x2000051c

00004c8c <_close_r>:
    4c8c:	2300      	movs	r3, #0
    4c8e:	b570      	push	{r4, r5, r6, lr}
    4c90:	4c06      	ldr	r4, [pc, #24]	; (4cac <_close_r+0x20>)
    4c92:	0005      	movs	r5, r0
    4c94:	0008      	movs	r0, r1
    4c96:	6023      	str	r3, [r4, #0]
    4c98:	f7fd fd66 	bl	2768 <_close>
    4c9c:	1c43      	adds	r3, r0, #1
    4c9e:	d103      	bne.n	4ca8 <_close_r+0x1c>
    4ca0:	6823      	ldr	r3, [r4, #0]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d000      	beq.n	4ca8 <_close_r+0x1c>
    4ca6:	602b      	str	r3, [r5, #0]
    4ca8:	bd70      	pop	{r4, r5, r6, pc}
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	2000051c 	.word	0x2000051c

00004cb0 <_fstat_r>:
    4cb0:	2300      	movs	r3, #0
    4cb2:	b570      	push	{r4, r5, r6, lr}
    4cb4:	4c06      	ldr	r4, [pc, #24]	; (4cd0 <_fstat_r+0x20>)
    4cb6:	0005      	movs	r5, r0
    4cb8:	0008      	movs	r0, r1
    4cba:	0011      	movs	r1, r2
    4cbc:	6023      	str	r3, [r4, #0]
    4cbe:	f7fd fd56 	bl	276e <_fstat>
    4cc2:	1c43      	adds	r3, r0, #1
    4cc4:	d103      	bne.n	4cce <_fstat_r+0x1e>
    4cc6:	6823      	ldr	r3, [r4, #0]
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d000      	beq.n	4cce <_fstat_r+0x1e>
    4ccc:	602b      	str	r3, [r5, #0]
    4cce:	bd70      	pop	{r4, r5, r6, pc}
    4cd0:	2000051c 	.word	0x2000051c

00004cd4 <_isatty_r>:
    4cd4:	2300      	movs	r3, #0
    4cd6:	b570      	push	{r4, r5, r6, lr}
    4cd8:	4c06      	ldr	r4, [pc, #24]	; (4cf4 <_isatty_r+0x20>)
    4cda:	0005      	movs	r5, r0
    4cdc:	0008      	movs	r0, r1
    4cde:	6023      	str	r3, [r4, #0]
    4ce0:	f7fd fd4a 	bl	2778 <_isatty>
    4ce4:	1c43      	adds	r3, r0, #1
    4ce6:	d103      	bne.n	4cf0 <_isatty_r+0x1c>
    4ce8:	6823      	ldr	r3, [r4, #0]
    4cea:	2b00      	cmp	r3, #0
    4cec:	d000      	beq.n	4cf0 <_isatty_r+0x1c>
    4cee:	602b      	str	r3, [r5, #0]
    4cf0:	bd70      	pop	{r4, r5, r6, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	2000051c 	.word	0x2000051c

00004cf8 <_lseek_r>:
    4cf8:	b570      	push	{r4, r5, r6, lr}
    4cfa:	0005      	movs	r5, r0
    4cfc:	0008      	movs	r0, r1
    4cfe:	0011      	movs	r1, r2
    4d00:	2200      	movs	r2, #0
    4d02:	4c06      	ldr	r4, [pc, #24]	; (4d1c <_lseek_r+0x24>)
    4d04:	6022      	str	r2, [r4, #0]
    4d06:	001a      	movs	r2, r3
    4d08:	f7fd fd38 	bl	277c <_lseek>
    4d0c:	1c43      	adds	r3, r0, #1
    4d0e:	d103      	bne.n	4d18 <_lseek_r+0x20>
    4d10:	6823      	ldr	r3, [r4, #0]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d000      	beq.n	4d18 <_lseek_r+0x20>
    4d16:	602b      	str	r3, [r5, #0]
    4d18:	bd70      	pop	{r4, r5, r6, pc}
    4d1a:	46c0      	nop			; (mov r8, r8)
    4d1c:	2000051c 	.word	0x2000051c

00004d20 <memchr>:
    4d20:	b2c9      	uxtb	r1, r1
    4d22:	1882      	adds	r2, r0, r2
    4d24:	4290      	cmp	r0, r2
    4d26:	d101      	bne.n	4d2c <memchr+0xc>
    4d28:	2000      	movs	r0, #0
    4d2a:	4770      	bx	lr
    4d2c:	7803      	ldrb	r3, [r0, #0]
    4d2e:	428b      	cmp	r3, r1
    4d30:	d0fb      	beq.n	4d2a <memchr+0xa>
    4d32:	3001      	adds	r0, #1
    4d34:	e7f6      	b.n	4d24 <memchr+0x4>

00004d36 <__malloc_lock>:
    4d36:	4770      	bx	lr

00004d38 <__malloc_unlock>:
    4d38:	4770      	bx	lr
	...

00004d3c <_read_r>:
    4d3c:	b570      	push	{r4, r5, r6, lr}
    4d3e:	0005      	movs	r5, r0
    4d40:	0008      	movs	r0, r1
    4d42:	0011      	movs	r1, r2
    4d44:	2200      	movs	r2, #0
    4d46:	4c06      	ldr	r4, [pc, #24]	; (4d60 <_read_r+0x24>)
    4d48:	6022      	str	r2, [r4, #0]
    4d4a:	001a      	movs	r2, r3
    4d4c:	f7fd fcb0 	bl	26b0 <_read>
    4d50:	1c43      	adds	r3, r0, #1
    4d52:	d103      	bne.n	4d5c <_read_r+0x20>
    4d54:	6823      	ldr	r3, [r4, #0]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d000      	beq.n	4d5c <_read_r+0x20>
    4d5a:	602b      	str	r3, [r5, #0]
    4d5c:	bd70      	pop	{r4, r5, r6, pc}
    4d5e:	46c0      	nop			; (mov r8, r8)
    4d60:	2000051c 	.word	0x2000051c
    4d64:	000003f4 	.word	0x000003f4
    4d68:	0000065c 	.word	0x0000065c
    4d6c:	0000065c 	.word	0x0000065c
    4d70:	0000065c 	.word	0x0000065c
    4d74:	0000065c 	.word	0x0000065c
    4d78:	0000065c 	.word	0x0000065c
    4d7c:	0000065c 	.word	0x0000065c
    4d80:	0000065c 	.word	0x0000065c
    4d84:	0000065c 	.word	0x0000065c
    4d88:	0000065c 	.word	0x0000065c
    4d8c:	0000065c 	.word	0x0000065c
    4d90:	0000065c 	.word	0x0000065c
    4d94:	0000065c 	.word	0x0000065c
    4d98:	0000065c 	.word	0x0000065c
    4d9c:	0000065c 	.word	0x0000065c
    4da0:	0000065c 	.word	0x0000065c
    4da4:	000003dc 	.word	0x000003dc
    4da8:	0000065c 	.word	0x0000065c
    4dac:	0000065c 	.word	0x0000065c
    4db0:	0000065c 	.word	0x0000065c
    4db4:	0000065c 	.word	0x0000065c
    4db8:	0000065c 	.word	0x0000065c
    4dbc:	0000065c 	.word	0x0000065c
    4dc0:	0000065c 	.word	0x0000065c
    4dc4:	0000065c 	.word	0x0000065c
    4dc8:	0000065c 	.word	0x0000065c
    4dcc:	0000065c 	.word	0x0000065c
    4dd0:	0000065c 	.word	0x0000065c
    4dd4:	0000065c 	.word	0x0000065c
    4dd8:	0000065c 	.word	0x0000065c
    4ddc:	0000065c 	.word	0x0000065c
    4de0:	0000065c 	.word	0x0000065c
    4de4:	000003ec 	.word	0x000003ec
    4de8:	0000065c 	.word	0x0000065c
    4dec:	0000065c 	.word	0x0000065c
    4df0:	0000065c 	.word	0x0000065c
    4df4:	0000065c 	.word	0x0000065c
    4df8:	0000065c 	.word	0x0000065c
    4dfc:	0000065c 	.word	0x0000065c
    4e00:	0000065c 	.word	0x0000065c
    4e04:	0000065c 	.word	0x0000065c
    4e08:	0000065c 	.word	0x0000065c
    4e0c:	0000065c 	.word	0x0000065c
    4e10:	0000065c 	.word	0x0000065c
    4e14:	0000065c 	.word	0x0000065c
    4e18:	0000065c 	.word	0x0000065c
    4e1c:	0000065c 	.word	0x0000065c
    4e20:	0000065c 	.word	0x0000065c
    4e24:	000003e4 	.word	0x000003e4
    4e28:	0000042c 	.word	0x0000042c
    4e2c:	000003c4 	.word	0x000003c4
    4e30:	000003d4 	.word	0x000003d4
    4e34:	000003cc 	.word	0x000003cc
    4e38:	00000002 	.word	0x00000002
    4e3c:	00000003 	.word	0x00000003
    4e40:	00000028 	.word	0x00000028
    4e44:	00000029 	.word	0x00000029
    4e48:	00000004 	.word	0x00000004
    4e4c:	00000005 	.word	0x00000005
    4e50:	00000006 	.word	0x00000006
    4e54:	00000007 	.word	0x00000007
    4e58:	00000008 	.word	0x00000008
    4e5c:	00000009 	.word	0x00000009
    4e60:	0000000a 	.word	0x0000000a
    4e64:	0000000b 	.word	0x0000000b
    4e68:	00000020 	.word	0x00000020
    4e6c:	00000021 	.word	0x00000021
    4e70:	00000022 	.word	0x00000022
    4e74:	00000023 	.word	0x00000023
    4e78:	00000028 	.word	0x00000028
    4e7c:	00000029 	.word	0x00000029
    4e80:	00000024 	.word	0x00000024
    4e84:	00000025 	.word	0x00000025
    4e88:	00000026 	.word	0x00000026
    4e8c:	00000027 	.word	0x00000027
    4e90:	00000008 	.word	0x00000008
    4e94:	00000009 	.word	0x00000009

00004e98 <_adc_apbcmasks>:
    4e98:	00020000 00040000                       ........

00004ea0 <_adc_biascomp_addr>:
    4ea0:	00806020 00806020                        `.. `..

00004ea8 <_adc_biascomp_pos>:
    4ea8:	00000903                                ....

00004eac <_adc_biasrefbuf_addr>:
    4eac:	00806020 00806020                        `.. `..

00004eb4 <_adc_biasrefbuf_pos>:
    4eb4:	00000600                                ....

00004eb8 <_adc_extchannel_msb>:
    4eb8:	0000000b 0000000b                       ........

00004ec0 <_adc_gclk_ids>:
    4ec0:	00002221                                !"..

00004ec4 <_tcc_intflag>:
    4ec4:	00000001 00000002 00000004 00000008     ................
    4ed4:	00001000 00002000 00004000 00008000     ..... ...@......
    4ee4:	00010000 00020000 00040000 00080000     ................
    4ef4:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    4f04:	42001400 42001800 00001f6a 00001f66     ...B...Bj...f...
    4f14:	00001f66 00001f98 00001f98 00001f82     f...............
    4f24:	00001f70 00001f88 0000215c 0000213c     p.......\!..<!..
    4f34:	0000213c 00002192 0000214e 0000216a     <!...!..N!..j!..
    4f44:	00002140 00002178 45200d0a 6e657478     @!..x!.... Exten
    4f54:	20646564 6d204446 61737365 72206567     ded FD message r
    4f64:	69656365 20646576 52206e69 75622078     eceived in Rx bu
    4f74:	72656666 6854202e 65722065 76696563     ffer. The receiv
    4f84:	64206465 20617461 203a7369 0000000d     ed data is: ....
    4f94:	53200d0a 646e6174 20647261 6d204446     .. Standard FD m
    4fa4:	61737365 72206567 69656365 20646576     essage received 
    4fb4:	52206e69 75622078 72656666 6854202e     in Rx buffer. Th
    4fc4:	65722065 76696563 64206465 20617461     e received data 
    4fd4:	203a7369 0000000d 64252020 00000000     is: ....  %d....
    4fe4:	000d0a0d 53200d0a 646e6174 20647261     ...... Standard 
    4ff4:	6d204446 61737365 72206567 69656365     FD message recei
    5004:	20646576 46206e69 204f4649 54202e30     ved in FIFO 0. T
    5014:	72206568 69656365 20646576 61746164     he received data
    5024:	3a736920 00000d20 53200d0a 646e6174      is: ..... Stand
    5034:	20647261 6d726f6e 6d206c61 61737365     ard normal messa
    5044:	72206567 69656365 20646576 46206e69     ge received in F
    5054:	204f4649 54202e30 72206568 69656365     IFO 0. The recei
    5064:	20646576 61746164 3a736920 00000d20     ved data is: ...
    5074:	45200d0a 6e657478 20646564 6d204446     .. Extended FD m
    5084:	61737365 72206567 69656365 20646576     essage received 
    5094:	46206e69 204f4649 54202e31 72206568     in FIFO 1. The r
    50a4:	69656365 20646576 61746164 3a736920     eceived data is:
    50b4:	00000d20 746f7250 6c6f636f 72726520      ...Protocol err
    50c4:	202c726f 61656c70 64206573 6c62756f     or, please doubl
    50d4:	68632065 206b6365 20656874 636f6c63     e check the cloc
    50e4:	6e69206b 6f777420 616f6220 2e736472     k in two boards.
    50f4:	0d0a0d20 00000000                        .......

000050fc <adc_interrupt_vectors.13786>:
    50fc:	00001a19 44200d0a 68637369 65677261     ...... Discharge
    510c:	6769735f 5f6c616e 5f636461 75736572     _signal_adc_resu
    511c:	6920746c 25203a73 0a0d2064 00000000     lt is: %d ......
    512c:	56200d0a 61746c6f 69206567 25203a73     .. Voltage is: %
    513c:	766d2064 000a0d20 43200d0a 65727275     d mv ..... Curre
    514c:	6920746e 25203a73 616d2064 000a0d20     nt is: %d ma ...
    515c:	43200d0a 67726168 69735f65 6c616e67     .. Charge_signal
    516c:	6364615f 7365725f 20746c75 203a7369     _adc_result is: 
    517c:	0d206425 0000000a 74746162 5f797265     %d .....battery_
    518c:	72616863 635f6567 75636c61 6974616c     charge_calculati
    519c:	000d6e6f 68630d0a 65677261 6769735f     on....charge_sig
    51ac:	5f6c616e 5f636461 75736572 2520746c     nal_adc_result %
    51bc:	0a0d2064 00000000 68200d0a 2a657265     d ........ here*
    51cc:	2a2a2a2a 2a2a2a2a 0a202a2a 0000000d     ********** .....
    51dc:	72616863 5f726567 74617473 25207375     charger_status %
    51ec:	0a0d2064 00000000 6d6d6f63 54646e61     d ......commandT
    51fc:	20657079 25203d3d 00000064 6d6d6f43     ype == %d...Comm
    520c:	20646e61 65636552 64657669 00000d21     and Received!...
    521c:	706d6574 74617265 20657275 0000003a     temperature :...
    522c:	23232323 23232323 62232323 65747461     ###########batte
    523c:	735f7972 75746174 203a2073 0a0d6425     ry_status : %d..
    524c:	00000000 72616863 725f6567 69616d65     ....charge_remai
    525c:	65705f6e 6e656372 65676174 25203a20     n_percentage : %
    526c:	000a0d64 5f677661 72616863 635f6567     d...avg_charge_c
    527c:	65727275 725f746e 69646165 3a20676e     urrent_reading :
    528c:	0d642520 0000000a 5f677661 63736964      %d.....avg_disc
    529c:	67726168 75635f65 6e657272 65725f74     harge_current_re
    52ac:	6e696461 203a2067 0a0d6425 00000000     ading : %d......
    52bc:	72616579 20642520 746e6f6d 64252068     year %d month %d
    52cc:	79616420 20642520 00000a0d               day %d ....

000052d8 <_global_impure_ptr>:
    52d8:	20000034                                4.. 

000052dc <__sf_fake_stderr>:
	...

000052fc <__sf_fake_stdin>:
	...

0000531c <__sf_fake_stdout>:
	...
    533c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    534c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    535c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    536c:	00006665                                ef..

00005370 <_init>:
    5370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5376:	bc08      	pop	{r3}
    5378:	469e      	mov	lr, r3
    537a:	4770      	bx	lr

0000537c <__init_array_start>:
    537c:	000000e5 	.word	0x000000e5

00005380 <_fini>:
    5380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5386:	bc08      	pop	{r3}
    5388:	469e      	mov	lr, r3
    538a:	4770      	bx	lr

0000538c <__fini_array_start>:
    538c:	000000bd 	.word	0x000000bd
